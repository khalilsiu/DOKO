[{"/Users/anthonysiu/doko/DOKO/client/src/index.tsx":"1","/Users/anthonysiu/doko/DOKO/client/src/reportWebVitals.ts":"2","/Users/anthonysiu/doko/DOKO/client/src/store/store.ts":"3","/Users/anthonysiu/doko/DOKO/client/src/App.tsx":"4","/Users/anthonysiu/doko/DOKO/client/src/core/ThemeProvider.tsx":"5","/Users/anthonysiu/doko/DOKO/client/src/config/index.ts":"6","/Users/anthonysiu/doko/DOKO/client/src/contexts/DrawerContext.tsx":"7","/Users/anthonysiu/doko/DOKO/client/src/contexts/AuthContext.tsx":"8","/Users/anthonysiu/doko/DOKO/client/src/contexts/CreateProfileContext.tsx":"9","/Users/anthonysiu/doko/DOKO/client/src/components/Loading.tsx":"10","/Users/anthonysiu/doko/DOKO/client/src/store/app/index.ts":"11","/Users/anthonysiu/doko/DOKO/client/src/store/meta-nft-collections/index.ts":"12","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-landing/index.tsx":"13","/Users/anthonysiu/doko/DOKO/client/src/modules/landing/index.tsx":"14","/Users/anthonysiu/doko/DOKO/client/src/modules/nft-collections/index.tsx":"15","/Users/anthonysiu/doko/DOKO/client/src/modules/nft-individual/index.tsx":"16","/Users/anthonysiu/doko/DOKO/client/src/modules/profiles/index.tsx":"17","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-collection/index.tsx":"18","/Users/anthonysiu/doko/DOKO/client/src/modules/profile-page/index.tsx":"19","/Users/anthonysiu/doko/DOKO/client/src/modules/collection/index.tsx":"20","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-nft-collections/index.tsx":"21","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-profiles/index.tsx":"22","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-profile-page/index.tsx":"23","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-nft-individual/index.tsx":"24","/Users/anthonysiu/doko/DOKO/client/src/modules/core/Header/index.tsx":"25","/Users/anthonysiu/doko/DOKO/client/src/modules/core/Intro/index.tsx":"26","/Users/anthonysiu/doko/DOKO/client/src/modules/core/Footer/index.tsx":"27","/Users/anthonysiu/doko/DOKO/client/src/components/modal.tsx":"28","/Users/anthonysiu/doko/DOKO/client/src/store/app/appStateSlice.ts":"29","/Users/anthonysiu/doko/DOKO/client/src/store/meta-nft-collections/profileOwnershipSlice.ts":"30","/Users/anthonysiu/doko/DOKO/client/src/store/meta-nft-collections/addressOwnershipSlice.ts":"31","/Users/anthonysiu/doko/DOKO/client/src/store/meta-nft-collections/collectionSummarySlice.ts":"32","/Users/anthonysiu/doko/DOKO/client/src/types/index.ts":"33","/Users/anthonysiu/doko/DOKO/client/src/libs/contract-service-api.ts":"34","/Users/anthonysiu/doko/DOKO/client/src/constants/metaverses.ts":"35","/Users/anthonysiu/doko/DOKO/client/src/components/Meta.tsx":"36","/Users/anthonysiu/doko/DOKO/client/src/modules/core/Header/SmallScreen.tsx":"37","/Users/anthonysiu/doko/DOKO/client/src/modules/core/Header/LargeScreen.tsx":"38","/Users/anthonysiu/doko/DOKO/client/src/libs/opensea-api.ts":"39","/Users/anthonysiu/doko/DOKO/client/src/utils/utils.ts":"40","/Users/anthonysiu/doko/DOKO/client/src/types/interfaces.ts":"41","/Users/anthonysiu/doko/DOKO/client/src/types/enums.ts":"42","/Users/anthonysiu/doko/DOKO/client/src/components/index.ts":"43","/Users/anthonysiu/doko/DOKO/client/src/modules/core/Header/HeaderUserButton.tsx":"44","/Users/anthonysiu/doko/DOKO/client/src/components/NftPagination.tsx":"45","/Users/anthonysiu/doko/DOKO/client/src/components/SectionLabel.tsx":"46","/Users/anthonysiu/doko/DOKO/client/src/libs/utils.ts":"47","/Users/anthonysiu/doko/DOKO/client/src/libs/web3.ts":"48","/Users/anthonysiu/doko/DOKO/client/src/components/NFTItem.tsx":"49","/Users/anthonysiu/doko/DOKO/client/src/components/LightButton.tsx":"50","/Users/anthonysiu/doko/DOKO/client/src/components/OpenseaNFTItem.tsx":"51","/Users/anthonysiu/doko/DOKO/client/src/components/SolanaNFTItem.tsx":"52","/Users/anthonysiu/doko/DOKO/client/src/components/TabPanel.tsx":"53","/Users/anthonysiu/doko/DOKO/client/src/components/RadiusInput.tsx":"54","/Users/anthonysiu/doko/DOKO/client/src/components/Popover.tsx":"55","/Users/anthonysiu/doko/DOKO/client/src/modules/api.ts":"56","/Users/anthonysiu/doko/DOKO/client/src/libs/moralis.ts":"57","/Users/anthonysiu/doko/DOKO/client/src/components/PopoverShare.tsx":"58","/Users/anthonysiu/doko/DOKO/client/src/hooks/useProfileSummaries.ts":"59","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-nft-individual/solanaTraits.tsx":"60","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-nft-individual/CopyAddress.tsx":"61","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-nft-individual/traits.tsx":"62","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-nft-individual/api.tsx":"63","/Users/anthonysiu/doko/DOKO/client/src/hooks/useAddressSummaries.ts":"64","/Users/anthonysiu/doko/DOKO/client/src/components/OwnershipView.tsx":"65","/Users/anthonysiu/doko/DOKO/client/src/libs/solana.ts":"66","/Users/anthonysiu/doko/DOKO/client/src/modules/collection/api.ts":"67","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-profiles/ProfileItem.tsx":"68","/Users/anthonysiu/doko/DOKO/client/src/components/CopyAddress.tsx":"69","/Users/anthonysiu/doko/DOKO/client/src/modules/collection/components/CollectionTab.tsx":"70","/Users/anthonysiu/doko/DOKO/client/src/modules/collection/components/CollectionHeader.tsx":"71","/Users/anthonysiu/doko/DOKO/client/src/modules/collection/components/NftData.tsx":"72","/Users/anthonysiu/doko/DOKO/client/src/modules/profile-page/Summary.tsx":"73","/Users/anthonysiu/doko/DOKO/client/src/modules/profile-page/EthNfts.tsx":"74","/Users/anthonysiu/doko/DOKO/client/src/modules/profile-page/SolNfts.tsx":"75","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-collection/api.ts":"76","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-collection/components/NftData.tsx":"77","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-collection/components/CollectionTab.tsx":"78","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-collection/components/CollectionHeader.tsx":"79","/Users/anthonysiu/doko/DOKO/client/src/modules/profiles/ProfileItem.tsx":"80","/Users/anthonysiu/doko/DOKO/client/src/libs/api.ts":"81","/Users/anthonysiu/doko/DOKO/client/src/modules/nft-individual/CopyAddress.tsx":"82","/Users/anthonysiu/doko/DOKO/client/src/modules/nft-individual/solanaTraits.tsx":"83","/Users/anthonysiu/doko/DOKO/client/src/modules/nft-individual/traits.tsx":"84","/Users/anthonysiu/doko/DOKO/client/src/modules/nft-individual/api.tsx":"85","/Users/anthonysiu/doko/DOKO/client/src/modules/nft-collections/Summary.tsx":"86","/Users/anthonysiu/doko/DOKO/client/src/modules/nft-collections/SolNfts.tsx":"87","/Users/anthonysiu/doko/DOKO/client/src/modules/nft-collections/EthNfts.tsx":"88","/Users/anthonysiu/doko/DOKO/client/src/components/maps/RenderMaps.tsx":"89","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-profiles/Address.tsx":"90","/Users/anthonysiu/doko/DOKO/client/src/modules/collection/components/CollectionActions.tsx":"91","/Users/anthonysiu/doko/DOKO/client/src/components/PriceField.tsx":"92","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-collection/components/CollectionActions.tsx":"93","/Users/anthonysiu/doko/DOKO/client/src/modules/profiles/Address.tsx":"94","/Users/anthonysiu/doko/DOKO/client/src/components/maps/DecentralandMap.tsx":"95","/Users/anthonysiu/doko/DOKO/client/src/components/maps/CryptovoxelsMap.tsx":"96","/Users/anthonysiu/doko/DOKO/client/src/components/maps/SandboxMap.tsx":"97","/Users/anthonysiu/doko/DOKO/client/src/components/maps/SomniumSpaceMap.tsx":"98","/Users/anthonysiu/doko/DOKO/client/src/hooks/useRenderMaps.ts":"99","/Users/anthonysiu/doko/DOKO/client/src/components/maps/constants.ts":"100","/Users/anthonysiu/doko/DOKO/client/src/components/maps/RenderMarkers.tsx":"101","/Users/anthonysiu/doko/DOKO/client/src/store/stats/dclStatsSlice.ts":"102","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-stats-page/index.tsx":"103","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-stats-page/StatsView.tsx":"104"},{"size":1444,"mtime":1646897275114,"results":"105","hashOfConfig":"106"},{"size":425,"mtime":1646897275127,"results":"107","hashOfConfig":"106"},{"size":665,"mtime":1646900311170,"results":"108","hashOfConfig":"106"},{"size":5409,"mtime":1646900301026,"results":"109","hashOfConfig":"106"},{"size":1746,"mtime":1646897275095,"results":"110","hashOfConfig":"106"},{"size":704,"mtime":1646897275094,"results":"111","hashOfConfig":"106"},{"size":673,"mtime":1646897275095,"results":"112","hashOfConfig":"106"},{"size":6942,"mtime":1646897275094,"results":"113","hashOfConfig":"106"},{"size":3652,"mtime":1646897275094,"results":"114","hashOfConfig":"106"},{"size":664,"mtime":1646897275091,"results":"115","hashOfConfig":"106"},{"size":33,"mtime":1646897275128,"results":"116","hashOfConfig":"106"},{"size":124,"mtime":1646897275128,"results":"117","hashOfConfig":"106"},{"size":9376,"mtime":1646897275121,"results":"118","hashOfConfig":"106"},{"size":7865,"mtime":1646897275120,"results":"119","hashOfConfig":"106"},{"size":14195,"mtime":1646897275124,"results":"120","hashOfConfig":"106"},{"size":21286,"mtime":1646897275125,"results":"121","hashOfConfig":"106"},{"size":16690,"mtime":1646897275127,"results":"122","hashOfConfig":"106"},{"size":3180,"mtime":1646897275121,"results":"123","hashOfConfig":"106"},{"size":22455,"mtime":1646897275126,"results":"124","hashOfConfig":"106"},{"size":3176,"mtime":1646897275115,"results":"125","hashOfConfig":"106"},{"size":4292,"mtime":1646897275121,"results":"126","hashOfConfig":"106"},{"size":16253,"mtime":1646897275123,"results":"127","hashOfConfig":"106"},{"size":8866,"mtime":1646897275122,"results":"128","hashOfConfig":"106"},{"size":26597,"mtime":1646897275122,"results":"129","hashOfConfig":"106"},{"size":2278,"mtime":1646897275120,"results":"130","hashOfConfig":"106"},{"size":4934,"mtime":1646897275120,"results":"131","hashOfConfig":"106"},{"size":1993,"mtime":1646897275116,"results":"132","hashOfConfig":"106"},{"size":1270,"mtime":1646897275094,"results":"133","hashOfConfig":"106"},{"size":1164,"mtime":1646899997382,"results":"134","hashOfConfig":"106"},{"size":3252,"mtime":1646897275129,"results":"135","hashOfConfig":"106"},{"size":1045,"mtime":1646897275128,"results":"136","hashOfConfig":"106"},{"size":2004,"mtime":1646897275128,"results":"137","hashOfConfig":"106"},{"size":55,"mtime":1646897275129,"results":"138","hashOfConfig":"106"},{"size":1091,"mtime":1646900307402,"results":"139","hashOfConfig":"106"},{"size":2363,"mtime":1646899855979,"results":"140","hashOfConfig":"106"},{"size":926,"mtime":1646897275091,"results":"141","hashOfConfig":"106"},{"size":3240,"mtime":1646897275120,"results":"142","hashOfConfig":"106"},{"size":2797,"mtime":1646897275119,"results":"143","hashOfConfig":"106"},{"size":272,"mtime":1646897275114,"results":"144","hashOfConfig":"106"},{"size":2415,"mtime":1646897275130,"results":"145","hashOfConfig":"106"},{"size":207,"mtime":1646897275129,"results":"146","hashOfConfig":"106"},{"size":75,"mtime":1646897275129,"results":"147","hashOfConfig":"106"},{"size":267,"mtime":1646897275093,"results":"148","hashOfConfig":"106"},{"size":1418,"mtime":1646897275119,"results":"149","hashOfConfig":"106"},{"size":2664,"mtime":1646897275091,"results":"150","hashOfConfig":"106"},{"size":205,"mtime":1646897275092,"results":"151","hashOfConfig":"106"},{"size":5517,"mtime":1646897275114,"results":"152","hashOfConfig":"106"},{"size":167,"mtime":1646897275114,"results":"153","hashOfConfig":"106"},{"size":7921,"mtime":1646897275091,"results":"154","hashOfConfig":"106"},{"size":173,"mtime":1646897275090,"results":"155","hashOfConfig":"106"},{"size":7421,"mtime":1646897275091,"results":"156","hashOfConfig":"106"},{"size":7913,"mtime":1646897275092,"results":"157","hashOfConfig":"106"},{"size":604,"mtime":1646897275092,"results":"158","hashOfConfig":"106"},{"size":347,"mtime":1646897275092,"results":"159","hashOfConfig":"106"},{"size":2670,"mtime":1646897275092,"results":"160","hashOfConfig":"106"},{"size":846,"mtime":1646897275115,"results":"161","hashOfConfig":"106"},{"size":397,"mtime":1646897275114,"results":"162","hashOfConfig":"106"},{"size":2501,"mtime":1646897275092,"results":"163","hashOfConfig":"106"},{"size":3564,"mtime":1646897275113,"results":"164","hashOfConfig":"106"},{"size":2175,"mtime":1646897275122,"results":"165","hashOfConfig":"106"},{"size":1302,"mtime":1646897275121,"results":"166","hashOfConfig":"106"},{"size":2260,"mtime":1646897275122,"results":"167","hashOfConfig":"106"},{"size":1181,"mtime":1646897275121,"results":"168","hashOfConfig":"106"},{"size":853,"mtime":1646897275113,"results":"169","hashOfConfig":"106"},{"size":11654,"mtime":1646897275092,"results":"170","hashOfConfig":"106"},{"size":2059,"mtime":1646897275114,"results":"171","hashOfConfig":"106"},{"size":764,"mtime":1646897275115,"results":"172","hashOfConfig":"106"},{"size":5627,"mtime":1646897275123,"results":"173","hashOfConfig":"106"},{"size":1038,"mtime":1646897275090,"results":"174","hashOfConfig":"106"},{"size":5079,"mtime":1646897275115,"results":"175","hashOfConfig":"106"},{"size":5780,"mtime":1646897275115,"results":"176","hashOfConfig":"106"},{"size":12353,"mtime":1646897275115,"results":"177","hashOfConfig":"106"},{"size":3253,"mtime":1646897275126,"results":"178","hashOfConfig":"106"},{"size":2147,"mtime":1646897275125,"results":"179","hashOfConfig":"106"},{"size":1071,"mtime":1646897275126,"results":"180","hashOfConfig":"106"},{"size":764,"mtime":1646897275120,"results":"181","hashOfConfig":"106"},{"size":12353,"mtime":1646897275120,"results":"182","hashOfConfig":"106"},{"size":5079,"mtime":1646897275120,"results":"183","hashOfConfig":"106"},{"size":5780,"mtime":1646897275120,"results":"184","hashOfConfig":"106"},{"size":5627,"mtime":1646897275127,"results":"185","hashOfConfig":"106"},{"size":161,"mtime":1646897275114,"results":"186","hashOfConfig":"106"},{"size":1302,"mtime":1646897275124,"results":"187","hashOfConfig":"106"},{"size":2175,"mtime":1646897275125,"results":"188","hashOfConfig":"106"},{"size":3377,"mtime":1646897275125,"results":"189","hashOfConfig":"106"},{"size":1181,"mtime":1646897275124,"results":"190","hashOfConfig":"106"},{"size":3802,"mtime":1646897275124,"results":"191","hashOfConfig":"106"},{"size":1071,"mtime":1646897275123,"results":"192","hashOfConfig":"106"},{"size":2098,"mtime":1646897275123,"results":"193","hashOfConfig":"106"},{"size":980,"mtime":1646897275093,"results":"194","hashOfConfig":"106"},{"size":1710,"mtime":1646897275123,"results":"195","hashOfConfig":"106"},{"size":2613,"mtime":1646897275115,"results":"196","hashOfConfig":"106"},{"size":677,"mtime":1646897275092,"results":"197","hashOfConfig":"106"},{"size":2613,"mtime":1646897275120,"results":"198","hashOfConfig":"106"},{"size":1670,"mtime":1646897275127,"results":"199","hashOfConfig":"106"},{"size":1521,"mtime":1646897275093,"results":"200","hashOfConfig":"106"},{"size":1245,"mtime":1646897275093,"results":"201","hashOfConfig":"106"},{"size":1463,"mtime":1646897275094,"results":"202","hashOfConfig":"106"},{"size":1483,"mtime":1646897275094,"results":"203","hashOfConfig":"106"},{"size":2131,"mtime":1646897275113,"results":"204","hashOfConfig":"106"},{"size":1628,"mtime":1646897275094,"results":"205","hashOfConfig":"106"},{"size":1711,"mtime":1646897275093,"results":"206","hashOfConfig":"106"},{"size":995,"mtime":1646900292485,"results":"207","hashOfConfig":"106"},{"size":2373,"mtime":1646899855941,"results":"208","hashOfConfig":"106"},{"size":7484,"mtime":1646899855941,"results":"209","hashOfConfig":"106"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},"1nk0qr2",{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"212"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"212"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"212"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"212"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"212"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"212"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"212"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"212"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"212"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"212"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"212"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"212"},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"212"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"212"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"212"},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"212"},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"212"},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"212"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"391","messages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"393","messages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"395","messages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"212"},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"212"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"212"},{"filePath":"409","messages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"411","messages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"212"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"422","messages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"212"},{"filePath":"425","messages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"429","messages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"212"},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/anthonysiu/doko/DOKO/client/src/index.tsx",[],[],"/Users/anthonysiu/doko/DOKO/client/src/reportWebVitals.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/store/store.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/App.tsx",["440","441"],"/Users/anthonysiu/doko/DOKO/client/src/core/ThemeProvider.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/config/index.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/contexts/DrawerContext.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/contexts/AuthContext.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/contexts/CreateProfileContext.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/components/Loading.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/store/app/index.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/store/meta-nft-collections/index.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/meta-landing/index.tsx",["442","443"],"import { useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport Link from '@material-ui/core/Link';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport Meta from '../../components/Meta';\nimport { AuthContext } from '../../contexts/AuthContext';\n\nexport const MetaLanding = () => {\n  const images = [\n    'meta-landing/decentraland.png',\n    'meta-landing/cryptovoxels.png',\n    'meta-landing/thesandbox.png',\n    'meta-landing/somniumspace.png',\n  ];\n\n  const styles = useStyles();\n  const { connect, loading, address } = useContext(AuthContext);\n  const history = useHistory();\n  const [snackBar, setSnackBar] = useState(true);\n  const handleClose = () => {\n    setSnackBar(false);\n  };\n\n  const message = (\n    <div>\n      <Typography>\n        {\n          \"We are expanding our product offering to metaverse real estate. To visit DOKO's NFT Dashboard, click here to visit \"\n        }\n        <Link href=\"https://nft.doko.one\" underline=\"always\" style={{ color: '#00b0ff' }}>\n          nft.doko.one\n        </Link>\n      </Typography>\n    </div>\n  );\n\n  return (\n    <>\n      <Meta\n        title=\"DOKO, Metaverse Real Estate Portfolio Manager\"\n        description=\"The Metaverse Real Estate Portfolio Manager that allows you to display, manage and trade your metaverse real estates\"\n        url=\"https://doko.one\"\n        image=\"/DOKO_LOGO.png\"\n      />\n      <Container maxWidth=\"lg\" className={styles.landingTopSection}>\n        <Snackbar\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n          open={snackBar}\n          onClose={handleClose}\n          className={styles.snackBar}\n        >\n          <SnackbarContent message={message} />\n        </Snackbar>\n        <h1 className={styles.landingTopTitle}>All Your Metaverse Real Estate in One Place</h1>\n        <h3 className={styles.landingTopMiddleText}>\n          Manage your real estate from supported metaverse under one single dashboard\n        </h3>\n        <Button\n          style={{ marginTop: 48, minWidth: 160 }}\n          className=\"gradient-button\"\n          variant=\"outlined\"\n          disabled={loading}\n          onClick={() => (address ? history.push(`/address/${address}`) : connect())}\n        >\n          {address ? 'Your Profile' : 'Connect Wallet'}\n        </Button>\n      </Container>\n\n      <section className={styles.betaSection}>\n        <Container>\n          <Grid wrap=\"wrap\" container alignItems=\"center\" justifyContent=\"space-evenly\">\n            {images.map((image) => (\n              <Grid item key={image} className={styles.betaSectionImage}>\n                <img src={image} alt=\"\" />\n              </Grid>\n            ))}\n          </Grid>\n          {/* <img className=\"beta-image\" src=\"BetaVersion.png\" alt=\"\" /> */}\n        </Container>\n      </section>\n\n      <section className={styles.whatCanYouDoSection}>\n        <div className={styles.whatCanYouDoTextContainer}>\n          <div className={styles.highlightText}>DOKO Features</div>\n        </div>\n        <Grid\n          className={styles.whatYouCanDoItem}\n          container\n          wrap=\"nowrap\"\n          alignItems=\"center\"\n          justifyContent=\"flex-start\"\n          spacing={10}\n        >\n          <div className={styles.whatYouCanDoImage}>\n            <img src=\"meta-landing/dashboard.png\" alt=\"\" />\n          </div>\n          <div>\n            <Grid wrap=\"nowrap\" container alignItems=\"center\" spacing={6}>\n              <Grid item>\n                <Typography className={styles.numberText} component=\"h1\" variant=\"h1\">\n                  1\n                </Typography>\n              </Grid>\n              <Typography className={styles.description} variant=\"body1\">\n                All Your Digital Real Estate Under One Single Dashboard\n              </Typography>\n            </Grid>\n          </div>\n        </Grid>\n        <Grid\n          className={styles.whatYouCanDoItem}\n          container\n          wrap=\"nowrap\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          spacing={10}\n        >\n          <div className={styles.whatYouCanDoImage}>\n            <img src=\"meta-landing/analysis.png\" alt=\"\" />\n          </div>\n          <div>\n            <Grid wrap=\"nowrap\" container alignItems=\"center\" spacing={6}>\n              <Grid item>\n                <Typography className={styles.numberText} component=\"h1\" variant=\"h1\">\n                  2\n                </Typography>\n              </Grid>\n              <Typography className={styles.description} variant=\"body1\">\n                Real-Time Market Analysis at Your Fingertips (Coming Soon!)\n              </Typography>\n            </Grid>\n          </div>\n        </Grid>\n        <Grid\n          className={styles.whatYouCanDoItem}\n          container\n          wrap=\"nowrap\"\n          alignItems=\"center\"\n          justifyContent=\"flex-start\"\n          spacing={10}\n        >\n          <div className={styles.whatYouCanDoImage}>\n            <img src=\"meta-landing/lending.png\" alt=\"\" />\n          </div>\n          <div>\n            <Grid container wrap=\"nowrap\" alignItems=\"center\" spacing={6}>\n              <Grid item>\n                <Typography className={styles.numberText} component=\"h1\" variant=\"h1\">\n                  3\n                </Typography>\n              </Grid>\n              <Typography className={styles.description} variant=\"body1\">\n                Real Estate Collateralized P2P Lending (Coming Soon!)\n              </Typography>\n            </Grid>\n          </div>\n        </Grid>\n        <Grid\n          className={styles.whatYouCanDoItem}\n          container\n          wrap=\"nowrap\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          spacing={10}\n        >\n          <div className={styles.whatYouCanDoImage}>\n            <img src=\"meta-landing/rental.png\" alt=\"\" />\n          </div>\n          <div>\n            <Grid wrap=\"nowrap\" container alignItems=\"center\" spacing={6}>\n              <Grid item>\n                <Typography className={styles.numberText} component=\"h1\" variant=\"h1\">\n                  4\n                </Typography>\n              </Grid>\n              <Typography className={styles.description} variant=\"body1\">\n                Non-Custodial Real Estate Rental (Coming Soon!)\n              </Typography>\n            </Grid>\n          </div>\n        </Grid>\n        <div style={{ textAlign: 'center', padding: '84px 0' }}>\n          <div className={styles.highlightText}>More Exciting Features</div>\n          <div className={styles.highlightText}>to Come!</div>\n        </div>\n      </section>\n    </>\n  );\n};\n\nconst useStyles = makeStyles((theme) => ({\n  landingTopSection: {\n    textAlign: 'center',\n    color: 'white',\n    height: 'calc(100vh - 75px)',\n    display: 'flex !important',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    [theme.breakpoints.down('sm')]: {\n      height: 'calc(100vh - 150px)',\n    },\n  },\n  landingTopTitle: {\n    fontSize: 64,\n    fontFamily: 'Exo2',\n    marginTop: 0,\n    maxWidth: '80%',\n    [theme.breakpoints.down('sm')]: {\n      maxWidth: '100%',\n    },\n  },\n  landingTopMiddleText: {\n    maxWidth: '40%',\n    margin: '0 auto',\n    [theme.breakpoints.down('md')]: {\n      maxWidth: '90%',\n    },\n  },\n  highlightText: {\n    fontWeight: 800,\n    fontSize: 48,\n    color: 'white',\n    fontFamily: 'Exo2',\n    [theme.breakpoints.down('sm')]: {\n      fontSize: 32,\n    },\n  },\n  numberText: {\n    fontWeight: 600,\n    fontSize: 78,\n    color: 'white',\n    fontFamily: 'Exo2',\n  },\n  description: {\n    fontWeight: 600,\n    fontSize: 22,\n    width: 240,\n    fontFamily: 'Exo2',\n    [theme.breakpoints.down('xs')]: {\n      width: 'unset',\n    },\n  },\n  betaSection: {\n    background: '#ffffff',\n    padding: '64px 0',\n    position: 'relative',\n    [theme.breakpoints.down('xs')]: {\n      padding: theme.spacing(1),\n    },\n  },\n  betaSectionImage: {\n    textAlign: 'center',\n    [theme.breakpoints.down('xs')]: {\n      padding: theme.spacing(3),\n    },\n  },\n  whatCanYouDoSection: {\n    padding: 48,\n    fontFamily: 'Exo2',\n    [theme.breakpoints.down('sm')]: {\n      padding: 24,\n    },\n  },\n  whatYouCanDoItem: {\n    padding: '0 84px 36px',\n    position: 'relative',\n    '& > img': {\n      [theme.breakpoints.down('sm')]: {\n        width: '300px',\n      },\n    },\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column',\n      padding: 0,\n      margin: 0,\n      width: '100%',\n      paddingBottom: 48,\n      alignItems: 'start',\n      '& > div': {\n        marginLeft: 0,\n      },\n    },\n  },\n  whatYouCanDoImage: {\n    width: 421,\n    height: 421,\n    [theme.breakpoints.down('sm')]: {\n      width: 'unset',\n    },\n  },\n  whatCanYouDoTextContainer: {\n    marginBottom: 84,\n    [theme.breakpoints.down('sm')]: {\n      marginBottom: 48,\n    },\n  },\n  wereHereImage: {\n    width: '80px !important',\n  },\n  snackBar: {\n    minWidth: '80vw',\n  },\n}));\n\nexport default MetaLanding;\n","/Users/anthonysiu/doko/DOKO/client/src/modules/landing/index.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/nft-collections/index.tsx",["444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462"],"import { useEffect, useState } from 'react';\nimport {\n  Card,\n  Grid,\n  Hidden,\n  IconButton,\n  makeStyles,\n  Tab,\n  Tabs,\n  Tooltip,\n  Typography,\n  withStyles,\n  Button,\n  Modal,\n  OutlinedInput,\n} from '@material-ui/core';\n\nimport { useCookies } from 'react-cookie';\nimport { useParams, useHistory } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport RefreshOutlinedIcon from '@material-ui/icons/RefreshOutlined';\n\nimport { TabPanel, NftPagination, Meta } from '../../components';\nimport { getAddressStatus, getNFTs, indexAddress } from '../api';\nimport { Filter } from './Filter';\nimport Intro from '../core/Intro';\nimport { isSolAddress, minimizeAddress } from '../../libs/utils';\nimport { AddressStatus } from './AddressStatus';\nimport CopyAddress from '../../components/CopyAddress';\nimport EthNfts from './EthNfts';\nimport SolNfts from './SolNfts';\nimport SectionLabel from '../../components/SectionLabel';\nimport { Summary } from './Summary';\n\nimport './select-search.css';\n\nimport OpenSeaAPI from '../../libs/opensea-api';\nimport { getSolNfts } from '../../libs/solana';\n\nimport eth from './assets/eth.png';\nimport bsc from './assets/bsc.png';\nimport polygon from './assets/polygon.png';\nimport solana from './assets/solana.png';\n\nconst CustomTabs = withStyles({\n  root: {\n    width: '100%',\n  },\n  flexContainer: {\n    borderBottom: '2px solid #46324a',\n  },\n})(Tabs);\n\nconst CustomTab = withStyles({\n  wrapper: {\n    textTransform: 'none',\n  },\n})(Tab);\n\nconst CustomIconButton = withStyles({\n  disabled: {\n    color: '#333 !important',\n  },\n})(IconButton);\n\nlet syncInterval: any;\n\nconst useStyles = makeStyles((theme) => ({\n  collectionPageContainer: {\n    padding: 24,\n    marginTop: 36,\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column',\n      marginTop: 0,\n    },\n    minHeight: 'calc(100vh)',\n  },\n  introCard: {\n    position: 'sticky',\n    top: 120,\n  },\n  itemsContainer: {\n    paddingLeft: 36,\n    [theme.breakpoints.down('sm')]: {\n      paddingLeft: 0,\n    },\n  },\n  nftsContainer: {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(4, 1fr)',\n    gridAutoRows: '1fr',\n    columnGap: 12,\n    rowGap: 12,\n    [theme.breakpoints.down('md')]: {\n      gridTemplateColumns: 'repeat(3, 1fr)',\n    },\n    [theme.breakpoints.down('sm')]: {\n      gridTemplateColumns: 'repeat(2, 1fr)',\n    },\n    [theme.breakpoints.down('xs')]: {\n      gridTemplateColumns: 'repeat(1, 1fr)',\n    },\n  },\n  addressContainer: {\n    marginBottom: 12,\n    [theme.breakpoints.down('xs')]: {\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n  },\n  addressText: {\n    fontWeight: 'bolder',\n    [theme.breakpoints.down('sm')]: {\n      fontSize: 30,\n    },\n  },\n  createProfileButton: {\n    cursor: 'pointer',\n    right: '4%',\n    width: 162,\n    height: 46,\n    zIndex: 999,\n    position: 'absolute',\n  },\n  createProfileDialog: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    maxHeight: '90vh',\n    maxWidth: '90vw',\n    width: 578,\n    height: 320,\n    border: '1px solid #FFFFFF',\n    background: '#000000',\n    boxShadow: '0px 10px 20px rgba(0, 0, 0, 0.75)',\n    borderRadius: '23px',\n  },\n}));\n\nconst initialData = [\n  {\n    icon: eth,\n    count: 0,\n    price: 0,\n    name: 'Ethereum',\n    available: true,\n    loading: true,\n  },\n  {\n    icon: bsc,\n    count: 0,\n    price: 0,\n    name: 'BSC',\n  },\n  {\n    icon: polygon,\n    count: 0,\n    price: 0,\n    name: 'Polygon',\n  },\n  {\n    icon: solana,\n    count: 0,\n    price: 0,\n    name: 'Solana',\n  },\n];\n\nexport const NftCollections = () => {\n  const [loading, setLoading] = useState(true);\n  const [nfts, setNFTs] = useState<any[]>([]);\n  const { address } = useParams<{ address: string }>();\n  const styles = useStyles();\n  const [tabValue, setTabValue] = useState(0);\n  const [filter, setFilter] = useState<any>({});\n  const [syncStatus, setSyncStatus] = useState<any>(null);\n  const [page, setPage] = useState(1);\n  const [createProfile, setCreateProfile] = useState(false);\n  const isSolana = isSolAddress(address);\n  const history = useHistory();\n\n  const [summary, setSummary] = useState(initialData);\n  const [ownedEthNfts, setOwnedEthNfts] = useState<any>([]);\n  const [ownedEthCollections, setOwnedEthCollections] = useState<any>([]);\n  const [ownedSolNfts, setOwnedSolNfts] = useState<any>([]);\n  const [ownedSolCollections, setOwnedSolCollections] = useState<any>([]);\n  const [ownedBscNfts, setOwnedBscNfts] = useState<any>([]);\n  const [eth_loading, setEth_Loading] = useState<boolean>(true);\n  const [sol_loading, setSol_Loading] = useState<boolean>(true);\n  const [bsc_loading, setBsc_Loading] = useState<boolean>(true);\n  const [cookies, setCookie, removeCookie] = useCookies(['profiles']);\n  const [profileName, setProfileName] = useState('');\n\n  const collectionFloorPrice: any = {};\n\n  const handleClickOpen = () => {\n    setCreateProfile(true);\n  };\n\n  const handleSubmit = () => {\n    setCreateProfile(false);\n    const profiles = cookies.profiles ? cookies.profiles : {};\n    profiles[profileName] = {\n      address: [],\n      hash: btoa(JSON.stringify({ name: profileName, address: [] })),\n    };\n    setCookie('profiles', profiles, { path: '/' });\n    history.push('/profiles');\n  };\n\n  useEffect(() => {\n    const fetchBscData = async () => {\n      let bscNfts: any = [];\n      if (isSolAddress(address)) {\n        setBsc_Loading(false);\n        return;\n      }\n      let offset = 1;\n      while (1) {\n        const res = await getNFTs(address, (offset - 1) * 12);\n        bscNfts = [...bscNfts, ...res.data];\n        if (res.data.length === 0) {\n          break;\n        }\n        offset += 1;\n      }\n      const sort = bscNfts.sort((a: any, b: any): number => (a.name < b.name ? -1 : 1));\n      setOwnedBscNfts([...sort]);\n      sort.forEach((i) => {\n        if (i.chain === 'bsc') {\n          initialData[1].count += 1;\n        } else initialData[2].count += 1;\n      });\n      setSummary(initialData);\n      setBsc_Loading(false);\n    };\n    const fetchSolanaData = async () => {\n      let solNfts: any = [];\n\n      if (!isSolAddress(address)) {\n        setSol_Loading(false);\n        return;\n      }\n      const res = await getSolNfts(address);\n      if (res) {\n        solNfts = [...solNfts, ...res.data];\n      }\n\n      const sort = solNfts.sort((a: any, b: any): number => (a.name < b.name ? -1 : 1));\n      setOwnedSolNfts([...sort]);\n      initialData[3].count = sort.length;\n      setSummary(initialData);\n      setSol_Loading(false);\n    };\n    const fetchEthData = async () => {\n      initialData[0].loading = true;\n      setSummary(initialData);\n      const resNfts: any = [];\n      if (isSolAddress(address)) {\n        setEth_Loading(false);\n        return;\n      }\n      let offset = 0;\n      while (1) {\n        try {\n          const res: any = await OpenSeaAPI.get('/assets', {\n            params: {\n              limit: 50,\n              owner: address,\n              offset,\n            },\n          });\n          for (let j = 0; j < res.data.assets.length; j += 1) {\n            let asset = {};\n            const { slug, name } = res.data.assets[j].collection;\n            if (collectionFloorPrice[name]) {\n              asset = {\n                ...res.data.assets[j],\n                floor_price: collectionFloorPrice[name],\n              };\n            } else {\n              while (1) {\n                try {\n                  const price_object: any = await OpenSeaAPI.get(`/collection/${slug}/stats`);\n                  collectionFloorPrice[name] = price_object.data.stats.floor_price;\n                  asset = {\n                    ...res.data.assets[j],\n                    floor_price: collectionFloorPrice[name],\n                  };\n                  break;\n                } catch (error: any) {\n                  break;\n                }\n              }\n            }\n            setOwnedEthCollections(\n              Object.keys(collectionFloorPrice).map((s) => ({ value: s, name: s })),\n            );\n            resNfts.push(asset);\n            setOwnedEthNfts([...resNfts]);\n            initialData[0].count = resNfts.length;\n            initialData[0].price = resNfts\n              .map((r: any) => r.floor_price)\n              .reduce((a: any, b: any) => a + b, 0);\n            setSummary(initialData);\n          }\n          offset += 50;\n          if (res.data.assets.length < 50) {\n            break;\n          }\n        } catch (error: any) {\n          break;\n        }\n      }\n      initialData[0].loading = false;\n      initialData[0].count = resNfts.length;\n      initialData[0].price = resNfts\n        .map((res: any) => res.floor_price)\n        .reduce((a: any, b: any) => a + b, 0);\n      setSummary(initialData);\n      setOwnedEthNfts(resNfts);\n      setOwnedEthCollections(Object.keys(collectionFloorPrice).map((s) => ({ value: s, name: s })));\n      setEth_Loading(false);\n    };\n    fetchEthData();\n    fetchSolanaData();\n    fetchBscData();\n  }, [address]);\n\n  return (\n    <>\n      <Meta\n        title={`${address} - Profile | DOKO`}\n        description=\"The Multi-Chain NFT Portfolio Manager that allows you to display, manage & trade your NFTs\"\n        url=\"https://doko.one\"\n        image=\"/DOKO_LOGO.png\"\n      />\n      <Grid container wrap=\"nowrap\" className={styles.collectionPageContainer}>\n        <Hidden smDown>\n          <Grid item>\n            <Card className={styles.introCard}>\n              <Intro drawer={false} />\n            </Card>\n          </Grid>\n        </Hidden>\n        <Grid\n          className={styles.itemsContainer}\n          container\n          direction=\"column\"\n          alignItems=\"flex-start\"\n        >\n          <Hidden smUp>\n            <Grid\n              container\n              direction=\"row\"\n              alignItems=\"center\"\n              justifyContent=\"flex-end\"\n              wrap=\"nowrap\"\n            >\n              <IconButton onClick={handleClickOpen}>\n                <img src=\"/createProfileIcon.png\" alt=\"share\" />\n              </IconButton>\n            </Grid>\n          </Hidden>\n          <Grid\n            container\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            className={styles.addressContainer}\n          >\n            <Grid item xs={12} md=\"auto\">\n              <Grid container direction=\"column\" className={styles.addressContainer}>\n                <Typography\n                  className={styles.addressText}\n                  variant=\"h5\"\n                  style={{ fontWeight: 'bolder' }}\n                >\n                  {minimizeAddress(address)}\n                </Typography>\n                <Grid item>\n                  <CopyAddress address={address} />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item style={{ width: '100%' }}>\n            <Hidden xsDown>\n              <Button className={styles.createProfileButton} onClick={handleClickOpen}>\n                <img src=\"/createProfileButton.png\" alt=\"Create Profile\" />\n              </Button>\n            </Hidden>\n            <CustomTabs\n              style={{ marginTop: 12 }}\n              indicatorColor=\"primary\"\n              textColor=\"primary\"\n              value={tabValue}\n              onChange={(event, newValue) => setTabValue(newValue)}\n            >\n              <CustomTab style={{ fontWeight: 'bolder' }} label=\"NFT Collection\" value={0} />\n            </CustomTabs>\n          </Grid>\n          <TabPanel index={0} value={tabValue}>\n            <Summary data={{ summary }} />\n\n            <EthNfts\n              data={{ nfts: ownedEthNfts, collections: ownedEthCollections, loading: eth_loading }}\n            />\n\n            <SolNfts\n              data={{ nfts: ownedSolNfts, collections: ownedSolCollections, loading: sol_loading }}\n            />\n            <SectionLabel variant=\"h5\" style={{ marginTop: 48, marginBottom: 24 }}>\n              BSC & Polygon NFTs (Beta)\n            </SectionLabel>\n            <NftPagination\n              loading={bsc_loading}\n              nfts={ownedBscNfts.slice((page - 1) * 12, page * 12)}\n              page={page}\n              maxPage={Math.floor(ownedBscNfts.length / 12) + 1}\n              onNext={() => setPage(page + 1)}\n              onPrev={() => setPage(page - 1)}\n            />\n          </TabPanel>\n        </Grid>\n      </Grid>\n      <Modal open={createProfile}>\n        <div className={styles.createProfileDialog}>\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            style={{ height: '24%' }}\n          >\n            <Typography variant=\"h4\" style={{ marginLeft: 30, fontSize: 25, fontWeight: 'bold' }}>\n              Create Profile\n            </Typography>\n            <IconButton\n              style={{ marginRight: 30 }}\n              onClick={() => {\n                setCreateProfile(false);\n              }}\n            >\n              <CloseIcon style={{ fill: '#FFFFFF' }} />\n            </IconButton>\n          </Grid>\n          <hr style={{ width: '100%', margin: 0 }} />\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            style={{ height: '52%' }}\n          >\n            <OutlinedInput\n              value={profileName}\n              onChange={(e) => {\n                setProfileName(e.target.value);\n              }}\n              style={{ minWidth: '90%', height: 50, fontWeight: 'bold', fontSize: '16px' }}\n            />\n          </Grid>\n          <hr style={{ width: '100%', margin: 0 }} />\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"flex-end\"\n            alignItems=\"center\"\n            style={{ height: '24%' }}\n          >\n            <Button\n              style={{ width: 170, marginRight: 34 }}\n              className=\"gradient-button\"\n              variant=\"outlined\"\n              onClick={handleSubmit}\n            >\n              Create Profile\n            </Button>\n          </Grid>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default NftCollections;\n","/Users/anthonysiu/doko/DOKO/client/src/modules/nft-individual/index.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/profiles/index.tsx",["463","464","465","466"],"import { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n  Card,\n  Grid,\n  Hidden,\n  IconButton,\n  makeStyles,\n  Typography,\n  Button,\n  Modal,\n  OutlinedInput,\n} from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport BackIcon from '@material-ui/icons/ArrowBack';\nimport { useCookies } from 'react-cookie';\nimport { AddToHomeScreenTwoTone } from '@material-ui/icons';\nimport { Meta } from '../../components';\nimport Intro from '../core/Intro';\nimport { ProfileItem } from './ProfileItem';\nimport eth from './assets/eth.png';\nimport bsc from './assets/bsc.png';\nimport polygon from './assets/polygon.png';\nimport solana from './assets/solana.png';\n\ntype Icons = {\n  [key: string]: string;\n};\n\nconst icon: Icons = {\n  eth,\n  bsc,\n  polygon,\n  solana,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  collectionPageContainer: {\n    padding: '24px',\n    marginTop: 36,\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column',\n      marginTop: 0,\n    },\n    minHeight: 'calc(100vh)',\n  },\n  introCard: {\n    position: 'sticky',\n    top: 120,\n  },\n  itemsContainer: {\n    paddingLeft: 36,\n    [theme.breakpoints.down('sm')]: {\n      paddingLeft: 0,\n      marginTop: 0,\n    },\n  },\n  titleContainer: {\n    marginBottom: 12,\n    [theme.breakpoints.down('xs')]: {\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n  },\n  titleText: {\n    fontWeight: 'bolder',\n    [theme.breakpoints.down('sm')]: {\n      fontSize: 26,\n    },\n  },\n  descriptionText: {\n    fontSize: 16,\n    [theme.breakpoints.down('sm')]: {\n      fontSize: 9,\n    },\n  },\n  connectedAddress: {\n    fontSize: 32,\n    [theme.breakpoints.down('sm')]: {\n      fontSize: 14,\n    },\n  },\n  createProfileButton: {\n    cursor: 'pointer',\n    right: '4%',\n    width: 162,\n    height: 46,\n    zIndex: 999,\n    position: 'absolute',\n  },\n  createProfileDialog: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    maxHeight: '90vh',\n    maxWidth: '90vw',\n    width: 578,\n    height: 320,\n    border: '1px solid #FFFFFF',\n    background: '#000000',\n    boxShadow: '0px 10px 20px rgba(0, 0, 0, 0.75)',\n    borderRadius: '23px',\n  },\n  addAddressDialog: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    maxHeight: '90%',\n    maxWidth: '90%',\n    minHeight: 600,\n    overflowY: 'hidden',\n    width: 645,\n    height: 627,\n    border: '1px solid #FFFFFF',\n    background: '#000000',\n    boxShadow: '0px 10px 20px rgba(0, 0, 0, 0.75)',\n    borderRadius: '23px',\n    display: 'block',\n  },\n  typeButton: {\n    cursor: 'pointer',\n    margin: 10,\n    border: '1px solid #FFFFFF',\n    borderRadius: '10px',\n    height: 126,\n    width: 126,\n    textAlign: 'center',\n    [theme.breakpoints.down('sm')]: {\n      height: 68,\n      width: 68,\n    },\n  },\n  typeButtonOutlined: {\n    cursor: 'pointer',\n    margin: 10,\n    border: '1px solid #FF06D7',\n    borderRadius: '10px',\n    height: 126,\n    width: 126,\n    textAlign: 'center',\n    [theme.breakpoints.down('sm')]: {\n      height: 68,\n      width: 68,\n    },\n  },\n  typeImg: {\n    width: 26,\n    height: 26,\n    [theme.breakpoints.down('sm')]: {\n      width: 14,\n      height: 14,\n    },\n  },\n  typeText: {\n    marginTop: 3,\n    fontWeight: 'bold',\n    fontSize: 12,\n    [theme.breakpoints.down('sm')]: {\n      fontSize: 8,\n    },\n  },\n  backButton: {\n    cursor: 'pointer',\n    border: '2px solid rgba(255, 255, 255, 0.25)',\n    borderRadius: '23px',\n    marginBottom: 24,\n    height: 42,\n    width: 110,\n  },\n  buttons: {\n    height: 50,\n    border: '2px solid rgba(255, 255, 255, 0.5)',\n    boxSizing: 'border-box',\n    borderRadius: '100px',\n    width: '100%',\n    alignItems: 'center',\n  },\n}));\n\nexport const Profiles = () => {\n  const styles = useStyles();\n  const [createProfile, setCreateProfile] = useState(false);\n  const [profileName, setProfileName] = useState('');\n  const [addAddress, setAddAddress] = useState(false);\n  const [editProfile, setEditProfile] = useState<string>('');\n  const [addressType, setAddressType] = useState('eth');\n  const [newAddress, setNewAddress] = useState('');\n  const [cookies, setCookie, removeCookie] = useCookies(['profiles']);\n\n  const handleClickOpen = () => {\n    setCreateProfile(true);\n  };\n\n  const handleSubmit = () => {\n    setCreateProfile(false);\n    const profiles = cookies.profiles ? cookies.profiles : {};\n    profiles[profileName] = {\n      address: [],\n      hash: btoa(JSON.stringify({ name: profileName, address: [] })),\n    };\n    setCookie('profiles', profiles, { path: '/' });\n  };\n\n  const handleDeleteProfile = (name: string) => {\n    const profiles = cookies.profiles ? cookies.profiles : {};\n    delete profiles[name];\n    setCookie('profiles', profiles, { path: '/' });\n  };\n\n  const handleDeleteAddress = (address: string) => {\n    const profiles = cookies.profiles ? cookies.profiles : {};\n    profiles[editProfile].address = profiles[editProfile].address.filter(\n      (adrs: any) => adrs[1] !== address,\n    );\n    profiles[editProfile].hash = btoa(\n      JSON.stringify({ name: editProfile, address: profiles[editProfile].address }),\n    );\n    setCookie('profiles', profiles, { path: '/' });\n  };\n\n  const handleClickBack = () => {\n    setEditProfile('');\n  };\n\n  const onClickSave = () => {\n    setAddAddress(false);\n    setNewAddress('');\n    const profiles = cookies.profiles ? cookies.profiles : {};\n    if (profiles[editProfile].address.length < 6) {\n      profiles[editProfile].address.push([addressType, newAddress]);\n      profiles[editProfile].hash = btoa(\n        JSON.stringify({ name: editProfile, address: profiles[editProfile].address }),\n      );\n      setCookie('profiles', profiles, { path: '/' });\n    }\n  };\n\n  const renderProfileList = () => (\n    <div>\n      <Grid className={styles.itemsContainer} container direction=\"column\" alignItems=\"flex-start\">\n        <Hidden smUp>\n          <Grid\n            container\n            direction=\"row\"\n            alignItems=\"center\"\n            justifyContent=\"flex-end\"\n            wrap=\"nowrap\"\n          >\n            <IconButton onClick={handleClickOpen}>\n              <img src=\"/createProfileIcon.png\" alt=\"share\" />\n            </IconButton>\n          </Grid>\n        </Hidden>\n        <Grid\n          container\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          className={styles.titleContainer}\n        >\n          <Grid item xs={12} md=\"auto\">\n            <Grid container direction=\"column\">\n              <Typography\n                className={styles.titleText}\n                variant=\"h3\"\n                style={{ fontWeight: 'bolder' }}\n              >\n                Manage Profile(s)\n              </Typography>\n            </Grid>\n          </Grid>\n          <Hidden xsDown>\n            <Button className={styles.createProfileButton} onClick={handleClickOpen}>\n              <img src=\"/createProfileButton.png\" alt=\"Create Profile\" />\n            </Button>\n          </Hidden>\n        </Grid>\n        <Grid container alignItems=\"center\" style={{ paddingBottom: 40 }}>\n          <Typography className={styles.descriptionText}>\n            This is where you can view, edit or delete each of your created and saved profiles.\n          </Typography>\n        </Grid>\n        <Grid container spacing={3}>\n          {cookies.profiles &&\n            Object.keys(cookies.profiles).map((name: string) => (\n              <ProfileItem\n                profile={name}\n                onClickEdit={() => setEditProfile(name)}\n                onClickDelete={() => handleDeleteProfile(name)}\n              />\n            ))}\n        </Grid>\n      </Grid>\n      <Modal open={createProfile}>\n        <div className={styles.createProfileDialog}>\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            style={{ height: '24%' }}\n          >\n            <Typography variant=\"h4\" style={{ marginLeft: 30, fontSize: 25, fontWeight: 'bold' }}>\n              Create Profile\n            </Typography>\n            <IconButton\n              style={{ marginRight: 30 }}\n              onClick={() => {\n                setCreateProfile(false);\n              }}\n            >\n              <CloseIcon style={{ fill: '#FFFFFF' }} />\n            </IconButton>\n          </Grid>\n          <hr style={{ width: '100%', margin: 0 }} />\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            style={{ height: '52%' }}\n          >\n            <OutlinedInput\n              value={profileName}\n              onChange={(e) => {\n                setProfileName(e.target.value);\n              }}\n              style={{ minWidth: '90%', height: 50, fontWeight: 'bold', fontSize: '16px' }}\n            />\n          </Grid>\n          <hr style={{ width: '100%', margin: 0 }} />\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"flex-end\"\n            alignItems=\"center\"\n            style={{ height: '24%' }}\n          >\n            <Button\n              style={{ width: 170, marginRight: 34 }}\n              className=\"gradient-button\"\n              variant=\"outlined\"\n              onClick={handleSubmit}\n            >\n              Create Profile\n            </Button>\n          </Grid>\n        </div>\n      </Modal>\n    </div>\n  );\n\n  const renderEditPage = () => (\n    <div>\n      <Grid className={styles.itemsContainer} container direction=\"column\" alignItems=\"flex-start\">\n        <Grid item>\n          <div onClick={handleClickBack} aria-hidden=\"true\">\n            <Grid\n              container\n              direction=\"row\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n              className={styles.backButton}\n              spacing={1}\n            >\n              <Grid item>\n                <BackIcon style={{ width: 13, paddingTop: 7, fill: '#FFFFFF' }} />\n              </Grid>\n              <Grid item>\n                <Typography style={{ fontSize: 14, fontWeight: 'bold' }}>Back</Typography>\n              </Grid>\n            </Grid>\n          </div>\n        </Grid>\n        <Grid\n          container\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          className={styles.titleContainer}\n        >\n          <Grid item xs={12} md=\"auto\">\n            <Grid container direction=\"column\">\n              <Typography\n                className={styles.titleText}\n                variant=\"h3\"\n                style={{ fontWeight: 'bolder' }}\n              >\n                {editProfile}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid container alignItems=\"center\" style={{ paddingBottom: 40 }}>\n          <Typography className={styles.descriptionText}>\n            This is where you can view, edit or delete each of your profiles. You can only have a\n            maximum of 6 addresses per profile.\n          </Typography>\n        </Grid>\n        <Grid container alignItems=\"center\" style={{ paddingBottom: 20 }}>\n          <Typography className={styles.connectedAddress}>\n            {`Address Connected (${cookies.profiles?.[editProfile].address.length})`}\n          </Typography>\n        </Grid>\n        {cookies.profiles?.[editProfile].address.length < 6 && (\n          <Grid container>\n            <Button className={styles.buttons} onClick={() => setAddAddress(true)}>\n              <img src=\"/addAddress.png\" alt=\"add address\" />\n            </Button>\n          </Grid>\n        )}\n        {cookies.profiles?.[editProfile].address.map((adrs: any) => (\n          <Grid\n            container\n            direction=\"row\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            wrap=\"nowrap\"\n            className={styles.buttons}\n            style={{ marginTop: 10 }}\n          >\n            <img\n              width={20}\n              src={icon[adrs[0]]}\n              alt={adrs[0]}\n              style={{ borderRadius: '50%', margin: '3%' }}\n            />\n            <Typography noWrap style={{ fontSize: '18px', fontFamily: 'Open Sans' }}>\n              {adrs[1]}\n            </Typography>\n            <Button\n              style={{ width: 100, height: '50%', margin: '3%' }}\n              className=\"gradient-button\"\n              variant=\"outlined\"\n              onClick={() => handleDeleteAddress(adrs[1])}\n            >\n              Delete\n            </Button>\n          </Grid>\n        ))}\n      </Grid>\n      <Modal open={addAddress}>\n        <div className={styles.addAddressDialog}>\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            style={{ height: '12%' }}\n          >\n            <Typography variant=\"h4\" style={{ marginLeft: 30, fontSize: 25, fontWeight: 'bold' }}>\n              Add an Address\n            </Typography>\n            <IconButton style={{ marginRight: 30 }} onClick={() => setAddAddress(false)}>\n              <CloseIcon style={{ fill: '#FFFFFF' }} />\n            </IconButton>\n          </Grid>\n          <hr style={{ width: '100%', margin: 0 }} />\n          <Grid\n            container\n            direction=\"column\"\n            justifyContent=\"flex-start\"\n            alignItems=\"flex-start\"\n            style={{ padding: 30, height: '74%' }}\n          >\n            <Typography style={{ fontSize: 21 }}>Select Blockchain</Typography>\n            <Typography style={{ fontSize: 14 }}>\n              Select the type of address that you want to add to the profile.\n            </Typography>\n            <Grid container direction=\"row\">\n              <div\n                onClick={() => setAddressType('eth')}\n                aria-hidden=\"true\"\n                className={addressType === 'eth' ? styles.typeButtonOutlined : styles.typeButton}\n              >\n                <div style={{ marginTop: '30%' }}>\n                  <img className={styles.typeImg} src={eth} alt=\"EVM\" />\n                  <Typography className={styles.typeText}>EVM</Typography>\n                </div>\n              </div>\n              <div\n                onClick={() => setAddressType('solana')}\n                aria-hidden=\"true\"\n                className={addressType === 'solana' ? styles.typeButtonOutlined : styles.typeButton}\n              >\n                <div style={{ marginTop: '30%' }}>\n                  <img className={styles.typeImg} src={solana} alt=\"SOL\" />\n                  <Typography className={styles.typeText}>Solana</Typography>\n                </div>\n              </div>\n            </Grid>\n            <Typography style={{ fontSize: 21, marginTop: 15 }}>Enter your address</Typography>\n            <Typography style={{ fontSize: 14 }}>\n              Enter the address that you want to add to the profile\n            </Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\n              <OutlinedInput\n                value={newAddress}\n                onChange={(e) => {\n                  setNewAddress(e.target.value);\n                }}\n                style={{\n                  marginTop: 30,\n                  width: '90%',\n                  height: 50,\n                  fontWeight: 'bold',\n                  fontSize: '16px',\n                }}\n              />\n            </Grid>\n          </Grid>\n          <hr style={{ width: '100%', margin: 0 }} />\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"flex-end\"\n            alignItems=\"center\"\n            style={{ height: '12%' }}\n          >\n            <Button\n              style={{ width: 170, marginRight: 34 }}\n              className=\"gradient-button\"\n              variant=\"outlined\"\n              onClick={onClickSave}\n            >\n              Save\n            </Button>\n          </Grid>\n        </div>\n      </Modal>\n    </div>\n  );\n\n  return (\n    <>\n      <Meta\n        title=\"Manage Profile(s)\"\n        description=\"The Multi-Chain NFT Portfolio Manager that allows you to display, manage & trade your NFTs\"\n        url=\"https://doko.one\"\n        image=\"/DOKO_LOGO.png\"\n      />\n      <Grid container wrap=\"nowrap\" className={styles.collectionPageContainer}>\n        <Hidden smDown>\n          <Grid item>\n            <Card className={styles.introCard}>\n              <Intro drawer={false} />\n            </Card>\n          </Grid>\n        </Hidden>\n        {!editProfile ? renderProfileList() : renderEditPage()}\n      </Grid>\n    </>\n  );\n};\n\nexport default Profiles;\n","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-collection/index.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/profile-page/index.tsx",["467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482"],"import { useEffect, useState, SyntheticEvent, MouseEvent } from 'react';\nimport {\n  Card,\n  Grid,\n  Hidden,\n  IconButton,\n  makeStyles,\n  Tab,\n  Tabs,\n  Tooltip,\n  Typography,\n  withStyles,\n  Button,\n  Modal,\n  OutlinedInput,\n  Checkbox,\n  Menu,\n  MenuItem,\n} from '@material-ui/core';\nimport { useParams, useHistory } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport RefreshOutlinedIcon from '@material-ui/icons/RefreshOutlined';\n\nimport { useCookies } from 'react-cookie';\nimport { OpenInBrowserRounded } from '@material-ui/icons';\nimport { SSL_OP_TLS_D5_BUG } from 'constants';\nimport { TabPanel, NftPagination, Meta, RadiusInput } from '../../components';\nimport { getAddressStatus, getNFTs, indexAddress } from '../api';\nimport { Filter } from './Filter';\nimport Intro from '../core/Intro';\nimport { isSolAddress, minimizeAddress } from '../../libs/utils';\nimport { AddressStatus } from './AddressStatus';\nimport CopyAddress from '../../components/CopyAddress';\nimport EthNfts from './EthNfts';\nimport SolNfts from './SolNfts';\nimport SectionLabel from '../../components/SectionLabel';\nimport { Summary } from './Summary';\nimport { PopoverShare } from '../../components/PopoverShare';\n\nimport OpenSeaAPI from '../../libs/opensea-api';\nimport { getSolNfts } from '../../libs/solana';\n\nimport eth from './assets/eth.png';\nimport bsc from './assets/bsc.png';\nimport polygon from './assets/polygon.png';\nimport solana from './assets/solana.png';\n\ntype Icons = {\n  [key: string]: string;\n};\n\nconst icon: Icons = {\n  eth,\n  bsc,\n  polygon,\n  solana,\n};\n\nconst CustomTabs = withStyles({\n  root: {\n    width: '100%',\n  },\n  flexContainer: {\n    borderBottom: '2px solid #46324a',\n  },\n})(Tabs);\n\nconst CustomTab = withStyles({\n  wrapper: {\n    textTransform: 'none',\n  },\n})(Tab);\n\nconst useStyles = makeStyles((theme) => ({\n  collectionPageContainer: {\n    padding: 24,\n    marginTop: 36,\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column',\n      marginTop: 0,\n    },\n    minHeight: 'calc(100vh)',\n  },\n  introCard: {\n    position: 'sticky',\n    top: 120,\n  },\n  itemsContainer: {\n    paddingLeft: 36,\n    [theme.breakpoints.down('sm')]: {\n      paddingLeft: 0,\n    },\n  },\n  titleText: {\n    fontWeight: 'bolder',\n    width: '80%',\n    fontSize: 55,\n    [theme.breakpoints.down('sm')]: {\n      fontSize: 26,\n    },\n  },\n  nftsContainer: {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(4, 1fr)',\n    gridAutoRows: '1fr',\n    columnGap: 12,\n    rowGap: 12,\n    [theme.breakpoints.down('md')]: {\n      gridTemplateColumns: 'repeat(3, 1fr)',\n    },\n    [theme.breakpoints.down('sm')]: {\n      gridTemplateColumns: 'repeat(2, 1fr)',\n    },\n    [theme.breakpoints.down('xs')]: {\n      gridTemplateColumns: 'repeat(1, 1fr)',\n    },\n  },\n  addressContainer: {\n    marginBottom: 12,\n    [theme.breakpoints.down('xs')]: {\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n  },\n  addressText: {\n    fontWeight: 'bolder',\n    [theme.breakpoints.down('xs')]: {\n      fontSize: 30,\n    },\n  },\n  createProfileButton: {\n    cursor: 'pointer',\n    right: '4%',\n    width: 162,\n    height: 46,\n    zIndex: 999,\n    position: 'absolute',\n  },\n  createProfileDialog: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    maxHeight: '90vh',\n    maxWidth: '90vw',\n    width: 578,\n    height: 320,\n    border: '1px solid #FFFFFF',\n    background: '#000000',\n    boxShadow: '0px 10px 20px rgba(0, 0, 0, 0.75)',\n    borderRadius: '23px',\n  },\n  xsAddress: {},\n}));\n\nconst initialData = [\n  {\n    icon: eth,\n    count: 0,\n    price: 0,\n    name: 'Ethereum',\n    loading: true,\n    available: true,\n  },\n  {\n    icon: bsc,\n    count: 0,\n    price: 0,\n    name: 'BSC',\n  },\n  {\n    icon: polygon,\n    count: 0,\n    price: 0,\n    name: 'Polygon',\n  },\n  {\n    icon: solana,\n    count: 0,\n    price: 0,\n    name: 'Solana',\n  },\n];\n\nexport const NftCollections = () => {\n  const [summary, setSummary] = useState(initialData);\n  const { hash } = useParams<{ hash: string }>();\n  const profile: any = JSON.parse(atob(hash));\n  const styles = useStyles();\n  const [tabValue, setTabValue] = useState(0);\n  const [filter, setFilter] = useState<any>({});\n  const [page, setPage] = useState(1);\n  const [createProfile, setCreateProfile] = useState(false);\n  const [ownedEthNfts, setOwnedEthNfts] = useState<any>([]);\n  const [ownedEthCollections, setOwnedEthCollections] = useState<any>([]);\n  const [ownedSolNfts, setOwnedSolNfts] = useState<any>([]);\n  const [ownedSolCollections, setOwnedSolCollections] = useState<any>([]);\n  const [ownedBscNfts, setOwnedBscNfts] = useState<any>([]);\n  const [eth_loading, setEth_Loading] = useState<boolean>(true);\n  const [sol_loading, setSol_Loading] = useState<boolean>(true);\n  const [bsc_loading, setBsc_Loading] = useState<boolean>(true);\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);\n  const history = useHistory();\n  const [cookies, setCookie, removeCookie] = useCookies(['profiles']);\n  const [profileName, setProfileName] = useState('');\n\n  const collectionFloorPrice: any = {};\n\n  const handleClickOpen = () => {\n    setCreateProfile(true);\n  };\n\n  const handleClose = () => {\n    setCreateProfile(false);\n  };\n\n  const handleSubmit = () => {\n    setCreateProfile(false);\n    const profiles = cookies.profiles ? cookies.profiles : {};\n    profiles[profileName] = {\n      address: [],\n      hash: btoa(JSON.stringify({ name: profileName, address: [] })),\n    };\n    setCookie('profiles', profiles, { path: '/' });\n    history.push('/profiles');\n  };\n\n  const renderAddressList = () => (\n    <Hidden xsDown>\n      <Grid container direction=\"row\" justifyContent=\"flex-start\">\n        <Grid direction=\"column\">\n          {profile.address[0] && (\n            <Grid\n              container\n              direction=\"row\"\n              alignItems=\"center\"\n              justifyContent=\"flex-start\"\n              wrap=\"nowrap\"\n            >\n              <img\n                width={20}\n                src={icon[profile.address[0][0]]}\n                alt={profile.address[0][0]}\n                style={{ borderRadius: '50%', marginRight: 10 }}\n              />\n              <Typography variant=\"h3\" style={{ fontSize: 22, width: 143 }}>\n                {`${profile.address[0][1].substr(0, 6)}...${profile.address[0][1].substr(-4)}`}\n              </Typography>\n              <Checkbox\n                checked\n                disabled\n                style={{\n                  color: '#FF06D7',\n                }}\n              />\n            </Grid>\n          )}\n          {profile.address[1] && (\n            <Grid\n              container\n              direction=\"row\"\n              alignItems=\"center\"\n              justifyContent=\"flex-start\"\n              wrap=\"nowrap\"\n            >\n              <img\n                width={20}\n                src={icon[profile.address[1][0]]}\n                alt={profile.address[1][0]}\n                style={{ borderRadius: '50%', marginRight: 10 }}\n              />\n              <Typography variant=\"h3\" style={{ fontSize: 22, width: 143 }}>\n                {`${profile.address[1][1].substr(0, 6)}...${profile.address[1][1].substr(-4)}`}\n              </Typography>\n              <Checkbox\n                checked\n                disabled\n                style={{\n                  color: '#FF06D7',\n                }}\n              />\n            </Grid>\n          )}\n        </Grid>\n        <Grid direction=\"column\">\n          {profile.address[2] && (\n            <Grid\n              container\n              direction=\"row\"\n              alignItems=\"center\"\n              justifyContent=\"flex-start\"\n              wrap=\"nowrap\"\n            >\n              <img\n                width={20}\n                src={icon[profile.address[2][0]]}\n                alt={profile.address[2][0]}\n                style={{ borderRadius: '50%', marginRight: 10 }}\n              />\n              <Typography variant=\"h3\" style={{ fontSize: 22, width: 143 }}>\n                {`${profile.address[2][1].substr(0, 6)}...${profile.address[2][1].substr(-4)}`}\n              </Typography>\n              <Checkbox\n                checked\n                disabled\n                style={{\n                  color: '#FF06D7',\n                }}\n              />\n            </Grid>\n          )}\n          {profile.address[3] && (\n            <Grid\n              container\n              direction=\"row\"\n              alignItems=\"center\"\n              justifyContent=\"flex-start\"\n              wrap=\"nowrap\"\n            >\n              <img\n                width={20}\n                src={icon[profile.address[3][0]]}\n                alt={profile.address[3][0]}\n                style={{ borderRadius: '50%', marginRight: 10 }}\n              />\n              <Typography variant=\"h3\" style={{ fontSize: 22, width: 143 }}>\n                {`${profile.address[3][1].substr(0, 6)}...${profile.address[3][1].substr(-4)}`}\n              </Typography>\n              <Checkbox\n                checked\n                disabled\n                style={{\n                  color: '#FF06D7',\n                }}\n              />\n            </Grid>\n          )}\n        </Grid>\n        <Grid direction=\"column\">\n          {profile.address[4] && (\n            <Grid\n              container\n              direction=\"row\"\n              alignItems=\"center\"\n              justifyContent=\"flex-start\"\n              wrap=\"nowrap\"\n            >\n              <img\n                width={20}\n                src={icon[profile.address[4][0]]}\n                alt={profile.address[4][0]}\n                style={{ borderRadius: '50%', marginRight: 10 }}\n              />\n              <Typography variant=\"h3\" style={{ fontSize: 22, width: 143 }}>\n                {`${profile.address[4][1].substr(0, 6)}...${profile.address[4][1].substr(-4)}`}\n              </Typography>\n              <Checkbox\n                checked\n                disabled\n                style={{\n                  color: '#FF06D7',\n                }}\n              />\n            </Grid>\n          )}\n          {profile.address[5] && (\n            <Grid\n              container\n              direction=\"row\"\n              alignItems=\"center\"\n              justifyContent=\"flex-start\"\n              wrap=\"nowrap\"\n            >\n              <img\n                width={20}\n                src={icon[profile.address[5][0]]}\n                alt={profile.address[5][0]}\n                style={{ borderRadius: '50%', marginRight: 10 }}\n              />\n              <Typography variant=\"h3\" style={{ fontSize: 22, width: 143 }}>\n                {`${profile.address[5][1].substr(0, 6)}...${profile.address[5][1].substr(-4)}`}\n              </Typography>\n              <Checkbox\n                checked\n                disabled\n                style={{\n                  color: '#FF06D7',\n                }}\n              />\n            </Grid>\n          )}\n        </Grid>\n      </Grid>\n    </Hidden>\n  );\n\n  const handleOpenAddress = (event: MouseEvent<HTMLElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleCloseAddress = (e: SyntheticEvent) => {\n    e.stopPropagation();\n    setAnchorEl(null);\n  };\n\n  useEffect(() => {\n    const fetchBscData = async () => {\n      let bscNfts: any = [];\n      for (let i = 0; i < profile.address.length; i += 1) {\n        if (isSolAddress(profile.address[i][1])) continue;\n        let offset = 1;\n        while (1) {\n          const res = await getNFTs(profile.address[i][1], (offset - 1) * 12);\n          bscNfts = [...bscNfts, ...res.data];\n          if (res.data.length === 0) {\n            break;\n          }\n          offset += 1;\n        }\n      }\n      const sort = bscNfts.sort((a: any, b: any): number => (a.name < b.name ? -1 : 1));\n      setOwnedBscNfts([...sort]);\n      sort.forEach((i) => {\n        if (i.chain === 'bsc') {\n          initialData[1].count += 1;\n        } else initialData[2].count += 1;\n      });\n      setSummary(initialData);\n      setBsc_Loading(false);\n    };\n    const fetchSolanaData = async () => {\n      let solNfts: any = [];\n      for (let i = 0; i < profile.address.length; i += 1) {\n        if (!isSolAddress(profile.address[i][1])) continue;\n        const res = await getSolNfts(profile.address[i][1]);\n        if (res) {\n          solNfts = [...solNfts, ...res.data];\n        }\n      }\n      const sort = solNfts.sort((a: any, b: any): number => (a.name < b.name ? -1 : 1));\n      setOwnedSolNfts([...sort]);\n      initialData[3].count = sort.length;\n      setSummary(initialData);\n      setSol_Loading(false);\n    };\n    const fetchEthData = async () => {\n      const resNfts: any = [];\n      initialData[0].loading = true;\n      setSummary(initialData);\n      for (let i = 0; i < profile.address.length; i += 1) {\n        if (isSolAddress(profile.address[i][1])) continue;\n        let offset = 0;\n        while (1) {\n          try {\n            const res: any = await OpenSeaAPI.get('/assets', {\n              params: {\n                limit: 50,\n                owner: profile.address[i][1],\n                offset,\n              },\n            });\n            if (!res.data.assets) {\n              break;\n            }\n            for (let j = 0; j < res.data.assets.length; j += 1) {\n              let asset = {};\n              const { slug, name } = res.data.assets[j].collection;\n              if (collectionFloorPrice[name]) {\n                asset = {\n                  ...res.data.assets[j],\n                  floor_price: collectionFloorPrice[name],\n                };\n              } else {\n                while (1) {\n                  try {\n                    const price_object: any = await OpenSeaAPI.get(`/collection/${slug}/stats`);\n                    collectionFloorPrice[name] = price_object.data.stats.floor_price;\n                    asset = {\n                      ...res.data.assets[j],\n                      floor_price: collectionFloorPrice[name],\n                    };\n                    break;\n                  } catch (error: any) {\n                    break;\n                  }\n                }\n              }\n              setOwnedEthCollections(\n                Object.keys(collectionFloorPrice).map((s) => ({ value: s, name: s })),\n              );\n              resNfts.push(asset);\n              setOwnedEthNfts([...resNfts]);\n              initialData[0].count = resNfts.length;\n              initialData[0].price = resNfts\n                .map((r: any) => r.floor_price)\n                .reduce((a: any, b: any) => a + b, 0);\n              setSummary(initialData);\n            }\n            if (res.data.assets.length < 50) {\n              break;\n            }\n            offset += 50;\n          } catch (error: any) {\n            break;\n          }\n        }\n      }\n      initialData[0].loading = false;\n      setSummary(initialData);\n      setEth_Loading(false);\n    };\n    fetchEthData();\n    fetchSolanaData();\n    fetchBscData();\n  }, [hash]);\n\n  return (\n    <>\n      <Meta\n        title={`${profile.name} - Profile | DOKO`}\n        description=\"The Multi-Chain NFT Portfolio Manager that allows you to display, manage & trade your NFTs\"\n        url=\"https://doko.one\"\n        image=\"/DOKO_LOGO.png\"\n      />\n      <Grid container wrap=\"nowrap\" className={styles.collectionPageContainer}>\n        <Hidden smDown>\n          <Grid item>\n            <Card className={styles.introCard}>\n              <Intro drawer={false} />\n            </Card>\n          </Grid>\n        </Hidden>\n        <Grid\n          className={styles.itemsContainer}\n          container\n          direction=\"column\"\n          alignItems=\"flex-start\"\n        >\n          <Hidden smUp>\n            <Grid\n              container\n              direction=\"row\"\n              alignItems=\"center\"\n              justifyContent=\"flex-end\"\n              wrap=\"nowrap\"\n            >\n              <IconButton onClick={handleClickOpen}>\n                <img src=\"/createProfileIcon.png\" alt=\"share\" />\n              </IconButton>\n            </Grid>\n          </Hidden>\n          <Grid\n            container\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            className={styles.addressContainer}\n          >\n            <Grid item xs={12} sm=\"auto\">\n              <Grid container direction=\"column\" className={styles.addressContainer}>\n                <Typography className={styles.titleText} variant=\"h5\" noWrap>\n                  {profile.name}\n                </Typography>\n                <Grid item>\n                  <Hidden xsDown>\n                    <Typography style={{ marginLeft: 5, fontFamily: 'Open Sans', fontSize: 12 }}>\n                      ADDRESSES\n                    </Typography>\n                  </Hidden>\n                </Grid>\n                {renderAddressList()}\n              </Grid>\n            </Grid>\n            <Hidden smUp>\n              <Grid item justifyContent=\"center\">\n                <Button\n                  style={{ width: 200 }}\n                  className=\"gradient-button\"\n                  variant=\"outlined\"\n                  onClick={handleOpenAddress}\n                >\n                  {`View Profile Address ${String.fromCharCode(0x25bc)}`}\n                </Button>\n              </Grid>\n              <Menu\n                anchorEl={anchorEl}\n                open={Boolean(anchorEl)}\n                onClose={handleCloseAddress}\n                getContentAnchorEl={null}\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n                transformOrigin={{ vertical: 'top', horizontal: 'center' }}\n              >\n                {profile.address.map((adrs: any) => (\n                  <MenuItem className={styles.xsAddress}>\n                    <Grid\n                      container\n                      direction=\"row\"\n                      alignItems=\"center\"\n                      justifyContent=\"flex-start\"\n                      wrap=\"nowrap\"\n                    >\n                      <img\n                        width={20}\n                        src={icon[adrs[0]]}\n                        alt={adrs[1]}\n                        style={{ borderRadius: '50%', marginRight: 10 }}\n                      />\n                      <Typography variant=\"h3\" style={{ fontSize: 22, color: '#000000' }}>\n                        {`${adrs[1].substr(0, 6)}...${adrs[1].substr(-4)}`}\n                      </Typography>\n                      <Checkbox\n                        checked\n                        disabled\n                        style={{\n                          color: '#FF06D7',\n                        }}\n                      />\n                    </Grid>\n                  </MenuItem>\n                ))}\n              </Menu>\n            </Hidden>\n            <Hidden xsDown>\n              <Grid>\n                <PopoverShare address={hash} tokenId=\"test\" chain=\"test\" name=\"test\" />\n              </Grid>\n            </Hidden>\n          </Grid>\n          <Grid item style={{ width: '100%' }}>\n            <Hidden xsDown>\n              <Button className={styles.createProfileButton} onClick={handleClickOpen}>\n                <img src=\"/createProfileButton.png\" alt=\"Create Profile\" />\n              </Button>\n            </Hidden>\n            <CustomTabs\n              style={{ marginTop: 12 }}\n              indicatorColor=\"primary\"\n              textColor=\"primary\"\n              value={tabValue}\n              onChange={(event, newValue) => setTabValue(newValue)}\n            >\n              <CustomTab style={{ fontWeight: 'bolder' }} label=\"NFT Collection\" value={0} />\n            </CustomTabs>\n          </Grid>\n          <TabPanel index={0} value={tabValue}>\n            <Summary data={{ summary }} />\n\n            <EthNfts\n              data={{ nfts: ownedEthNfts, collections: ownedEthCollections, loading: eth_loading }}\n            />\n\n            <SolNfts\n              data={{ nfts: ownedSolNfts, collections: ownedSolCollections, loading: sol_loading }}\n            />\n            <SectionLabel variant=\"h5\" style={{ marginTop: 48, marginBottom: 24 }}>\n              BSC & Polygon NFTs (Beta)\n            </SectionLabel>\n            <NftPagination\n              loading={bsc_loading}\n              nfts={ownedBscNfts.slice((page - 1) * 12, page * 12)}\n              page={page}\n              maxPage={Math.floor(ownedBscNfts.length / 12) + 1}\n              onNext={() => setPage(page + 1)}\n              onPrev={() => setPage(page - 1)}\n            />\n          </TabPanel>\n        </Grid>\n      </Grid>\n      <Modal open={createProfile}>\n        <div className={styles.createProfileDialog}>\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            style={{ height: '24%' }}\n          >\n            <Typography variant=\"h4\" style={{ marginLeft: 30, fontSize: 25, fontWeight: 'bold' }}>\n              Create Profile\n            </Typography>\n            <IconButton\n              style={{ marginRight: 30 }}\n              onClick={() => {\n                setCreateProfile(false);\n              }}\n            >\n              <CloseIcon style={{ fill: '#FFFFFF' }} />\n            </IconButton>\n          </Grid>\n          <hr style={{ width: '100%', margin: 0 }} />\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            style={{ height: '52%' }}\n          >\n            <OutlinedInput\n              value={profileName}\n              onChange={(e) => {\n                setProfileName(e.target.value);\n              }}\n              style={{ minWidth: '90%', height: 50, fontWeight: 'bold', fontSize: '16px' }}\n            />\n          </Grid>\n          <hr style={{ width: '100%', margin: 0 }} />\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"flex-end\"\n            alignItems=\"center\"\n            style={{ height: '24%' }}\n          >\n            <Button\n              style={{ width: 170, marginRight: 34 }}\n              className=\"gradient-button\"\n              variant=\"outlined\"\n              onClick={handleSubmit}\n            >\n              Create Profile\n            </Button>\n          </Grid>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default NftCollections;\n","/Users/anthonysiu/doko/DOKO/client/src/modules/collection/index.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/meta-nft-collections/index.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/meta-profiles/index.tsx",["483","484","485","486"],"import { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n  Card,\n  Grid,\n  Hidden,\n  IconButton,\n  makeStyles,\n  Typography,\n  Button,\n  Modal,\n  OutlinedInput,\n} from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport BackIcon from '@material-ui/icons/ArrowBack';\nimport { useCookies } from 'react-cookie';\nimport { AddToHomeScreenTwoTone } from '@material-ui/icons';\nimport { Meta } from '../../components';\nimport Intro from '../core/Intro';\nimport { ProfileItem } from './ProfileItem';\nimport eth from '../../assets/eth-small.png';\nimport bsc from '../../assets/bsc-small.png';\nimport polygon from '../../assets/polygon-small.png';\nimport solana from '../../assets/solana-small.png';\n\ntype Icons = {\n  [key: string]: string;\n};\n\nconst icon: Icons = {\n  eth,\n  bsc,\n  polygon,\n  solana,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  collectionPageContainer: {\n    padding: '24px',\n    marginTop: 36,\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column',\n      marginTop: 0,\n    },\n    minHeight: 'calc(100vh)',\n  },\n  introCard: {\n    position: 'sticky',\n    top: 120,\n  },\n  itemsContainer: {\n    paddingLeft: 36,\n    [theme.breakpoints.down('sm')]: {\n      paddingLeft: 0,\n      marginTop: 0,\n    },\n  },\n  titleContainer: {\n    marginBottom: 12,\n    [theme.breakpoints.down('xs')]: {\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n  },\n  titleText: {\n    fontWeight: 'bolder',\n    [theme.breakpoints.down('sm')]: {\n      fontSize: 26,\n    },\n  },\n  descriptionText: {\n    fontSize: 16,\n    [theme.breakpoints.down('sm')]: {\n      fontSize: 9,\n    },\n  },\n  connectedAddress: {\n    fontSize: 32,\n    [theme.breakpoints.down('sm')]: {\n      fontSize: 14,\n    },\n  },\n  createProfileButton: {\n    cursor: 'pointer',\n    right: '4%',\n    width: 162,\n    height: 46,\n    zIndex: 999,\n    position: 'absolute',\n  },\n  createProfileDialog: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    maxHeight: '90vh',\n    maxWidth: '90vw',\n    width: 578,\n    height: 320,\n    border: '1px solid #FFFFFF',\n    background: '#000000',\n    boxShadow: '0px 10px 20px rgba(0, 0, 0, 0.75)',\n    borderRadius: '23px',\n  },\n  addAddressDialog: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    maxHeight: '90%',\n    maxWidth: '90%',\n    minHeight: 600,\n    overflowY: 'hidden',\n    width: 645,\n    height: 627,\n    border: '1px solid #FFFFFF',\n    background: '#000000',\n    boxShadow: '0px 10px 20px rgba(0, 0, 0, 0.75)',\n    borderRadius: '23px',\n    display: 'block',\n  },\n  typeButton: {\n    cursor: 'pointer',\n    margin: 10,\n    border: '1px solid #FFFFFF',\n    borderRadius: '10px',\n    height: 126,\n    width: 126,\n    textAlign: 'center',\n    [theme.breakpoints.down('sm')]: {\n      height: 68,\n      width: 68,\n    },\n  },\n  typeButtonOutlined: {\n    cursor: 'pointer',\n    margin: 10,\n    border: '1px solid #FF06D7',\n    borderRadius: '10px',\n    height: 126,\n    width: 126,\n    textAlign: 'center',\n    [theme.breakpoints.down('sm')]: {\n      height: 68,\n      width: 68,\n    },\n  },\n  typeImg: {\n    width: 26,\n    height: 26,\n    [theme.breakpoints.down('sm')]: {\n      width: 14,\n      height: 14,\n    },\n  },\n  typeText: {\n    marginTop: 3,\n    fontWeight: 'bold',\n    fontSize: 12,\n    [theme.breakpoints.down('sm')]: {\n      fontSize: 8,\n    },\n  },\n  backButton: {\n    cursor: 'pointer',\n    border: '2px solid rgba(255, 255, 255, 0.25)',\n    borderRadius: '23px',\n    marginBottom: 24,\n    height: 42,\n    width: 110,\n  },\n  buttons: {\n    height: 50,\n    border: '2px solid rgba(255, 255, 255, 0.5)',\n    boxSizing: 'border-box',\n    borderRadius: '100px',\n    width: '100%',\n    alignItems: 'center',\n  },\n}));\n\nexport const Profiles = () => {\n  const styles = useStyles();\n  const [createProfile, setCreateProfile] = useState(false);\n  const [profileName, setProfileName] = useState('');\n  const [addAddress, setAddAddress] = useState(false);\n  const [editProfile, setEditProfile] = useState<string>('');\n  const [addressType, setAddressType] = useState('eth');\n  const [newAddress, setNewAddress] = useState('');\n  const [cookies, setCookie, removeCookie] = useCookies(['profiles']);\n\n  const handleClickOpen = () => {\n    setCreateProfile(true);\n  };\n\n  const handleSubmit = () => {\n    setCreateProfile(false);\n    const profiles = cookies.profiles ? cookies.profiles : {};\n    profiles[profileName] = {\n      address: [],\n      hash: btoa(JSON.stringify({ name: profileName, address: [] })),\n    };\n    setCookie('profiles', profiles, { path: '/' });\n  };\n\n  const handleDeleteProfile = (name: string) => {\n    const profiles = cookies.profiles ? cookies.profiles : {};\n    delete profiles[name];\n    setCookie('profiles', profiles, { path: '/' });\n  };\n\n  const handleDeleteAddress = (address: string) => {\n    const profiles = cookies.profiles ? cookies.profiles : {};\n    profiles[editProfile].address = profiles[editProfile].address.filter(\n      (adrs: any) => adrs[1] !== address,\n    );\n    profiles[editProfile].hash = btoa(\n      JSON.stringify({ name: editProfile, address: profiles[editProfile].address }),\n    );\n    setCookie('profiles', profiles, { path: '/' });\n  };\n\n  const handleClickBack = () => {\n    setEditProfile('');\n  };\n\n  const onClickSave = () => {\n    setAddAddress(false);\n    setNewAddress('');\n    const profiles = cookies.profiles ? cookies.profiles : {};\n    if (profiles[editProfile].address.length < 6) {\n      profiles[editProfile].address.push([addressType, newAddress]);\n      profiles[editProfile].hash = btoa(\n        JSON.stringify({ name: editProfile, address: profiles[editProfile].address }),\n      );\n      setCookie('profiles', profiles, { path: '/' });\n    }\n  };\n\n  const renderProfileList = () => (\n    <div>\n      <Grid className={styles.itemsContainer} container direction=\"column\" alignItems=\"flex-start\">\n        <Hidden smUp>\n          <Grid\n            container\n            direction=\"row\"\n            alignItems=\"center\"\n            justifyContent=\"flex-end\"\n            wrap=\"nowrap\"\n          >\n            <IconButton onClick={handleClickOpen}>\n              <img src=\"/createProfileIcon.png\" alt=\"share\" />\n            </IconButton>\n          </Grid>\n        </Hidden>\n        <Grid\n          container\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          className={styles.titleContainer}\n        >\n          <Grid item xs={12} md=\"auto\">\n            <Grid container direction=\"column\">\n              <Typography\n                className={styles.titleText}\n                variant=\"h3\"\n                style={{ fontWeight: 'bolder' }}\n              >\n                Manage Profile(s)\n              </Typography>\n            </Grid>\n          </Grid>\n          <Hidden xsDown>\n            <Button className={styles.createProfileButton} onClick={handleClickOpen}>\n              <img src=\"/createProfileButton.png\" alt=\"Create Profile\" />\n            </Button>\n          </Hidden>\n        </Grid>\n        <Grid container alignItems=\"center\" style={{ paddingBottom: 40 }}>\n          <Typography className={styles.descriptionText}>\n            This is where you can view, edit or delete each of your created and saved profiles.\n          </Typography>\n        </Grid>\n        <Grid container spacing={3}>\n          {cookies.profiles &&\n            Object.keys(cookies.profiles).map((name: string) => (\n              <ProfileItem\n                profile={name}\n                onClickEdit={() => setEditProfile(name)}\n                onClickDelete={() => handleDeleteProfile(name)}\n              />\n            ))}\n        </Grid>\n      </Grid>\n      <Modal open={createProfile}>\n        <div className={styles.createProfileDialog}>\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            style={{ height: '24%' }}\n          >\n            <Typography variant=\"h4\" style={{ marginLeft: 30, fontSize: 25, fontWeight: 'bold' }}>\n              Create Profile\n            </Typography>\n            <IconButton\n              style={{ marginRight: 30 }}\n              onClick={() => {\n                setCreateProfile(false);\n              }}\n            >\n              <CloseIcon style={{ fill: '#FFFFFF' }} />\n            </IconButton>\n          </Grid>\n          <hr style={{ width: '100%', margin: 0 }} />\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            style={{ height: '52%' }}\n          >\n            <OutlinedInput\n              value={profileName}\n              onChange={(e) => {\n                setProfileName(e.target.value);\n              }}\n              style={{ minWidth: '90%', height: 50, fontWeight: 'bold', fontSize: '16px' }}\n            />\n          </Grid>\n          <hr style={{ width: '100%', margin: 0 }} />\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"flex-end\"\n            alignItems=\"center\"\n            style={{ height: '24%' }}\n          >\n            <Button\n              style={{ width: 170, marginRight: 34 }}\n              className=\"gradient-button\"\n              variant=\"outlined\"\n              onClick={handleSubmit}\n            >\n              Create Profile\n            </Button>\n          </Grid>\n        </div>\n      </Modal>\n    </div>\n  );\n\n  const renderEditPage = () => (\n    <div>\n      <Grid className={styles.itemsContainer} container direction=\"column\" alignItems=\"flex-start\">\n        <Grid item>\n          <div onClick={handleClickBack} aria-hidden=\"true\">\n            <Grid\n              container\n              direction=\"row\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n              className={styles.backButton}\n              spacing={1}\n            >\n              <Grid item>\n                <BackIcon style={{ width: 13, paddingTop: 7, fill: '#FFFFFF' }} />\n              </Grid>\n              <Grid item>\n                <Typography style={{ fontSize: 14, fontWeight: 'bold' }}>Back</Typography>\n              </Grid>\n            </Grid>\n          </div>\n        </Grid>\n        <Grid\n          container\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          className={styles.titleContainer}\n        >\n          <Grid item xs={12} md=\"auto\">\n            <Grid container direction=\"column\">\n              <Typography\n                className={styles.titleText}\n                variant=\"h3\"\n                style={{ fontWeight: 'bolder' }}\n              >\n                {editProfile}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid container alignItems=\"center\" style={{ paddingBottom: 40 }}>\n          <Typography className={styles.descriptionText}>\n            This is where you can view, edit or delete each of your profiles. You can only have a\n            maximum of 6 addresses per profile.\n          </Typography>\n        </Grid>\n        <Grid container alignItems=\"center\" style={{ paddingBottom: 20 }}>\n          <Typography className={styles.connectedAddress}>\n            {`Address Connected (${cookies.profiles?.[editProfile].address.length})`}\n          </Typography>\n        </Grid>\n        {cookies.profiles?.[editProfile].address.length < 6 && (\n          <Grid container>\n            <Button className={styles.buttons} onClick={() => setAddAddress(true)}>\n              <img src=\"/addAddress.png\" alt=\"add address\" />\n            </Button>\n          </Grid>\n        )}\n        {cookies.profiles?.[editProfile].address.map((adrs: any) => (\n          <Grid\n            container\n            direction=\"row\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            wrap=\"nowrap\"\n            className={styles.buttons}\n            style={{ marginTop: 10 }}\n          >\n            <img\n              width={20}\n              src={icon[adrs[0]]}\n              alt={adrs[0]}\n              style={{ borderRadius: '50%', margin: '3%' }}\n            />\n            <Typography noWrap style={{ fontSize: '18px', fontFamily: 'Open Sans' }}>\n              {adrs[1]}\n            </Typography>\n            <Button\n              style={{ width: 100, height: '50%', margin: '3%' }}\n              className=\"gradient-button\"\n              variant=\"outlined\"\n              onClick={() => handleDeleteAddress(adrs[1])}\n            >\n              Delete\n            </Button>\n          </Grid>\n        ))}\n      </Grid>\n      <Modal open={addAddress}>\n        <div className={styles.addAddressDialog}>\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            style={{ height: '12%' }}\n          >\n            <Typography variant=\"h4\" style={{ marginLeft: 30, fontSize: 25, fontWeight: 'bold' }}>\n              Add an Address\n            </Typography>\n            <IconButton style={{ marginRight: 30 }} onClick={() => setAddAddress(false)}>\n              <CloseIcon style={{ fill: '#FFFFFF' }} />\n            </IconButton>\n          </Grid>\n          <hr style={{ width: '100%', margin: 0 }} />\n          <Grid\n            container\n            direction=\"column\"\n            justifyContent=\"flex-start\"\n            alignItems=\"flex-start\"\n            style={{ padding: 30, height: '74%' }}\n          >\n            <Typography style={{ fontSize: 21 }}>Select Blockchain</Typography>\n            <Typography style={{ fontSize: 14 }}>\n              Select the type of address that you want to add to the profile.\n            </Typography>\n            <Grid container direction=\"row\">\n              <div\n                onClick={() => setAddressType('eth')}\n                aria-hidden=\"true\"\n                className={addressType === 'eth' ? styles.typeButtonOutlined : styles.typeButton}\n              >\n                <div style={{ marginTop: '30%' }}>\n                  <img className={styles.typeImg} src={eth} alt=\"EVM\" />\n                  <Typography className={styles.typeText}>EVM</Typography>\n                </div>\n              </div>\n            </Grid>\n            <Typography style={{ fontSize: 21, marginTop: 15 }}>Enter your address</Typography>\n            <Typography style={{ fontSize: 14 }}>\n              Enter the address that you want to add to the profile\n            </Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\n              <OutlinedInput\n                value={newAddress}\n                onChange={(e) => {\n                  setNewAddress(e.target.value);\n                }}\n                style={{\n                  marginTop: 30,\n                  width: '90%',\n                  height: 50,\n                  fontWeight: 'bold',\n                  fontSize: '16px',\n                }}\n              />\n            </Grid>\n          </Grid>\n          <hr style={{ width: '100%', margin: 0 }} />\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"flex-end\"\n            alignItems=\"center\"\n            style={{ height: '12%' }}\n          >\n            <Button\n              style={{ width: 170, marginRight: 34 }}\n              className=\"gradient-button\"\n              variant=\"outlined\"\n              onClick={onClickSave}\n            >\n              Save\n            </Button>\n          </Grid>\n        </div>\n      </Modal>\n    </div>\n  );\n\n  return (\n    <>\n      <Meta\n        title=\"Manage Profile(s)\"\n        description=\"The Multi-Chain NFT Portfolio Manager that allows you to display, manage & trade your NFTs\"\n        url=\"https://doko.one\"\n        image=\"/DOKO_LOGO.png\"\n      />\n      <Grid container wrap=\"nowrap\" className={styles.collectionPageContainer}>\n        <Hidden smDown>\n          <Grid item>\n            <Card className={styles.introCard}>\n              <Intro drawer={false} />\n            </Card>\n          </Grid>\n        </Hidden>\n        {!editProfile ? renderProfileList() : renderEditPage()}\n      </Grid>\n    </>\n  );\n};\n\nexport default Profiles;\n","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-profile-page/index.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/meta-nft-individual/index.tsx",["487"],"import { ChangeEvent, useEffect, useState } from 'react';\nimport {\n  Button,\n  Grid,\n  IconButton,\n  Link,\n  makeStyles,\n  Table,\n  TablePagination,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n  withStyles,\n  Hidden,\n} from '@material-ui/core';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport { useParams } from 'react-router-dom';\nimport bsc from 'cryptocurrency-icons/32/white/bnb.png';\nimport solana from 'cryptocurrency-icons/32/white/sol.png';\nimport eth from '../../assets/eth-small.png';\n\nimport Moralis from '../../libs/moralis';\nimport { fetchOpenSeaEvents, fetchNFTOpensea } from './api';\nimport { NftTraits } from './traits';\nimport { SolanaNftTraits } from './solanaTraits';\nimport { CopyAddress } from './CopyAddress';\nimport { PopoverShare } from '../../components/PopoverShare';\nimport { web3 } from '../../libs/web3';\nimport { normalizeImageURL, chainMapping, formatTx, getTotalSupply } from '../../libs/utils';\nimport { getNFT, fetchOpenseaLastSale } from '../api';\nimport { getTokenInfo, getSolanaNFTMetadata, getTokenOwner } from '../../libs/metaplex/utils';\nimport opensea_icon from '../../assets/opensea-transparent.png';\nimport loading_image from '../../assets/loading.gif';\nimport { Meta } from '../../components';\n\nimport decentraland from '../../assets/decentraland.png';\nimport cryptovoxels from '../../assets/cryptovoxels.png';\nimport somnium from '../../assets/somnium.png';\nimport thesandbox from '../../assets/thesandbox.png';\nimport metaverses from '../../constants/metaverses';\nimport { Filter } from '../../hooks/useProfileSummaries';\nimport ContractServiceAPI from '../../libs/contract-service-api';\nimport { parsePrice } from '../../store/meta-nft-collections/collectionSummarySlice';\n\ntype Icons = {\n  [key: string]: string;\n};\n\nconst metaverseIcon: Icons = {\n  decentraland,\n  cryptovoxels,\n  'somnium-space': somnium,\n  sandbox: thesandbox,\n};\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: '#333333',\n    color: theme.palette.common.white,\n    textAlign: 'center',\n  },\n  body: {\n    fontSize: 14,\n    color: theme.palette.common.white,\n    textAlign: 'center',\n  },\n}))(TableCell);\n\nconst CustomIconButton = withStyles({\n  root: {\n    padding: '1px',\n    marginRight: 24,\n  },\n})(IconButton);\n\nconst useStyles = makeStyles((theme) => ({\n  collectionContainer: {\n    padding: 24,\n    marginTop: 36,\n    marginBottom: 36,\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column',\n      marginTop: 0,\n    },\n    minHeight: 'calc(100vh)',\n  },\n  nftNameMobile: {\n    [theme.breakpoints.down('sm')]: {\n      display: 'flex',\n      textAlign: 'center',\n    },\n    display: 'none',\n  },\n  nftNameGeneral: {\n    [theme.breakpoints.down('sm')]: {\n      display: 'none',\n      textAlign: 'left',\n    },\n    display: 'flex',\n  },\n  lazyloadwrapper: {\n    [theme.breakpoints.up('md')]: {\n      position: 'fixed',\n      left: 0,\n    },\n    textAlign: 'center',\n    width: 'inherit',\n    maxWidth: 'inherit',\n  },\n  image: {\n    borderRadius: 12,\n    border: '3px solid white',\n    maxHeight: 400,\n    minHeight: 200,\n    maxWidth: '80%',\n    '& > svg': {\n      width: '100%',\n      height: 'auto',\n    },\n  },\n  separator: {\n    border: '1px solid transparent',\n    borderRightColor: '#333333',\n  },\n  bolder: {\n    fontWeight: 'bolder',\n  },\n  shareIcon: {\n    width: 36,\n    hight: 36,\n  },\n  networkIcon: {\n    width: 12,\n    height: 12,\n    marginRight: 3,\n  },\n  networkIconMedium: {\n    height: 18,\n    marginRight: 3,\n  },\n  profileButton: {\n    background: `linear-gradient(\n      -45deg,\n      #ff06d7 0%,\n      #ff06d7 30%,\n      rgba(80, 92, 176, 1) 50%,\n      #00ffef 80%,\n      #00ffef 100%\n    )`,\n    padding: '8px 20px',\n    width: 250,\n    fontWeight: 'bold',\n  },\n}));\n\nexport const NftIndividual = () => {\n  const styles = useStyles();\n  const { address, id, chain } = useParams<{ address: string; id: string; chain: string }>();\n  const [nft, setNFT] = useState<any>();\n  const [lastSale, setLastSale] = useState<number>();\n  const [lastSaleUSD, setLastSaleUSD] = useState<number>();\n  const [floorPrice, setFloorPrice] = useState<number>();\n  const [owner, setOwner] = useState<string>('');\n  const [creator, setCreator] = useState<string>('');\n  const [nftName, setNftName] = useState<string>('');\n  const [nftImage, setNftImage] = useState<string>('');\n  const [nftDesc, setNftDesc] = useState<string>('');\n  const [txs, setTxs] = useState<any[]>([]);\n  const [collection, setCollection] = useState<string>('');\n  const [traits, setTraits] = useState<any[]>([]);\n  const [totalSupply, setTotalSupply] = useState<number>();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [slug, setSlug] = useState<string>('');\n  const [externalLink, setExternalLink] = useState<string>('');\n  const [metaverseName, setMetaverseName] = useState<string>('');\n\n  const getCurrencyIcon = (_chain: string) => {\n    let icon;\n    switch (_chain) {\n      case 'polygon': {\n        icon = eth;\n        break;\n      }\n      case 'eth': {\n        icon = eth;\n        break;\n      }\n      case 'bsc': {\n        icon = bsc;\n        break;\n      }\n      case 'solana': {\n        icon = solana;\n        break;\n      }\n      default:\n        break;\n    }\n    return icon;\n  };\n\n  const fetchNFT = async () => {\n    if (!address || !id) {\n      return;\n    }\n\n    try {\n      let _nft;\n      let _metadata;\n      if (chain === 'solana') {\n        const res: any = await getTokenInfo(id);\n        const metadataRes: any = await getSolanaNFTMetadata(res);\n        const tokenOwner: any = await getTokenOwner(id);\n        _nft = res.data;\n        _metadata = metadataRes.metadata.data;\n        if (_nft.creators) {\n          setCreator(_nft.creators[0].address);\n        }\n        setNFT(_nft);\n        setOwner(tokenOwner);\n        setNftName(_nft.name);\n        setNftImage(_metadata.image);\n        setNftDesc(_metadata.description);\n        setCollection(_metadata.symbol);\n        const _traits = 'attributes' in _metadata ? _metadata.attributes : [];\n        setTraits(_traits);\n      } else if (chain !== 'eth') {\n        const res = await getNFT(address, id);\n        _nft = res.data;\n        setNFT(_nft);\n        setOwner(_nft.owner_of);\n        setNftName(_nft.metadata.name ? _nft.metadata.name : `${_nft.name} # ${_nft.token_id}`);\n        setNftImage(normalizeImageURL(_nft).metadata.image);\n        setNftDesc(_nft.metadata.description);\n        setCollection(_nft.name);\n        const _traits =\n          'metadata' in _nft && 'attributes' in _nft.metadata ? _nft.metadata.attributes : [];\n        setTraits(_traits);\n      } else {\n        const res = await fetchNFTOpensea(address, id);\n        _nft = res.data;\n        setNFT(_nft);\n        setOwner(_nft.owner.address);\n        setNftName(_nft.name ? _nft.name : 'N/A');\n        setNftImage(_nft.image_url);\n        setNftDesc(_nft.description);\n        setCollection(_nft.asset_contract.name);\n        const _traits = res.data.traits && res.data.traits.length ? res.data.traits : [];\n        let traitFilter: Filter[] = [];\n        // just for a quick fix...\n        const metaverse = metaverses.find((metaverse) => _nft.collection.slug === metaverse.slug);\n        if (metaverse) {\n          const lookupTraits = _traits.filter((trait) =>\n            metaverse.primaryTraitTypes.includes(trait.trait_type),\n          );\n          traitFilter = lookupTraits.map((trait) => ({\n            traitType: trait.trait_type,\n            value: trait.value,\n            operator: '=',\n          }));\n          const response: any = await ContractServiceAPI.getAssetFloorPrice(\n            metaverse.primaryAddress,\n            traitFilter,\n          );\n          let floorPrice = parsePrice(response.price, response.payment_token);\n          if (_nft.asset_contract.address === '0x959e104e1a4db6317fa58f8295f586e1a978c297') {\n            const sizeTrait = _nft.traits.find((trait) => trait.trait_type === 'Size');\n            const size = parseInt((sizeTrait && sizeTrait.value) || '1', 10);\n            floorPrice *= size;\n          }\n          setFloorPrice(floorPrice);\n        }\n        setSlug(_nft.collection.slug);\n        switch (_nft.collection.slug) {\n          case 'decentraland':\n            setMetaverseName('Decentraland');\n            break;\n          case 'cryptovoxels':\n            setMetaverseName('Cryptovoxels');\n            break;\n          case 'somnium-space':\n            setMetaverseName('Somnium Space');\n            break;\n          case 'sandbox':\n            setMetaverseName('The Sandbox');\n            break;\n          default:\n            break;\n        }\n        setExternalLink(_nft.external_link);\n        setTraits(_traits);\n      }\n    } catch (err) {\n      if (err) console.log(err);\n    }\n  };\n\n  const fetchTxs = async (\n    _chain: string,\n    _address: string,\n    _id: string,\n    offset: number,\n    limit: number,\n  ) => {\n    let formatted_txs: Array<any> = [];\n    try {\n      if (_chain === 'solana') {\n        return;\n      }\n      if (_chain !== 'eth') {\n        const options: any = { address, token_id: id, chain };\n        const transfers = await (Moralis.Web3API as any).token.getWalletTokenIdTransfers(options);\n        formatted_txs = transfers.result.map((transfer: any) => formatTx(transfer, _chain));\n      } else {\n        formatted_txs = await fetchOpenSeaEvents(address, id, offset, limit, [\n          'created',\n          'successful',\n          'transfer',\n        ]);\n      }\n      setTxs(formatted_txs);\n    } catch (e) {\n      setTxs([]);\n    }\n    if (formatted_txs.length) {\n      if (formatted_txs[formatted_txs.length - 1].event === 'Mint') {\n        setCreator(formatted_txs[formatted_txs.length - 1].to);\n      }\n    } else {\n      setCreator('');\n    }\n  };\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event: ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const fetchPrice = async (addr: string, tokenId: string) => {\n    if (chain !== 'eth') {\n      setLastSale(0);\n      setLastSaleUSD(0);\n      setFloorPrice(0);\n      return;\n    }\n    try {\n      const res = await fetchOpenseaLastSale(addr, tokenId);\n      const isLastSale = res.data.last_sale && res.data.last_sale.total_price;\n      const lastsale = isLastSale\n        ? +web3.utils.fromWei(res.data.last_sale.total_price, 'ether')\n        : 0;\n      const usdRate = isLastSale ? +res.data.last_sale.payment_token.usd_price : 0;\n      let usdAmount = lastsale * usdRate;\n      usdAmount = +Number.parseFloat(usdAmount.toString()).toFixed(2);\n      const _floorPrice = +res.data.collection.stats.floor_price;\n      setLastSale(lastsale);\n      setLastSaleUSD(usdAmount);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const _getTotalSupply = async (addr: string) => {\n    if (chain !== 'eth') {\n      setTotalSupply(0);\n      return;\n    }\n    try {\n      const tsupply = await getTotalSupply(addr);\n      setTotalSupply(tsupply);\n    } catch (e) {\n      setTotalSupply(0);\n    }\n  };\n\n  useEffect(() => {\n    setNFT([]);\n    fetchNFT();\n    fetchTxs(chain, address, id, 0, 100);\n    fetchPrice(address, id);\n    _getTotalSupply(address);\n  }, [address, id, chain]);\n\n  return (\n    <>\n      {nft && (\n        <Meta\n          title={`${nftName} | DOKO`}\n          description={nftDesc || ''}\n          url=\"https://doko.one\"\n          image={nftImage || ''}\n        />\n      )}\n      <Grid\n        className={styles.collectionContainer}\n        container\n        direction=\"row\"\n        justifyContent=\"flex-start\"\n        spacing={4}\n      >\n        <Grid\n          item\n          container\n          direction=\"row\"\n          justifyContent=\"space-between\"\n          className={styles.nftNameMobile}\n        >\n          <Grid item>\n            <Typography variant=\"h4\" style={{ fontWeight: 'bolder' }}>\n              {nftName}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <CustomIconButton onClick={() => window.location.reload()}>\n              <img\n                className={styles.shareIcon}\n                src=\"/collection/DOKOasset_RefreshData.png\"\n                alt=\"back\"\n              />\n            </CustomIconButton>\n            <PopoverShare address={address} tokenId={id} chain={chain} name={nftName} />\n          </Grid>\n        </Grid>\n        <Grid\n          item\n          container\n          xs={12}\n          sm={12}\n          md={4}\n          lg={3}\n          xl={3}\n          justifyContent=\"flex-start\"\n          style={{ position: 'relative' }}\n        >\n          {nft && (\n            <LazyLoadImage\n              style={{ textAlign: 'center' }}\n              key={nft.token_id}\n              className={styles.image}\n              wrapperClassName={styles.lazyloadwrapper}\n              alt=\"\"\n              src={nftImage}\n              placeholder={<img src={loading_image} alt=\"Loading\" />}\n              effect=\"opacity\"\n            />\n          )}\n        </Grid>\n        <Grid\n          item\n          container\n          direction=\"column\"\n          alignItems=\"flex-start\"\n          xs={12}\n          sm={12}\n          md={8}\n          lg={9}\n          xl={9}\n          spacing={5}\n        >\n          <Grid\n            item\n            container\n            direction=\"row\"\n            justifyContent=\"space-between\"\n            className={styles.nftNameGeneral}\n          >\n            <Grid item>\n              <Typography variant=\"h4\" style={{ fontWeight: 'bolder' }}>\n                {nftName}\n              </Typography>\n            </Grid>\n            <Grid item>\n              <CustomIconButton onClick={() => window.location.reload()}>\n                <img\n                  className={styles.shareIcon}\n                  src=\"/collection/DOKOasset_RefreshData.png\"\n                  alt=\"back\"\n                />\n              </CustomIconButton>\n              <PopoverShare address={address} tokenId={id} chain={chain} name={nftName} />\n            </Grid>\n          </Grid>\n          <Grid\n            item\n            container\n            direction=\"row\"\n            spacing={3}\n            justifyContent=\"flex-start\"\n            style={{ paddingTop: '1px' }}\n          >\n            <Grid item className={styles.separator} style={{ paddingBottom: 0, paddingTop: 0 }}>\n              <Typography variant=\"body1\" style={{ fontWeight: 'bolder' }}>\n                Creator\n              </Typography>\n              {creator ? (\n                <CopyAddress address={creator} hasLink={false} />\n              ) : (\n                <Typography variant=\"body1\">N/A</Typography>\n              )}\n            </Grid>\n            <Grid item style={{ paddingBottom: 0, paddingTop: 0 }}>\n              <Typography variant=\"body1\" style={{ fontWeight: 'bolder' }}>\n                Owner\n              </Typography>\n              <CopyAddress address={owner} hasLink />\n            </Grid>\n          </Grid>\n          <Grid item container direction=\"column\" spacing={0}>\n            <Grid item>\n              <Typography variant=\"h6\" style={{ fontWeight: 'bolder' }}>\n                Last Purchase Price\n              </Typography>\n            </Grid>\n            {lastSale ? (\n              <Grid item>\n                <IconButton style={{ padding: 0, verticalAlign: 'baseline' }}>\n                  <img\n                    className={styles.networkIconMedium}\n                    src=\"/collection/DOKOasset_EthereumBlue.png\"\n                    alt=\"eth\"\n                  />\n                </IconButton>\n                <Typography\n                  variant=\"h5\"\n                  display=\"inline\"\n                  className=\"bolder\"\n                  style={{ marginRight: '4px' }}\n                >\n                  {lastSale.toFixed(3)}\n                </Typography>\n                <Typography variant=\"body1\" display=\"inline\">\n                  {`(US ${lastSaleUSD})`}\n                </Typography>\n              </Grid>\n            ) : (\n              <Grid item>\n                <Typography variant=\"body1\">N/A</Typography>\n              </Grid>\n            )}\n            <Grid item style={{ marginTop: '.5em' }}>\n              <Typography variant=\"h6\" style={{ fontWeight: 'bolder' }}>\n                Floor Price\n              </Typography>\n            </Grid>\n            {floorPrice ? (\n              <Grid item>\n                <IconButton style={{ padding: 0, verticalAlign: 'baseline' }}>\n                  <img\n                    className={styles.networkIconMedium}\n                    src=\"/collection/DOKOasset_EthereumBlue.png\"\n                    alt=\"eth\"\n                  />\n                </IconButton>\n                <Typography\n                  variant=\"h5\"\n                  display=\"inline\"\n                  className=\"bolder\"\n                  style={{ marginRight: '4px' }}\n                >\n                  {parseFloat(`${floorPrice}`).toFixed(2)}\n                </Typography>\n              </Grid>\n            ) : (\n              <Grid item>\n                <Typography variant=\"body1\">N/A</Typography>\n              </Grid>\n            )}\n            <Grid item style={{ marginTop: '.9em' }}>\n              <Link style={{ textDecoration: 'none' }} target=\"_blank\" href={externalLink}>\n                <Button className={styles.profileButton}>\n                  <img width={16} src={metaverseIcon[slug]} alt=\"\" />\n                  <span\n                    style={{ marginLeft: 12, color: 'white' }}\n                  >{`View on ${metaverseName}`}</span>\n                </Button>\n              </Link>\n            </Grid>\n          </Grid>\n          <Hidden smUp>\n            <Grid item container wrap=\"nowrap\" justifyContent=\"flex-start\" spacing={5}>\n              <Grid item container xs={6} direction=\"column\" spacing={1}>\n                <Grid item>\n                  <Typography variant=\"h5\" style={{ fontWeight: 'bolder' }}>\n                    MarketPlace\n                  </Typography>\n                  <Grid item style={{ marginTop: '.9em' }}>\n                    <Link\n                      style={{ textDecoration: 'none' }}\n                      target=\"_blank\"\n                      href={`https://opensea.io/assets/${address}/${id}`}\n                    >\n                      <Button className=\"gradient-button\" variant=\"outlined\">\n                        <img width={16} src={opensea_icon} alt=\"\" />\n                        <span style={{ marginLeft: 12 }}>Opensea</span>\n                      </Button>\n                    </Link>\n                  </Grid>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"h5\" style={{ fontWeight: 'bolder' }}>\n                    Description\n                  </Typography>\n                  <Typography variant=\"body1\">{nftDesc || <span>N/A</span>}</Typography>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"h5\" style={{ fontWeight: 'bolder' }}>\n                    Collection\n                  </Typography>\n                  {chain === 'eth' ? (\n                    <Link\n                      style={{ textDecoration: 'none', color: '#61dafb' }}\n                      href={`${window.origin}/collections/${address}`}\n                    >\n                      {collection}\n                    </Link>\n                  ) : (\n                    <Typography variant=\"body1\">{collection}</Typography>\n                  )}\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"h5\" style={{ fontWeight: 'bolder' }}>\n                    Contract Address\n                  </Typography>\n                  <Typography variant=\"body1\">{address}</Typography>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"h5\" style={{ fontWeight: 'bolder' }}>\n                    Blockchain\n                  </Typography>\n                  <Typography variant=\"body1\">{chainMapping(chain)}</Typography>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"h5\" style={{ fontWeight: 'bolder' }}>\n                    Token ID\n                  </Typography>\n                  <Typography variant=\"body1\">{id}</Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Hidden>\n          <Hidden xsDown>\n            <Grid item container wrap=\"nowrap\" justifyContent=\"flex-start\" spacing={5}>\n              <Grid item container xs={6} direction=\"column\" spacing={1}>\n                <Grid item>\n                  <Typography variant=\"h5\" style={{ fontWeight: 'bolder' }}>\n                    MarketPlace\n                  </Typography>\n                  <Grid item style={{ marginTop: '.9em' }}>\n                    <Link\n                      style={{ textDecoration: 'none' }}\n                      target=\"_blank\"\n                      href={`https://opensea.io/assets/${address}/${id}`}\n                    >\n                      <Button className=\"gradient-button\" variant=\"outlined\">\n                        <img width={16} src={opensea_icon} alt=\"\" />\n                        <span style={{ marginLeft: 12 }}>Opensea</span>\n                      </Button>\n                    </Link>\n                  </Grid>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"h5\" style={{ fontWeight: 'bolder' }}>\n                    Description\n                  </Typography>\n                  <Typography variant=\"body1\">{nftDesc || <span>N/A</span>}</Typography>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"h5\" style={{ fontWeight: 'bolder' }}>\n                    Collection\n                  </Typography>\n                  {chain === 'eth' ? (\n                    <Link\n                      style={{ textDecoration: 'none', color: '#61dafb' }}\n                      href={`${window.origin}/collections/${address}`}\n                    >\n                      {collection}\n                    </Link>\n                  ) : (\n                    <Typography variant=\"body1\">{collection}</Typography>\n                  )}\n                </Grid>\n              </Grid>\n              <Grid item container direction=\"column\" xs={6} spacing={1}>\n                <Grid item>\n                  <Typography variant=\"h5\" style={{ fontWeight: 'bolder' }}>\n                    Contract Address\n                  </Typography>\n                  <Typography variant=\"body1\">{address}</Typography>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"h5\" style={{ fontWeight: 'bolder' }}>\n                    Blockchain\n                  </Typography>\n                  <Typography variant=\"body1\">{chainMapping(chain)}</Typography>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"h5\" style={{ fontWeight: 'bolder' }}>\n                    Token ID\n                  </Typography>\n                  <Typography variant=\"body1\">{id}</Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Hidden>\n          <Grid item container direction=\"column\">\n            <Typography variant=\"h5\" style={{ fontWeight: 'bolder', marginBottom: '0.6em' }}>\n              Traits\n            </Typography>\n            {traits && traits.length ? (\n              chain === 'solana' ? (\n                <SolanaNftTraits traits={traits} />\n              ) : (\n                <NftTraits traits={traits} totalSupply={totalSupply} />\n              )\n            ) : (\n              <Typography variant=\"body1\">N/A</Typography>\n            )}\n          </Grid>\n          <Grid container item direction=\"column\">\n            <Grid item>\n              <Typography variant=\"h5\" className={styles.bolder} style={{ marginBottom: '0.6em' }}>\n                Transaction History\n              </Typography>\n            </Grid>\n            <Grid item>\n              <TableContainer style={{ maxWidth: '95vw', overflow: 'scroll' }}>\n                <Table aria-label=\"customized table\">\n                  <TableHead style={{ backgroundColor: '#333333' }}>\n                    <TableRow>\n                      <StyledTableCell>Event</StyledTableCell>\n                      <StyledTableCell>Price</StyledTableCell>\n                      <StyledTableCell>From</StyledTableCell>\n                      <StyledTableCell>To</StyledTableCell>\n                      <StyledTableCell>Date</StyledTableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {txs\n                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                      .map((tx, i) => {\n                        const icon = getCurrencyIcon(chain);\n                        return (\n                          <TableRow key={i}>\n                            <StyledTableCell>{tx.event}</StyledTableCell>\n                            <StyledTableCell>\n                              {tx.price ? (\n                                <div>\n                                  <img className={styles.networkIcon} src={icon} alt={chain} />\n                                  <span>{tx.price}</span>\n                                </div>\n                              ) : (\n                                <div>\n                                  <span>{tx.price}</span>\n                                </div>\n                              )}\n                            </StyledTableCell>\n                            <StyledTableCell>{tx.from}</StyledTableCell>\n                            <StyledTableCell>{tx.to}</StyledTableCell>\n                            <StyledTableCell>{tx.date}</StyledTableCell>\n                          </TableRow>\n                        );\n                      })}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={txs.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n                style={{ color: 'white' }}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default NftIndividual;\n","/Users/anthonysiu/doko/DOKO/client/src/modules/core/Header/index.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/core/Intro/index.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/core/Footer/index.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/components/modal.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/store/app/appStateSlice.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/store/meta-nft-collections/profileOwnershipSlice.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/store/meta-nft-collections/addressOwnershipSlice.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/store/meta-nft-collections/collectionSummarySlice.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/types/index.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/libs/contract-service-api.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/constants/metaverses.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/components/Meta.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/core/Header/SmallScreen.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/core/Header/LargeScreen.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/libs/opensea-api.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/utils/utils.ts",["488"],"import { transform, isArray, camelCase, isDate, isObject, snakeCase } from 'lodash';\nimport { Asset } from '../store/meta-nft-collections/profileOwnershipSlice';\n\nexport const camelize = (obj: any) =>\n  transform(obj, (acc: any, value, key, target) => {\n    const camelKey = isArray(target) ? key : camelCase(key as string);\n    if (isDate(value)) {\n      acc[camelKey] = value;\n    } else if (isObject(value)) {\n      acc[camelKey] = camelize(value);\n    } else {\n      acc[camelKey] = value;\n    }\n  });\n\nexport const snakeize = (obj: any) =>\n  transform(obj, (acc: any, value, key, target) => {\n    const snakeKey = isArray(target) ? key : snakeCase(key as string);\n    if (isDate(value)) {\n      acc[snakeKey] = value;\n    } else if (isObject(value)) {\n      acc[snakeKey] = snakeize(value);\n    } else {\n      acc[snakeKey] = value;\n    }\n  });\n\nexport const getCoordinates = (metaverseName: string, asset: any): L.LatLngExpression => {\n  switch (metaverseName) {\n    case 'Cryptovoxels': {\n      const matchX = asset.image_original_url.match(/x=([+-]?([0-9]*[.])?[0-9]+)/);\n      const matchY = asset.image_original_url.match(/&y=([+-]?([0-9]*[.])?[0-9]+)/);\n      if (!matchX || !matchY) {\n        // to add error handler\n        return [0, 0];\n      }\n      return [parseFloat(matchY[1]), parseFloat(matchX[1])];\n    }\n    case 'Decentraland': {\n      const match = asset.image_original_url.match(\n        /parcels\\/([+-]?([0-9]*[.])?[0-9]+)\\/([+-]?([0-9]*[.])?[0-9]+)/,\n      );\n      if (!match) {\n        // to add error handler\n        return [0, 0];\n      }\n      return [parseFloat(match[3]) * 5, parseFloat(match[1]) * 5];\n    }\n    case 'The Sandbox': {\n      const matchX = asset.name.match(/\\(([+-]?([0-9]*[.])?[0-9]+)/);\n      const matchY = asset.name.match(/, ([+-]?([0-9]*[.])?[0-9]+)/);\n      if (!matchX || !matchY) {\n        // to add error handler\n        return [0, 0];\n      }\n      return [parseFloat(matchY[1]), parseFloat(matchX[1])];\n    }\n    case 'Somnium Space VR': {\n      const matchX = asset.description.match(/X = ([+-]?([0-9]*[.])?[0-9]+)/);\n      const matchY = asset.description.match(/Z = ([+-]?([0-9]*[.])?[0-9]+)/);\n      if (!matchX || !matchY) {\n        // to add error handler\n        return [0, 0];\n      }\n      return [(parseFloat(matchY[1]) + 202.167) / 23, (parseFloat(matchX[1]) - 576.433) / 22.7356];\n    }\n    default: {\n      return [NaN, NaN];\n    }\n  }\n};\n","/Users/anthonysiu/doko/DOKO/client/src/types/interfaces.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/types/enums.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/components/index.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/core/Header/HeaderUserButton.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/components/NftPagination.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/components/SectionLabel.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/libs/utils.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/libs/web3.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/components/NFTItem.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/components/LightButton.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/components/OpenseaNFTItem.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/components/SolanaNFTItem.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/components/TabPanel.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/components/RadiusInput.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/components/Popover.tsx",["489"],"import { Placement } from '@popperjs/core';\nimport { PropsWithChildren, useState } from 'react';\nimport { usePopper } from 'react-popper';\nimport styled from 'styled-components';\n\ninterface Props {\n  reference: any;\n  placement?: Placement;\n  style?: any;\n}\n\nconst Arrow = styled.div`\n  width: 0.6rem;\n  height: 0.6rem;\n\n  &::before {\n    content: '';\n    background: white;\n    width: 0.6rem;\n    height: 0.6rem;\n    transform: translate(-50%, -50%) rotate(45deg);\n    position: absolute;\n    border-radius: 2px;\n    top: 0;\n    left: 0;\n  }\n`;\n\nconst Wrapper = styled.div`\n  transition: visibility 150ms linear, opacity 150ms linear;\n  background: white;\n  border: 1px solid #ececec;\n  box-shadow: -1px 0px 10px 7px rgb(0 0 0 / 4%);\n  border-radius: 8px;\n  z-index: 999;\n\n  &[data-popper-placement^='right'] {\n    ${Arrow} {\n      left: 0px;\n    }\n  }\n\n  &[data-popper-placement^='left'] {\n    ${Arrow} {\n      right: 0px;\n    }\n  }\n\n  &[data-popper-placement^='top'] {\n    ${Arrow} {\n      bottom: 0px;\n    }\n  }\n\n  &[data-popper-placement^='bottom'] {\n    ${Arrow} {\n      top: 0px;\n    }\n  }\n`;\n\nexport const Popover = ({\n  children,\n  reference,\n  placement = 'bottom-start',\n  style,\n}: PropsWithChildren<Props>) => {\n  const [referenceElement, setReferenceElement] = useState<HTMLElement | null>(null);\n  const [arrowElement, setArrowElement] = useState<HTMLElement | null>(null);\n  const [popperElement, setPopperElement] = useState<HTMLDivElement | null>(null);\n  const { styles, attributes } = usePopper(referenceElement, popperElement, {\n    placement,\n    strategy: 'fixed',\n    modifiers: [\n      { name: 'offset', options: { offset: [0, 24] } },\n      {\n        name: 'arrow',\n        options: { element: arrowElement },\n      },\n    ],\n  });\n  const [show, setShow] = useState(false);\n  const [toggleTimeout, setToggleTimeout] = useState<any>();\n\n  const toggleShow = (shown: boolean) => {\n    if (shown) {\n      clearTimeout(toggleTimeout);\n      setShow(true);\n    } else {\n      clearTimeout(toggleTimeout);\n      setToggleTimeout(setTimeout(() => setShow(false), 200));\n    }\n  };\n\n  return (\n    <div style={style}>\n      <span\n        ref={setReferenceElement}\n        onMouseEnter={() => toggleShow(true)}\n        onMouseLeave={() => toggleShow(false)}\n      >\n        {reference}\n      </span>\n      <Wrapper\n        onMouseEnter={() => toggleShow(true)}\n        onMouseLeave={() => toggleShow(false)}\n        ref={setPopperElement}\n        style={{ ...styles.popper, visibility: show ? 'visible' : 'hidden', opacity: +show }}\n        {...attributes.popper}\n      >\n        {children}\n      </Wrapper>\n    </div>\n  );\n};\n\nexport default Popover;\n","/Users/anthonysiu/doko/DOKO/client/src/modules/api.ts",["490"],"import api from '../libs/api';\nimport { getTokenInfo } from '../libs/metaplex/utils';\n\nexport const getNFTs = (address: string, offset: number, params: any = {}) =>\n  api.get('/nfts', {\n    params: {\n      address,\n      offset,\n      ...params,\n    },\n  });\n\nexport const indexAddress = (address: string, reindex = false) =>\n  api.post('/nfts/index', {\n    address,\n    reindex,\n  });\n\nexport const getAddressStatus = (address: string) => api.get(`/address/${address}`);\n\nexport const getNFT = (address: string, id: string) => api.get(`/nft/${address}/${id}`);\n\nexport const fetchOpenseaEvents = (address: string, id: string, offset: number, limit: number) =>\n  api.get(`/nft/eth/events/${address}/${id}/${offset}/${limit}`);\n\nexport const fetchOpenseaLastSale = (address: string, id: string) =>\n  api.get(`/nft/eth/lastsale/${address}/${id}`);\n","/Users/anthonysiu/doko/DOKO/client/src/libs/moralis.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/components/PopoverShare.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/hooks/useProfileSummaries.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/meta-nft-individual/solanaTraits.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/meta-nft-individual/CopyAddress.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/meta-nft-individual/traits.tsx",["491","492"],"import { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport { Card, Grid, makeStyles, Typography } from '@material-ui/core';\n\ninterface NFtTraitsProps {\n  traits: any;\n  totalSupply: any;\n}\n\nconst useStyles = makeStyles(() => ({\n  traitFooter: {\n    marginTop: '1em',\n    textAlign: 'center',\n  },\n  traitCard: {\n    padding: '1em',\n    background: 'inherit',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    height: '125px',\n    maxHeight: '125px',\n    width: '100%',\n    borderRadius: '20px',\n    border: '1px solid white',\n    alignItems: 'center',\n    color: 'inherit',\n  },\n}));\n\nexport const GradientSVG = () => {\n  const color0 = '#ff06d7';\n  const color30 = '#ff06d7';\n  const color50 = '#505cb0';\n  const color80 = '#00ffef';\n  const color100 = '#00ffef';\n  const gradientTransform = 'rotate(-45)';\n  const idCSS = 'lingrad';\n\n  return (\n    <svg style={{ height: 0, width: 0 }}>\n      <defs>\n        <linearGradient id={idCSS} gradientTransform={gradientTransform}>\n          <stop offset=\"0%\" stopColor={color0} />\n          <stop offset=\"30%\" stopColor={color30} />\n          <stop offset=\"50%\" stopColor={color50} />\n          <stop offset=\"80%\" stopColor={color80} />\n          <stop offset=\"100%\" stopColor={color100} />\n        </linearGradient>\n      </defs>\n    </svg>\n  );\n};\nexport const NftTraits = ({ traits, totalSupply }: NFtTraitsProps) => {\n  const styles = useStyles();\n  return (\n    <Grid item container justifyContent=\"flex-start\" spacing={3}>\n      <GradientSVG />\n      {traits.map((trait: any, i: any) => (\n        <Grid item container lg={3} xl={3} md={4} sm={4} xs={6} key={trait.trait_type + i}>\n          <Card className={styles.traitCard}>\n            <div style={{ marginBottom: '1em' }}>\n              <Typography variant=\"body1\" style={{ fontWeight: 'bolder' }}>\n                {trait.trait_type}\n              </Typography>\n            </div>\n            <div className={styles.traitFooter}>\n              <Typography variant=\"body1\" style={{ fontWeight: 'bolder' }}>\n                {trait.value}\n              </Typography>\n            </div>\n          </Card>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-nft-individual/api.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/hooks/useAddressSummaries.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/components/OwnershipView.tsx",["493"],"import {\n  Grid,\n  Hidden,\n  makeStyles,\n  Tab,\n  Tabs,\n  Typography,\n  withStyles,\n  Button,\n  useMediaQuery,\n  Theme,\n} from '@material-ui/core';\nimport { useState, useContext, memo } from 'react';\nimport { TabPanel, NftPagination, OpenseaNFTItem } from '.';\nimport Summary from '../modules/nft-collections/Summary';\nimport SectionLabel from './SectionLabel';\nimport metaverses from '../constants/metaverses';\nimport { AggregatedSummary } from '../hooks/useProfileSummaries';\nimport ListIcon from '@material-ui/icons/FormatListBulleted';\nimport MapIcon from '@material-ui/icons/Map';\nimport { CreateProfileContext } from '../contexts/CreateProfileContext';\nimport RenderMaps from './maps/RenderMaps';\nimport { Asset } from '../store/meta-nft-collections/profileOwnershipSlice';\n\nconst useStyles = makeStyles(() => ({\n  createProfileButton: {\n    cursor: 'pointer',\n    right: '4%',\n    width: 162,\n    height: 46,\n    zIndex: 999,\n    position: 'absolute',\n  },\n  totalSummary: {\n    width: '345px',\n    height: '99px',\n    left: '467px',\n    top: '502px',\n    background: 'rgba(255,255,255,0.25)',\n    borderRadius: '15px',\n    marginBottom: '24px',\n  },\n  summaryLeftDiv: {\n    width: '40px',\n    height: '99px',\n    left: '507px',\n    top: '601px',\n    background: '#FF06D7',\n    borderRadius: '0px 15px 15px 0px',\n    transform: 'rotate(-180deg)',\n  },\n  chainInfo: {\n    marginLeft: 48,\n  },\n  viewButton: {\n    marginRight: '0.5rem',\n    cursor: 'pointer',\n    width: '81.73px',\n    height: '24px',\n    left: '705px',\n    top: '1560px',\n    border: '1px solid rgba(255, 255, 255, 0.25)',\n    boxSizing: 'border-box',\n    borderRadius: '6px',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  viewButtonMobile: {\n    padding: '0.3rem',\n    marginLeft: '12px',\n    boxSizing: 'border-box',\n    border: '1px solid rgba(255, 255, 255, 0.25)',\n    borderRadius: '6px',\n    width: '5rem',\n    display: 'flex',\n    height: '2rem',\n    alignItems: 'center',\n  },\n  viewButtonIcon: {\n    width: '1.3rem',\n    height: '1.3rem',\n    display: 'flex',\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: '5px',\n  },\n  viewTypography: {\n    fontFamily: 'Open Sans',\n    fontStyle: 'normal',\n    fontWeight: 'bold',\n    fontSize: '10px',\n    lineHeight: '14px',\n  },\n}));\n\nconst CustomTabs = withStyles({\n  root: {\n    width: '100%',\n  },\n  flexContainer: {\n    borderBottom: '2px solid #46324a',\n  },\n})(Tabs);\n\nconst CustomTab = withStyles({\n  wrapper: {\n    textTransform: 'none',\n  },\n})(Tab);\n\nconst ChainContainer = withStyles(() => ({\n  root: {\n    padding: '10px 30px 24px',\n    marginTop: 10,\n  },\n}))(Grid);\n\ninterface IOwnershipView {\n  metaverseSummaries: AggregatedSummary[];\n}\n\nconst OwnershipView = ({ metaverseSummaries }: IOwnershipView) => {\n  const { openProfileModal } = useContext(CreateProfileContext);\n  const [tabValue, setTabValue] = useState(0);\n  const styles = useStyles();\n  const views = metaverses.map(() => useState('list'));\n  const smOrAbove = useMediaQuery((theme: Theme) => theme.breakpoints.up('sm'));\n  const paginations = metaverses.map(() => useState(1));\n  const [collectionAssetSelected, setCollectionAssetSelected] = useState<Array<number | null>>(\n    metaverses.map((_) => null),\n  );\n\n  const handleClickOpen = () => {\n    openProfileModal();\n  };\n\n  const onAssetClick = (collectionIndex: number, index: number) => {\n    const copy = collectionAssetSelected.slice();\n    copy[collectionIndex] = index;\n    setCollectionAssetSelected(copy);\n  };\n\n  interface IRenderAssets {\n    assets: Asset[];\n    metaverseIndex: number;\n  }\n  const RenderAssets = memo(({ assets, metaverseIndex }: IRenderAssets) => {\n    return (\n      <>\n        {assets.length ? (\n          assets.map((nft, nftIndex) => (\n            <Grid key={nft.id} item xs={6} style={{ maxHeight: 400 }}>\n              <OpenseaNFTItem\n                key={nft.id}\n                nft={nft}\n                onClick={() => onAssetClick(metaverseIndex, nftIndex)}\n              />\n            </Grid>\n          ))\n        ) : (\n          <Typography style={{ marginLeft: 24 }}>No Items</Typography>\n        )}\n      </>\n    );\n  });\n\n  return (\n    <>\n      <Grid item style={{ width: '100%' }}>\n        <Hidden xsDown>\n          <Button className={styles.createProfileButton} onClick={handleClickOpen}>\n            <img src=\"/createProfileButton.png\" alt=\"Create Profile\" />\n          </Button>\n        </Hidden>\n        <CustomTabs\n          style={{ marginTop: 12 }}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          value={tabValue}\n          onChange={(event, newValue) => setTabValue(newValue)}\n        >\n          <CustomTab style={{ fontWeight: 'bolder' }} label=\"Portfolio\" value={0} />\n        </CustomTabs>\n      </Grid>\n      <TabPanel index={0} value={tabValue}>\n        <Grid className={styles.totalSummary} container direction=\"row\">\n          <Grid className={styles.summaryLeftDiv} />\n          <Grid>\n            <ChainContainer container wrap=\"nowrap\" style={{ flex: 1 }}>\n              <Grid item>\n                <Typography style={{ fontSize: 14 }}>Total Parcels</Typography>\n                <Typography style={{ fontSize: 18, fontWeight: 700 }}>\n                  {metaverseSummaries.reduce(\n                    (count, collection) => count + collection.ownership.length,\n                    0,\n                  )}\n                </Typography>\n              </Grid>\n              <Grid item className={styles.chainInfo}>\n                <Typography style={{ fontSize: 14 }}>Total Floor Price</Typography>\n                <Grid container alignItems=\"center\">\n                  <img\n                    style={{ marginRight: 8 }}\n                    src=\"/collection/DOKOasset_EthereumBlue.png\"\n                    width={10}\n                    alt=\"ETH\"\n                  />\n                  <Typography style={{ fontSize: 18, fontWeight: 700 }}>\n                    {metaverseSummaries\n                      .reduce((floorPrice, collection) => floorPrice + collection.price, 0)\n                      .toFixed(3)}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </ChainContainer>\n          </Grid>\n        </Grid>\n        <Summary data={{ summary: metaverseSummaries }} />\n        {metaverseSummaries.map((metaverse, metaverseIndex) => {\n          const [page, setPage] = paginations[metaverseIndex];\n          const [view, setView] = views[metaverseIndex];\n          return (\n            <div key={metaverse.name} style={{ marginBottom: '3rem' }}>\n              <Grid\n                container\n                direction={smOrAbove ? 'row' : 'column'}\n                alignItems={smOrAbove ? 'center' : 'flex-start'}\n                spacing={3}\n                style={{ marginBottom: '0.5rem' }}\n              >\n                <Grid item>\n                  <SectionLabel variant=\"h5\">{metaverse.name}</SectionLabel>\n                </Grid>\n                {smOrAbove ? (\n                  <>\n                    <span\n                      className={styles.viewButton}\n                      onClick={() => setView('list')}\n                      aria-hidden=\"true\"\n                      style={view === 'list' ? { background: 'rgba(255, 255, 255, 0.25)' } : {}}\n                    >\n                      <ListIcon style={{ fill: '#FFFFFF', fontSize: '14px', margin: '3px' }} />\n                      <Typography className={styles.viewTypography}>List View</Typography>\n                    </span>\n\n                    <span\n                      className={styles.viewButton}\n                      onClick={() => setView('map')}\n                      aria-hidden=\"true\"\n                      style={view === 'map' ? { background: 'rgba(255, 255, 255, 0.25)' } : {}}\n                    >\n                      <MapIcon style={{ fill: '#FFFFFF', fontSize: '14px', margin: '3px' }} />\n                      <Typography className={styles.viewTypography}>Map View</Typography>\n                    </span>\n                  </>\n                ) : (\n                  <div className={styles.viewButtonMobile}>\n                    <span\n                      onClick={() => setView('list')}\n                      aria-hidden=\"true\"\n                      className={styles.viewButtonIcon}\n                      style={view === 'list' ? { background: 'rgba(255, 255, 255, 0.25)' } : {}}\n                    >\n                      <ListIcon style={{ fill: '#FFFFFF', fontSize: '17px' }} />\n                    </span>\n                    <span\n                      onClick={() => setView('map')}\n                      aria-hidden=\"true\"\n                      className={styles.viewButtonIcon}\n                      style={view === 'map' ? { background: 'rgba(255, 255, 255, 0.25)' } : {}}\n                    >\n                      <MapIcon style={{ fill: '#FFFFFF', fontSize: '17px' }} />\n                    </span>\n                  </div>\n                )}\n              </Grid>\n\n              <div\n                key={`${metaverse.name}listview`}\n                style={view === 'list' ? {} : { display: 'none' }}\n              >\n                <NftPagination\n                  loading={metaverse.loading}\n                  isOpenSea\n                  nfts={metaverse.ownership.slice((page - 1) * 4, page * 4)}\n                  page={page}\n                  maxPage={Math.ceil(metaverse.ownership.length / 4)}\n                  onNext={() => setPage(page + 1)}\n                  onPrev={() => setPage(page - 1)}\n                />\n              </div>\n              <div\n                id={`${metaverse.name}mapview`}\n                style={view === 'map' ? {} : { display: 'none' }}\n              >\n                {smOrAbove ? (\n                  <Grid container spacing={1}>\n                    <Grid item xs={5}>\n                      <Grid container spacing={1} style={{ height: 600, overflowY: 'scroll' }}>\n                        <RenderAssets\n                          assets={metaverse.ownership}\n                          metaverseIndex={metaverseIndex}\n                        />\n                      </Grid>\n                    </Grid>\n                    <Grid item xs={7} id=\"map\">\n                      <RenderMaps\n                        assets={metaverse.ownership}\n                        metaverseName={metaverse.name}\n                        assetsSelected={collectionAssetSelected}\n                      />\n                    </Grid>\n                  </Grid>\n                ) : (\n                  <Grid direction=\"column-reverse\" container spacing={1}>\n                    <Grid item>\n                      <Grid\n                        direction=\"column\"\n                        container\n                        style={{ height: 300, overflowX: 'scroll', width: '100%' }}\n                      >\n                        <RenderAssets\n                          assets={metaverse.ownership}\n                          metaverseIndex={metaverseIndex}\n                        />\n                      </Grid>\n                    </Grid>\n                    <Grid item id=\"map\" style={{ height: 300, marginBottom: '4px' }}>\n                      <RenderMaps\n                        assets={metaverse.ownership}\n                        metaverseName={metaverse.name}\n                        assetsSelected={collectionAssetSelected}\n                      />\n                    </Grid>\n                  </Grid>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </TabPanel>\n    </>\n  );\n};\n\nexport default memo(OwnershipView);\n","/Users/anthonysiu/doko/DOKO/client/src/libs/solana.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/collection/api.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/meta-profiles/ProfileItem.tsx",["494","495","496"],"import { memo, MouseEvent, SyntheticEvent, useState, useEffect, useRef } from 'react';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport 'react-lazy-load-image-component/src/effects/opacity.css';\nimport {\n  Grid,\n  IconButton,\n  Button,\n  makeStyles,\n  Typography,\n  Menu,\n  MenuItem,\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/MoreVert';\nimport { useHistory } from 'react-router-dom';\nimport { useCookies } from 'react-cookie';\n\nimport Address from './Address';\n\ninterface ProfileItemProps {\n  profile: any;\n  onClickEdit: any;\n  onClickDelete: any;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    border: '2px solid rgba(255, 255, 255, 0.5)',\n    boxSizing: 'border-box',\n    borderRadius: '15px',\n    aspectRatio: '1.08',\n    [theme.breakpoints.down('sm')]: {\n      aspectRatio: '1.28',\n    },\n  },\n  options: {\n    width: 140,\n    '&:hover': {\n      background: theme.palette.primary.main,\n      color: 'white',\n    },\n  },\n}));\n\nexport const ProfileItem = memo(({ profile, onClickEdit, onClickDelete }: ProfileItemProps) => {\n  const styles = useStyles();\n  const history = useHistory();\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);\n  const titleRef = useRef<any>(null);\n\n  const [titleLength, setTitleLength] = useState(11);\n  const [cookies, setCookie, removeCookie] = useCookies(['profiles']);\n\n  useEffect(() => {\n    function handleResize() {\n      const width = titleRef.current.clientWidth;\n      if (width < 270) {\n        setTitleLength(7);\n      } else if (width < 300) {\n        setTitleLength(8);\n      } else if (width < 360) {\n        setTitleLength(11);\n      } else if (width < 400) {\n        setTitleLength(13);\n      } else {\n        setTitleLength(15);\n      }\n    }\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  });\n\n  const shortenName = (name: string) => {\n    if (name.length > titleLength) {\n      return `${name.substr(0, titleLength - 1)}...`;\n    }\n    return name;\n  };\n\n  const handleClick = (event: MouseEvent<HTMLElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = (e: SyntheticEvent) => {\n    e.stopPropagation();\n    setAnchorEl(null);\n  };\n\n  return (\n    <Grid item xs={12} sm={6} lg={4} style={{ minWidth: '25vw' }}>\n      <Grid className={styles.card}>\n        <Grid\n          container\n          direction=\"row\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          style={{ height: '20%', paddingLeft: 19 }}\n          ref={titleRef}\n        >\n          <Typography\n            variant=\"h5\"\n            style={{ fontWeight: 'bold', fontSize: '20px', lineHeight: '33px' }}\n          >\n            {`${shortenName(profile)} (${cookies.profiles[profile].address.length})`}\n          </Typography>\n          <div>\n            <Button\n              className=\"gradient-button\"\n              variant=\"outlined\"\n              style={{ fontSize: 12, lineHeight: '16px' }}\n              onClick={() => {\n                history.push(`/profiles/${cookies.profiles[profile].hash}`);\n              }}\n            >\n              View\n            </Button>\n            <IconButton onClick={handleClick}>\n              <MenuIcon style={{ fill: '#FFFFFF' }} />\n            </IconButton>\n            <Menu\n              anchorEl={anchorEl}\n              open={Boolean(anchorEl)}\n              onClose={handleClose}\n              getContentAnchorEl={null}\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n              transformOrigin={{ vertical: 'top', horizontal: 'center' }}\n            >\n              <MenuItem\n                className={styles.options}\n                onClick={(e) => {\n                  navigator.clipboard.writeText(\n                    `https://doko.one/profiles/$${cookies.profiles[profile].hash}`,\n                  );\n                  handleClose(e);\n                }}\n              >\n                Copy URL\n              </MenuItem>\n              <MenuItem\n                className={styles.options}\n                onClick={(e) => {\n                  onClickEdit();\n                  handleClose(e);\n                }}\n              >\n                Edit\n              </MenuItem>\n              <MenuItem\n                className={styles.options}\n                onClick={(e) => {\n                  onClickDelete();\n                  handleClose(e);\n                }}\n              >\n                Delete\n              </MenuItem>\n            </Menu>\n          </div>\n        </Grid>\n        <hr\n          style={{\n            border: 'none',\n            backgroundColor: 'rgba(255, 255, 255, 0.5)',\n            height: '1px',\n            width: '100%',\n            margin: 0,\n          }}\n        />\n\n        {cookies.profiles[profile].address.length ? (\n          <Grid\n            container\n            direction=\"column\"\n            alignItems=\"center\"\n            style={{ height: '80%' }}\n            wrap=\"nowrap\"\n          >\n            {cookies.profiles[profile].address.map((address: any) => (\n              <Address address={address} />\n            ))}\n          </Grid>\n        ) : (\n          <Grid container alignItems=\"center\" justifyContent=\"center\" style={{ height: '80%' }}>\n            <Typography style={{ fontFamily: 'Open Sans', fontSize: '21px' }}>\n              No addresses found\n            </Typography>\n          </Grid>\n        )}\n      </Grid>\n    </Grid>\n  );\n});\n\nexport default ProfileItem;\n","/Users/anthonysiu/doko/DOKO/client/src/components/CopyAddress.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/collection/components/CollectionTab.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/collection/components/CollectionHeader.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/collection/components/NftData.tsx",["497","498","499","500","501"],"import { Container, Grid, makeStyles, Theme, Typography } from '@material-ui/core';\nimport { HeadCell } from '../../../components/EnhancedTable';\nimport { shortenAddress } from '../../../libs/utils';\n\n// mock data\nconst ogFollowing = [\n  {\n    icon: '/meebits.png',\n    name: 'CryptoPunks',\n    owners: '10 owners 2% supply',\n  },\n  {\n    icon: '/meebits.png',\n    name: 'CryptoPunks',\n    owners: '10 owners 2% supply',\n  },\n  {\n    icon: '/meebits.png',\n    name: 'CryptoPunks',\n    owners: '10 owners 2% supply',\n  },\n  {\n    icon: '/meebits.png',\n    name: 'CryptoPunks',\n    owners: '10 owners 2% supply',\n  },\n  {\n    icon: '/meebits.png',\n    name: 'CryptoPunks',\n    owners: '10 owners 2% supply',\n  },\n  {\n    icon: '/meebits.png',\n    name: 'CryptoPunks',\n    owners: '10 owners 2% supply',\n  },\n];\n\nfunction createData(\n  from: string,\n  to: string,\n  token: string,\n  price: number,\n  datetime: Date,\n  link: string,\n) {\n  return {\n    from,\n    to,\n    token,\n    price,\n    datetime,\n    link,\n  };\n}\n\nconst rows = [\n  createData(\n    shortenAddress('0x2ca4570ff0cba9655e4cad7d3dbab7600958b336'),\n    shortenAddress('0x93053e20ffaa4be1d15c114c21ce0881e7fe0cf3'),\n    '#091',\n    0.381,\n    new Date(),\n    'https://etherscan.io/tx/0x765941839372dd35a612fe5bf1d05e761d16541aec26c47f588eb78e4def2f54',\n  ),\n  createData(\n    shortenAddress('0x8d4daba34c92e581f928fca40e018382f7a0282a'),\n    shortenAddress('0xd736900ce5669293e16029e9bfc89b0b8ba19ac0'),\n    '#092',\n    0.288,\n    new Date('2021-09-03'),\n    'https://etherscan.io/tx/0x765941839372dd35a612fe5bf1d05e761d16541aec26c47f588eb78e4def2f54',\n  ),\n  createData(\n    shortenAddress('0x48c04ed5691981c42154c6167398f95e8f38a7ff'),\n    shortenAddress('0x4e15361fd6b4bb609fa63c81a2be19d873717870'),\n    '#094',\n    0.488,\n    new Date('2021-07-05'),\n    'https://etherscan.io/tx/0x765941839372dd35a612fe5bf1d05e761d16541aec26c47f588eb78e4def2f54',\n  ),\n  createData(\n    shortenAddress('0xc58bb74606b73c5043b75d7aa25ebe1d5d4e7c72'),\n    shortenAddress('0xdac17f958d2ee523a2206206994597c13d831ec7'),\n    '#104',\n    0.211,\n    new Date('2019-04-30'),\n    'https://etherscan.io/tx/0x765941839372dd35a612fe5bf1d05e761d16541aec26c47f588eb78e4def2f54',\n  ),\n  createData(\n    shortenAddress('0x4e5b2e1dc63f6b91cb6cd759936495434c7e972f'),\n    shortenAddress('0x8d8b971126f10bae9988100a40434022860695e1'),\n    '#392',\n    0.699,\n    new Date('2014-11-02'),\n    'https://etherscan.io/tx/0x765941839372dd35a612fe5bf1d05e761d16541aec26c47f588eb78e4def2f54',\n  ),\n  createData(\n    shortenAddress('0xfcc21cd45758e504544cd3bb1fd9a8185bcc1070'),\n    shortenAddress('0xdac17f958d2ee523a2206206994597c13d831ec7'),\n    '#003',\n    0.123,\n    new Date('2020-05-01'),\n    'https://etherscan.io/tx/0x765941839372dd35a612fe5bf1d05e761d16541aec26c47f588eb78e4def2f54',\n  ),\n  createData(\n    shortenAddress('0x7360401dc9c1c1e2e45e2929255ee0b276b9ab51'),\n    shortenAddress('0xda816e2122a8a39b0926bfa84edd3d42477e9efd'),\n    '#049',\n    1.381,\n    new Date('1990-09-18'),\n    'https://etherscan.io/tx/0x765941839372dd35a612fe5bf1d05e761d16541aec26c47f588eb78e4def2f54',\n  ),\n  createData(\n    shortenAddress('0x2ca4570ff0cba9655e4cad7d3dbab7600958b336'),\n    shortenAddress('0x93053e20ffaa4be1d15c114c21ce0881e7fe0cf3'),\n    '#091',\n    0.381,\n    new Date(),\n    'https://etherscan.io/tx/0x765941839372dd35a612fe5bf1d05e761d16541aec26c47f588eb78e4def2f54',\n  ),\n  createData(\n    shortenAddress('0x8d4daba34c92e581f928fca40e018382f7a0282a'),\n    shortenAddress('0xd736900ce5669293e16029e9bfc89b0b8ba19ac0'),\n    '#092',\n    0.288,\n    new Date('2019-08-21'),\n    'https://etherscan.io/tx/0x765941839372dd35a612fe5bf1d05e761d16541aec26c47f588eb78e4def2f54',\n  ),\n  createData(\n    shortenAddress('0x48c04ed5691981c42154c6167398f95e8f38a7ff'),\n    shortenAddress('0x4e15361fd6b4bb609fa63c81a2be19d873717870'),\n    '#094',\n    0.488,\n    new Date('2017-03-23'),\n    'https://etherscan.io/tx/0x765941839372dd35a612fe5bf1d05e761d16541aec26c47f588eb78e4def2f54',\n  ),\n  createData(\n    shortenAddress('0xc58bb74606b73c5043b75d7aa25ebe1d5d4e7c72'),\n    shortenAddress('0xdac17f958d2ee523a2206206994597c13d831ec7'),\n    '#104',\n    0.211,\n    new Date('2019-04-30'),\n    'https://etherscan.io/tx/0x765941839372dd35a612fe5bf1d05e761d16541aec26c47f588eb78e4def2f54',\n  ),\n  createData(\n    shortenAddress('0x4e5b2e1dc63f6b91cb6cd759936495434c7e972f'),\n    shortenAddress('0x8d8b971126f10bae9988100a40434022860695e1'),\n    '#392',\n    0.699,\n    new Date('2014-11-02'),\n    'https://etherscan.io/tx/0x765941839372dd35a612fe5bf1d05e761d16541aec26c47f588eb78e4def2f54',\n  ),\n  createData(\n    shortenAddress('0xfcc21cd45758e504544cd3bb1fd9a8185bcc1070'),\n    shortenAddress('0xdac17f958d2ee523a2206206994597c13d831ec7'),\n    '#003',\n    0.123,\n    new Date('2020-05-01'),\n    'https://etherscan.io/tx/0x765941839372dd35a612fe5bf1d05e761d16541aec26c47f588eb78e4def2f54',\n  ),\n  createData(\n    shortenAddress('0x7360401dc9c1c1e2e45e2929255ee0b276b9ab51'),\n    shortenAddress('0xda816e2122a8a39b0926bfa84edd3d42477e9efd'),\n    '#049',\n    1.381,\n    new Date('1990-09-18'),\n    'https://etherscan.io/tx/0x765941839372dd35a612fe5bf1d05e761d16541aec26c47f588eb78e4def2f54',\n  ),\n];\n\n// const highPriceData = [\n//   {\n//     price: 50,\n//     timestamp:\n//   }\n// ]\n\nconst charts = [\n  {\n    title: 'Price Range',\n    data: [\n      {\n        label: 'series1',\n        data: [50, 40, 28, 51, 42, 109, 100],\n      },\n      {\n        label: 'series2',\n        data: [11, 32, 45, 32, 34, 52, 41],\n      },\n    ],\n  },\n  {\n    title: 'Total Volume',\n    data: [\n      {\n        label: 'series1',\n        data: [31, 40, 28, 51, 42, 109, 100],\n      },\n    ],\n  },\n  {\n    title: 'Transactions',\n    data: [\n      {\n        label: 'series1',\n        data: [31, 40, 28, 51, 42, 109, 100],\n      },\n    ],\n  },\n];\n\nconst headCells: readonly HeadCell[] = [\n  {\n    id: 'from',\n    numeric: false,\n    label: 'From',\n  },\n  {\n    id: 'to',\n    numeric: false,\n    label: 'To',\n  },\n  {\n    id: 'token',\n    numeric: false,\n    label: 'Token',\n  },\n  {\n    id: 'price',\n    numeric: true,\n    label: 'Price',\n  },\n  {\n    id: 'datetime',\n    numeric: false,\n    label: 'Date',\n  },\n  {\n    id: 'link',\n    numeric: false,\n    label: 'Links',\n  },\n];\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  container: {\n    padding: '3rem',\n    paddingRight: 0,\n    [theme.breakpoints.down('sm')]: {\n      paddingLeft: 0,\n    },\n  },\n  headerBanner: {\n    height: '30vh',\n    backgroundColor: 'white',\n  },\n  headerBar: {\n    padding: '2rem 0 2rem 0',\n    backgroundColor: 'black',\n    color: 'white',\n  },\n  dataContainer: {\n    border: 'white solid 1px',\n    padding: '2rem',\n    borderRadius: '10px',\n  },\n  dataContainerTitle: { fontWeight: 600, marginRight: '1rem', color: theme.palette.grey[400] },\n  dataContainerData: { fontWeight: 700, marginRight: '1rem', color: theme.palette.primary.main },\n  dataEthPrice: { fontWeight: 700, marginRight: '1rem', color: 'white' },\n  section: { marginBottom: '5rem' },\n  sectionTitle: { fontWeight: 700, marginBottom: '2rem' },\n  ogDataContainer: { display: 'flex', alignItems: 'center', flexDirection: 'column' },\n\n  ogInfoContainer: { display: 'flex', alignItems: 'center', marginBottom: '1rem' },\n  ogInfoData: { fontWeight: 700, color: theme.palette.secondary.main },\n  daysFilter: {\n    padding: '0.4rem 0.7rem',\n    width: '3.5rem',\n    borderRadius: '4px',\n    border: 'solid 2px',\n    marginLeft: '0.5rem',\n    borderColor: theme.palette.grey[700],\n    display: 'flex',\n    justifyContent: 'center',\n  },\n}));\n\ninterface Props {\n  collection: any;\n}\n\nconst NftData = ({ collection }: Props) => {\n  const classes = useStyles();\n  const toFixed = (value: string) => parseFloat(`${value}`).toFixed(3);\n\n  return (\n    <div className={classes.container}>\n      {/* data */}\n      <div className={classes.section}>\n        <Grid\n          container\n          spacing={4}\n          style={{ marginBottom: '2rem' }}\n          justifyContent=\"center\"\n          alignItems=\"stretch\"\n        >\n          <Grid item xs={12} md={6} lg={4} xl={3}>\n            <div className={classes.dataContainer}>\n              <Typography variant=\"body1\" className={classes.dataContainerTitle}>\n                Transactions in last 24h\n              </Typography>\n              <Typography variant=\"h5\" className={classes.dataContainerData}>\n                {collection.stats.one_day_sales}\n              </Typography>\n            </div>\n          </Grid>\n          <Grid item xs={12} md={6} lg={4} xl={3}>\n            <div className={classes.dataContainer}>\n              <Typography variant=\"body1\" className={classes.dataContainerTitle}>\n                Volume in last 24h\n              </Typography>\n              <Grid container alignItems=\"center\">\n                <img\n                  style={{ marginRight: 8 }}\n                  height={24}\n                  src=\"/collection/DOKOasset_EthereumBlue.png\"\n                  alt=\"\"\n                />\n                <Typography display=\"inline\" variant=\"h5\" className={classes.dataContainerData}>\n                  {toFixed(collection.stats.one_day_volume)}\n                </Typography>\n              </Grid>\n            </div>\n          </Grid>\n          <Grid item xs={12} md={6} lg={4} xl={3}>\n            <div className={classes.dataContainer}>\n              <Typography variant=\"body1\" className={classes.dataContainerTitle}>\n                Average price in last 24h\n              </Typography>\n              <Grid container alignItems=\"center\">\n                <img\n                  style={{ marginRight: 8 }}\n                  height={24}\n                  src=\"/collection/DOKOasset_EthereumBlue.png\"\n                  alt=\"\"\n                />\n                <Typography display=\"inline\" variant=\"h5\" className={classes.dataContainerData}>\n                  {toFixed(collection.stats.one_day_average_price)}\n                </Typography>\n              </Grid>\n            </div>\n          </Grid>\n        </Grid>\n        {/* charts */}\n        {/* <div className={classes.section}>\n              <Grid container spacing={4}>\n                {charts.map(chart => (\n                  <Grid key={chart.title} item xs={4}>\n                    <LineChart height={300} title={chart.title} data={chart.data}/>\n                  </Grid>\n                ))}\n              </Grid>\n            </div> */}\n      </div>\n      <div style={{ margin: 36 }}>\n        <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n          <div>\n            <img src=\"/DOKO_Lockup.png\" height={40} alt=\"\" style={{ marginBottom: '2rem' }} />\n          </div>\n\n          <Typography variant=\"h4\" style={{ textAlign: 'center', marginTop: 64 }}>\n            MORE FEATURES ARE\n          </Typography>\n          <Typography variant=\"h3\" style={{ textAlign: 'center', marginTop: 24, fontWeight: 600 }}>\n            COMING SOON\n          </Typography>\n        </div>\n      </div>\n\n      {/* <div className={classes.section}>\n            <Typography variant=\"h5\" className={classes.sectionTitle}>\n              OG Following\n            </Typography>\n            <Grid container spacing={4}>\n              {ogFollowing.map(og => (\n                <Grid key={og.name} item xs={4}>\n                  <div className={`${classes.dataContainer} ${classes.ogDataContainer}`}>\n                    <div className={classes.ogInfoContainer}>\n                      <img height={30} src={og.icon} alt=\"\" style={{ marginRight: '1rem' }} />\n                      <Typography variant=\"body1\" className={classes.dataContainerTitle}>\n                        {og.name}\n                      </Typography>\n                    </div>\n                    <Typography variant=\"h6\" className={classes.ogInfoData}>\n                      {og.owners}\n                    </Typography>\n                  </div>\n                </Grid>\n              ))}\n            </Grid>\n          </div>\n          <div className={classes.section}>\n            <EnhancedTable\n              tableTitle=\"Transaction History\"\n              rows={rows}\n              headCells={headCells}\n              unsortableHeaderIds={['link']}\n              priceHeaderIds={['price']}\n              dateFilterHeaderId=\"datetime\"\n            />\n          </div> */}\n    </div>\n  );\n};\n\nexport default NftData;\n","/Users/anthonysiu/doko/DOKO/client/src/modules/profile-page/Summary.tsx",["502","503","504","505","506","507","508","509","510","511","512"],"import { useEffect, useState } from 'react';\nimport { Grid, Typography, withStyles, makeStyles, CircularProgress } from '@material-ui/core';\n\nimport ethIcon from './assets/eth.png';\nimport bscIcon from './assets/bsc.png';\nimport polygonIcon from './assets/polygon.png';\nimport solanaIcon from './assets/solana.png';\nimport { getAllEthAssets, getFloorPrice, getNFTsCount } from './api';\nimport { getSolNftsCount } from '../../libs/solana';\nimport { isSolAddress } from '../../libs/utils';\nimport SectionLabel from '../../components/SectionLabel';\n\nconst ChainContainer = withStyles((theme) => ({\n  root: {\n    padding: '28px 30px 24px',\n    borderRadius: 15,\n    border: '2px solid white',\n    marginTop: 10,\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column',\n    },\n  },\n}))(Grid);\n\nconst useStyles = makeStyles((theme) => ({\n  chainInfo: {\n    marginLeft: 48,\n    [theme.breakpoints.down('sm')]: {\n      marginLeft: 0,\n      marginTop: 12,\n    },\n  },\n}));\n\ninterface Props {\n  data: any;\n}\n\nexport const Summary = ({ data }: Props) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <SectionLabel variant=\"h5\" gutterBottom>\n        Summary\n      </SectionLabel>\n      <Grid style={{ marginTop: 32, marginBottom: 64 }} container spacing={2}>\n        {data.summary.map((item: any) => (\n          <Grid item key={item.name} xs={12} sm={6} lg={3}>\n            <Grid container direction=\"column\" style={{ height: '100%' }}>\n              <Grid container alignItems=\"center\">\n                <img width={30} src={item.icon} alt={item.name} style={{ borderRadius: '50%' }} />\n                <Typography\n                  style={{ marginLeft: 12, fontWeight: 700, fontSize: 14 }}\n                  component=\"strong\"\n                >\n                  {item.name}\n                </Typography>\n              </Grid>\n              <ChainContainer container wrap=\"nowrap\" style={{ flex: 1 }}>\n                <Grid item>\n                  <Typography style={{ fontSize: 14 }}>Total NFTs</Typography>\n                  <Typography style={{ fontSize: 18, fontWeight: 700 }}>{item.count}</Typography>\n                </Grid>\n                <Grid item className={classes.chainInfo}>\n                  <Typography style={{ fontSize: 14 }}>Total Floor Price</Typography>\n                  <Typography\n                    component=\"div\"\n                    style={{ fontSize: 18, fontWeight: 700, opacity: item.available ? 1 : 0.5 }}\n                  >\n                    {item.available ? (\n                      <Grid container alignItems=\"center\">\n                        <img\n                          style={{ marginRight: 8 }}\n                          src=\"/collection/DOKOasset_EthereumBlue.png\"\n                          width={10}\n                          alt=\"ETH\"\n                        />\n                        {parseFloat(`${item.price}`).toFixed(3)}\n                      </Grid>\n                    ) : (\n                      'Coming Soon'\n                    )}\n                  </Typography>\n                  {item.loading && <CircularProgress />}\n                </Grid>\n              </ChainContainer>\n            </Grid>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n};\n\nexport default Summary;\n","/Users/anthonysiu/doko/DOKO/client/src/modules/profile-page/EthNfts.tsx",["513","514","515","516"],"import { useEffect, useState } from 'react';\nimport SelectSearch from 'react-select-search';\nimport { Grid } from '@material-ui/core';\n\nimport { NftPagination } from '../../components';\nimport SectionLabel from '../../components/SectionLabel';\nimport { getEthAssets, getEthCollections } from './api';\nimport { isSolAddress } from '../../libs/utils';\n\nimport './select-search.css';\nimport NftCollections from '../nft-collections';\n\ninterface Props {\n  data: any;\n}\n\nexport default function EthNfts({ data }: Props) {\n  const [nfts, setNfts] = useState<any>([]);\n  const [page, setPage] = useState(1);\n  const [collections, setCollections] = useState([]);\n  const [selectedCollection, setSelectedCollection] = useState('');\n\n  useEffect(() => {\n    setNfts(data.nfts);\n    setCollections(data.collections);\n  }, [data]);\n\n  const filterCollection = (v: any) => {\n    setSelectedCollection(v);\n    if (v === '') {\n      setNfts(data.nfts);\n    } else {\n      const result: any = data.nfts.filter((n) => n.collection.name === v);\n      setNfts([...result]);\n    }\n  };\n\n  const filterSearch = () => (query: string) => {\n    if (!query) {\n      return [{ value: '', name: 'All' }, ...data.collections];\n    }\n    return collections.filter((c: any) => c.name.toLowerCase().includes(query.toLowerCase()));\n  };\n\n  return (\n    <div>\n      <Grid\n        container\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        style={{ marginBottom: 36 }}\n      >\n        <SectionLabel variant=\"h5\">Ethereum NFTs</SectionLabel>\n        <SelectSearch\n          placeholder=\"Select a collection\"\n          closeOnSelect\n          search\n          options={[{ value: '', name: 'All' }, ...collections]}\n          value={selectedCollection}\n          onChange={filterCollection}\n          filterOptions={filterSearch}\n        />\n      </Grid>\n      <NftPagination\n        isOpenSea\n        loading={data.loading}\n        nfts={nfts.slice((page - 1) * 12, page * 12)}\n        page={page}\n        maxPage={Math.floor(nfts.length / 12) + 1}\n        onNext={() => setPage(page + 1)}\n        onPrev={() => setPage(page - 1)}\n      />\n    </div>\n  );\n}\n","/Users/anthonysiu/doko/DOKO/client/src/modules/profile-page/SolNfts.tsx",["517","518","519","520","521"],"import { useEffect, useState } from 'react';\nimport { NftPagination } from '../../components';\nimport SectionLabel from '../../components/SectionLabel';\nimport { getSolNfts } from '../../libs/solana';\nimport { isSolAddress } from '../../libs/utils';\n\ninterface Props {\n  data: any;\n}\n\nexport default function SolNfts({ data }: Props) {\n  const [nfts, setNfts] = useState([]);\n  const [page, setPage] = useState(1);\n  const [collections, setCollections] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setNfts(data.nfts);\n    setCollections(data.collections);\n  }, [data]);\n\n  return (\n    <div style={{ marginTop: 36 }}>\n      <SectionLabel variant=\"h5\" style={{ marginBottom: 36 }}>\n        Solana NFTs\n      </SectionLabel>\n      <NftPagination\n        isSolana\n        loading={data.loading}\n        nfts={nfts.slice((page - 1) * 12, page * 12)}\n        page={page}\n        maxPage={Math.floor(nfts.length / 12) + 1}\n        onNext={() => setPage(page + 1)}\n        onPrev={() => setPage(page - 1)}\n      />\n    </div>\n  );\n}\n","/Users/anthonysiu/doko/DOKO/client/src/modules/meta-collection/api.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/meta-collection/components/NftData.tsx",["522","523","524","525","526"],"/Users/anthonysiu/doko/DOKO/client/src/modules/meta-collection/components/CollectionTab.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/meta-collection/components/CollectionHeader.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/profiles/ProfileItem.tsx",["527","528","529"],"/Users/anthonysiu/doko/DOKO/client/src/libs/api.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/nft-individual/CopyAddress.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/nft-individual/solanaTraits.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/nft-individual/traits.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/nft-individual/api.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/nft-collections/Summary.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/nft-collections/SolNfts.tsx",["530","531","532","533","534"],"/Users/anthonysiu/doko/DOKO/client/src/modules/nft-collections/EthNfts.tsx",["535","536","537"],"import { useEffect, useState } from 'react';\nimport SelectSearch from 'react-select-search';\nimport { Grid } from '@material-ui/core';\n\nimport { NftPagination } from '../../components';\nimport SectionLabel from '../../components/SectionLabel';\nimport { getEthAssets, getEthCollections } from './api';\nimport { isSolAddress } from '../../libs/utils';\n\nimport './select-search.css';\n\ninterface Props {\n  data: any;\n}\n\nexport default function EthNfts({ data }: Props) {\n  const [nfts, setNfts] = useState<any>([]);\n  const [page, setPage] = useState(1);\n  const [collections, setCollections] = useState([]);\n  const [selectedCollection, setSelectedCollection] = useState('');\n\n  useEffect(() => {\n    setNfts(data.nfts);\n    setCollections(data.collections);\n  }, [data]);\n\n  const filterCollection = (v: any) => {\n    setSelectedCollection(v);\n    if (v === '') {\n      setNfts(data.nfts);\n    } else {\n      const result: any = data.nfts.filter((n) => n.collection.name === v);\n      setNfts([...result]);\n    }\n  };\n\n  const filterSearch = () => (query: string) => {\n    if (!query) {\n      return [{ value: '', name: 'All' }, ...data.collections];\n    }\n    return collections.filter((c: any) => c.name.toLowerCase().includes(query.toLowerCase()));\n  };\n\n  return (\n    <div>\n      <Grid\n        container\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        style={{ marginBottom: 36 }}\n      >\n        <SectionLabel variant=\"h5\">Ethereum NFTs</SectionLabel>\n        <SelectSearch\n          placeholder=\"Select a collection\"\n          closeOnSelect\n          search\n          options={[{ value: '', name: 'All' }, ...collections]}\n          value={selectedCollection}\n          onChange={filterCollection}\n          filterOptions={filterSearch}\n        />\n      </Grid>\n      <NftPagination\n        isOpenSea\n        loading={data.loading}\n        nfts={nfts.slice((page - 1) * 12, page * 12)}\n        page={page}\n        maxPage={Math.floor(nfts.length / 12) + 1}\n        onNext={() => setPage(page + 1)}\n        onPrev={() => setPage(page - 1)}\n      />\n    </div>\n  );\n}\n","/Users/anthonysiu/doko/DOKO/client/src/components/maps/RenderMaps.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/meta-profiles/Address.tsx",["538","539","540","541","542","543"],"import { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport { Card, Grid, makeStyles, Typography } from '@material-ui/core';\nimport { useState, useEffect, useRef } from 'react';\n\nimport eth from '../../assets/eth-small.png';\nimport bsc from '../../assets/bsc-small.png';\nimport polygon from '../../assets/polygon-small.png';\nimport solana from '../../assets/solana-small.png';\n\ninterface AddressProps {\n  address: [string, string];\n}\n\nconst useStyles = makeStyles(() => ({\n  traitFooter: {\n    marginTop: '1em',\n    textAlign: 'center',\n  },\n  traitCard: {\n    padding: '1em',\n    background: 'inherit',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    height: '120px',\n    maxHeight: '250px',\n    width: '100%',\n    borderRadius: '20px',\n    border: '1px solid white',\n    alignItems: 'center',\n    color: 'inherit',\n  },\n}));\n\ntype Icons = {\n  [key: string]: string;\n};\nconst icon: Icons = {\n  eth,\n  bsc,\n  polygon,\n  solana,\n};\n\nexport const Address = ({ address }: AddressProps) => {\n  const styles = useStyles();\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      wrap=\"nowrap\"\n      style={{ height: '20%', paddingLeft: '5%', paddingRight: '5%' }}\n    >\n      <img\n        width={20}\n        src={icon[address[0]]}\n        alt={address[0]}\n        style={{ borderRadius: '50%', marginRight: 10 }}\n      />\n      <Typography\n        noWrap\n        style={{ fontSize: '18px', fontFamily: 'Open Sans' }}\n      >{`${address[1].substr(0, 6)}...${address[1].substr(-4)}`}</Typography>\n    </Grid>\n  );\n};\n\nexport default Address;\n","/Users/anthonysiu/doko/DOKO/client/src/modules/collection/components/CollectionActions.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/components/PriceField.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/meta-collection/components/CollectionActions.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/profiles/Address.tsx",["544","545","546","547","548","549"],"import { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport { Card, Grid, makeStyles, Typography } from '@material-ui/core';\nimport { useState, useEffect, useRef } from 'react';\n\nimport eth from './assets/eth.png';\nimport bsc from './assets/bsc.png';\nimport polygon from './assets/polygon.png';\nimport solana from './assets/solana.png';\n\ninterface AddressProps {\n  address: [string, string];\n}\n\nconst useStyles = makeStyles(() => ({\n  traitFooter: {\n    marginTop: '1em',\n    textAlign: 'center',\n  },\n  traitCard: {\n    padding: '1em',\n    background: 'inherit',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    height: '120px',\n    maxHeight: '250px',\n    width: '100%',\n    borderRadius: '20px',\n    border: '1px solid white',\n    alignItems: 'center',\n    color: 'inherit',\n  },\n}));\n\ntype Icons = {\n  [key: string]: string;\n};\nconst icon: Icons = {\n  eth,\n  bsc,\n  polygon,\n  solana,\n};\n\nexport const Address = ({ address }: AddressProps) => {\n  const styles = useStyles();\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      wrap=\"nowrap\"\n      style={{ height: '20%', paddingLeft: '5%', paddingRight: '5%' }}\n    >\n      <img\n        width={20}\n        src={icon[address[0]]}\n        alt={address[0]}\n        style={{ borderRadius: '50%', marginRight: 10 }}\n      />\n      <Typography\n        noWrap\n        style={{ fontSize: '18px', fontFamily: 'Open Sans' }}\n      >{`${address[1].substr(0, 6)}...${address[1].substr(-4)}`}</Typography>\n    </Grid>\n  );\n};\n\nexport default Address;\n","/Users/anthonysiu/doko/DOKO/client/src/components/maps/DecentralandMap.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/components/maps/CryptovoxelsMap.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/components/maps/SandboxMap.tsx",["550"],"import { MapContainer, ImageOverlay, MapConsumer } from 'react-leaflet';\nimport L from 'leaflet';\nimport { makeStyles, Theme, useMediaQuery } from '@material-ui/core';\nimport { MapsProps, MapStyles, StyleProps } from './constants';\nimport useRenderMaps from '../../hooks/useRenderMaps';\nimport RenderAssets from './RenderMarkers';\n\nconst useStyles = makeStyles<Theme, StyleProps>(() => MapStyles);\n\nconst MapName = 'The Sandbox';\n\nconst SandboxMap = ({ selected, assets }: MapsProps) => {\n  const smOrAbove = useMediaQuery((theme: Theme) => theme.breakpoints.up('sm'));\n  const styles = useStyles({ smOrAbove });\n  const { latLangBounds, markerRefs, position, setMap, ResizeMap } = useRenderMaps({\n    bounds: {\n      southwest: [-204, -204],\n      northeast: [203, 203],\n    },\n    items: assets,\n    selected,\n    center: [0, 0],\n  });\n\n  return (\n    <div>\n      {\n        <MapContainer\n          bounds={latLangBounds}\n          center={position}\n          zoom={2}\n          className={styles.map}\n          whenCreated={(map) => setMap(map)}\n          minZoom={2}\n          maxZoom={5}\n          crs={L.CRS.Simple}\n        >\n          <ImageOverlay\n            attribution={`Map data &copy; ${MapName}`}\n            url=\"/sandbox_map.png\"\n            bounds={latLangBounds}\n          />\n          <ResizeMap />\n          <RenderAssets markerRefs={markerRefs} assets={assets} />\n        </MapContainer>\n      }\n    </div>\n  );\n};\n\nexport default SandboxMap;\n","/Users/anthonysiu/doko/DOKO/client/src/components/maps/SomniumSpaceMap.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/hooks/useRenderMaps.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/components/maps/constants.ts",["551"],"import L from 'leaflet';\nimport styled from 'styled-components';\nimport { Popup } from 'react-leaflet';\n\nimport { Asset } from '../../store/meta-nft-collections/profileOwnershipSlice';\nimport { createStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const marker = new L.Icon({\n  iconUrl: '/marker.png',\n  iconSize: [25, 41],\n  iconAnchor: [12, 41],\n  popupAnchor: [1, -34],\n  shadowSize: [41, 41],\n});\nexport interface PopupProps {\n  readonly color: string;\n}\nexport const StyledPopup = styled(Popup)<PopupProps>`\n  .leaflet-popup-content-wrapper {\n    background-color: black;\n    border: white 1px solid;\n    color: ${(props) => props.color};\n    width: 250px;\n  }\n  .leaflet-popup-content {\n    height: 150px;\n    margin: 0;\n  }\n  .leaflet-popup-tip {\n    background-color: black;\n    border: white 1px solid;\n  }\n`;\n\nexport interface MapsProps {\n  selected: number | null;\n  assets: Asset[];\n}\n\nexport interface StyleProps {\n  smOrAbove: boolean;\n}\n\nexport const MapStyles = createStyles<any, StyleProps>({\n  map: {\n    height: ({ smOrAbove }) => (smOrAbove ? 600 : 300),\n    width: '100%',\n    border: '1px solid rgba(255, 255, 255, 0.5)',\n    boxSizing: 'border-box',\n    overflow: 'hidden',\n  },\n  popupTitleContainer: {\n    borderBottom: 'solid white 1px',\n    padding: '10px 16px',\n    fontWeight: 'bold',\n    width: '100%',\n    height: '20%',\n  },\n  popupContentContainer: {\n    height: '80%',\n    padding: '10px 16px',\n  },\n  popupContent: {\n    width: 'auto',\n    height: '100%',\n    backgroundPosition: 'center',\n    backgroundSize: 'cover',\n    borderRadius: '6px',\n  },\n});\n","/Users/anthonysiu/doko/DOKO/client/src/components/maps/RenderMarkers.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/store/stats/dclStatsSlice.ts",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/meta-stats-page/index.tsx",[],"/Users/anthonysiu/doko/DOKO/client/src/modules/meta-stats-page/StatsView.tsx",[],{"ruleId":"552","severity":1,"message":"553","line":1,"column":10,"nodeType":"554","messageId":"555","endLine":1,"endColumn":19},{"ruleId":"552","severity":1,"message":"556","line":1,"column":21,"nodeType":"554","messageId":"555","endLine":1,"endColumn":29},{"ruleId":"552","severity":1,"message":"557","line":11,"column":8,"nodeType":"554","messageId":"555","endLine":11,"endColumn":18},{"ruleId":"552","severity":1,"message":"558","line":13,"column":8,"nodeType":"554","messageId":"555","endLine":13,"endColumn":17},{"ruleId":"552","severity":1,"message":"559","line":10,"column":3,"nodeType":"554","messageId":"555","endLine":10,"endColumn":10},{"ruleId":"552","severity":1,"message":"560","line":21,"column":8,"nodeType":"554","messageId":"555","endLine":21,"endColumn":27},{"ruleId":"552","severity":1,"message":"561","line":24,"column":10,"nodeType":"554","messageId":"555","endLine":24,"endColumn":26},{"ruleId":"552","severity":1,"message":"562","line":24,"column":37,"nodeType":"554","messageId":"555","endLine":24,"endColumn":49},{"ruleId":"552","severity":1,"message":"563","line":25,"column":10,"nodeType":"554","messageId":"555","endLine":25,"endColumn":16},{"ruleId":"552","severity":1,"message":"564","line":28,"column":10,"nodeType":"554","messageId":"555","endLine":28,"endColumn":23},{"ruleId":"552","severity":1,"message":"565","line":60,"column":7,"nodeType":"554","messageId":"555","endLine":60,"endColumn":23},{"ruleId":"552","severity":1,"message":"566","line":66,"column":5,"nodeType":"554","messageId":"555","endLine":66,"endColumn":22},{"ruleId":"552","severity":1,"message":"567","line":171,"column":10,"nodeType":"554","messageId":"555","endLine":171,"endColumn":17},{"ruleId":"552","severity":1,"message":"568","line":171,"column":19,"nodeType":"554","messageId":"555","endLine":171,"endColumn":29},{"ruleId":"552","severity":1,"message":"569","line":172,"column":10,"nodeType":"554","messageId":"555","endLine":172,"endColumn":14},{"ruleId":"552","severity":1,"message":"570","line":172,"column":16,"nodeType":"554","messageId":"555","endLine":172,"endColumn":23},{"ruleId":"552","severity":1,"message":"571","line":176,"column":10,"nodeType":"554","messageId":"555","endLine":176,"endColumn":16},{"ruleId":"552","severity":1,"message":"572","line":176,"column":18,"nodeType":"554","messageId":"555","endLine":176,"endColumn":27},{"ruleId":"552","severity":1,"message":"573","line":177,"column":10,"nodeType":"554","messageId":"555","endLine":177,"endColumn":20},{"ruleId":"552","severity":1,"message":"574","line":177,"column":22,"nodeType":"554","messageId":"555","endLine":177,"endColumn":35},{"ruleId":"552","severity":1,"message":"575","line":180,"column":9,"nodeType":"554","messageId":"555","endLine":180,"endColumn":17},{"ruleId":"552","severity":1,"message":"576","line":187,"column":31,"nodeType":"554","messageId":"555","endLine":187,"endColumn":53},{"ruleId":"552","severity":1,"message":"577","line":192,"column":30,"nodeType":"554","messageId":"555","endLine":192,"endColumn":42},{"ruleId":"552","severity":1,"message":"553","line":1,"column":20,"nodeType":"554","messageId":"555","endLine":1,"endColumn":29},{"ruleId":"552","severity":1,"message":"578","line":2,"column":10,"nodeType":"554","messageId":"555","endLine":2,"endColumn":20},{"ruleId":"552","severity":1,"message":"579","line":17,"column":10,"nodeType":"554","messageId":"555","endLine":17,"endColumn":32},{"ruleId":"552","severity":1,"message":"577","line":190,"column":30,"nodeType":"554","messageId":"555","endLine":190,"endColumn":42},{"ruleId":"552","severity":1,"message":"559","line":10,"column":3,"nodeType":"554","messageId":"555","endLine":10,"endColumn":10},{"ruleId":"552","severity":1,"message":"560","line":22,"column":8,"nodeType":"554","messageId":"555","endLine":22,"endColumn":27},{"ruleId":"552","severity":1,"message":"580","line":25,"column":10,"nodeType":"554","messageId":"555","endLine":25,"endColumn":30},{"ruleId":"552","severity":1,"message":"581","line":26,"column":10,"nodeType":"554","messageId":"555","endLine":26,"endColumn":27},{"ruleId":"552","severity":1,"message":"582","line":27,"column":41,"nodeType":"554","messageId":"555","endLine":27,"endColumn":52},{"ruleId":"552","severity":1,"message":"561","line":28,"column":10,"nodeType":"554","messageId":"555","endLine":28,"endColumn":26},{"ruleId":"552","severity":1,"message":"562","line":28,"column":37,"nodeType":"554","messageId":"555","endLine":28,"endColumn":49},{"ruleId":"552","severity":1,"message":"563","line":29,"column":10,"nodeType":"554","messageId":"555","endLine":29,"endColumn":16},{"ruleId":"552","severity":1,"message":"583","line":31,"column":24,"nodeType":"554","messageId":"555","endLine":31,"endColumn":39},{"ruleId":"552","severity":1,"message":"564","line":32,"column":10,"nodeType":"554","messageId":"555","endLine":32,"endColumn":23},{"ruleId":"552","severity":1,"message":"584","line":33,"column":8,"nodeType":"554","messageId":"555","endLine":33,"endColumn":19},{"ruleId":"552","severity":1,"message":"571","line":191,"column":10,"nodeType":"554","messageId":"555","endLine":191,"endColumn":16},{"ruleId":"552","severity":1,"message":"572","line":191,"column":18,"nodeType":"554","messageId":"555","endLine":191,"endColumn":27},{"ruleId":"552","severity":1,"message":"576","line":197,"column":31,"nodeType":"554","messageId":"555","endLine":197,"endColumn":53},{"ruleId":"552","severity":1,"message":"577","line":204,"column":30,"nodeType":"554","messageId":"555","endLine":204,"endColumn":42},{"ruleId":"552","severity":1,"message":"585","line":213,"column":9,"nodeType":"554","messageId":"555","endLine":213,"endColumn":20},{"ruleId":"552","severity":1,"message":"553","line":1,"column":20,"nodeType":"554","messageId":"555","endLine":1,"endColumn":29},{"ruleId":"552","severity":1,"message":"578","line":2,"column":10,"nodeType":"554","messageId":"555","endLine":2,"endColumn":20},{"ruleId":"552","severity":1,"message":"579","line":17,"column":10,"nodeType":"554","messageId":"555","endLine":17,"endColumn":32},{"ruleId":"552","severity":1,"message":"577","line":190,"column":30,"nodeType":"554","messageId":"555","endLine":190,"endColumn":42},{"ruleId":"552","severity":1,"message":"586","line":363,"column":13,"nodeType":"554","messageId":"555","endLine":363,"endColumn":24},{"ruleId":"552","severity":1,"message":"587","line":2,"column":10,"nodeType":"554","messageId":"555","endLine":2,"endColumn":15},{"ruleId":"552","severity":1,"message":"588","line":69,"column":24,"nodeType":"554","messageId":"555","endLine":69,"endColumn":39},{"ruleId":"552","severity":1,"message":"589","line":2,"column":10,"nodeType":"554","messageId":"555","endLine":2,"endColumn":22},{"ruleId":"552","severity":1,"message":"590","line":1,"column":10,"nodeType":"554","messageId":"555","endLine":1,"endColumn":29},{"ruleId":"552","severity":1,"message":"591","line":54,"column":37,"nodeType":"554","messageId":"555","endLine":54,"endColumn":48},{"ruleId":"552","severity":1,"message":"592","line":132,"column":21,"nodeType":"554","messageId":"555","endLine":132,"endColumn":22},{"ruleId":"552","severity":1,"message":"593","line":2,"column":10,"nodeType":"554","messageId":"555","endLine":2,"endColumn":23},{"ruleId":"552","severity":1,"message":"594","line":51,"column":19,"nodeType":"554","messageId":"555","endLine":51,"endColumn":28},{"ruleId":"552","severity":1,"message":"577","line":51,"column":30,"nodeType":"554","messageId":"555","endLine":51,"endColumn":42},{"ruleId":"552","severity":1,"message":"595","line":1,"column":10,"nodeType":"554","messageId":"555","endLine":1,"endColumn":19},{"ruleId":"552","severity":1,"message":"596","line":6,"column":7,"nodeType":"554","messageId":"555","endLine":6,"endColumn":18},{"ruleId":"552","severity":1,"message":"597","line":57,"column":7,"nodeType":"554","messageId":"555","endLine":57,"endColumn":11},{"ruleId":"552","severity":1,"message":"598","line":179,"column":7,"nodeType":"554","messageId":"555","endLine":179,"endColumn":13},{"ruleId":"552","severity":1,"message":"599","line":213,"column":7,"nodeType":"554","messageId":"555","endLine":213,"endColumn":37},{"ruleId":"552","severity":1,"message":"553","line":1,"column":10,"nodeType":"554","messageId":"555","endLine":1,"endColumn":19},{"ruleId":"552","severity":1,"message":"556","line":1,"column":21,"nodeType":"554","messageId":"555","endLine":1,"endColumn":29},{"ruleId":"552","severity":1,"message":"600","line":4,"column":8,"nodeType":"554","messageId":"555","endLine":4,"endColumn":15},{"ruleId":"552","severity":1,"message":"601","line":5,"column":8,"nodeType":"554","messageId":"555","endLine":5,"endColumn":15},{"ruleId":"552","severity":1,"message":"602","line":6,"column":8,"nodeType":"554","messageId":"555","endLine":6,"endColumn":19},{"ruleId":"552","severity":1,"message":"603","line":7,"column":8,"nodeType":"554","messageId":"555","endLine":7,"endColumn":18},{"ruleId":"552","severity":1,"message":"604","line":8,"column":10,"nodeType":"554","messageId":"555","endLine":8,"endColumn":25},{"ruleId":"552","severity":1,"message":"605","line":8,"column":27,"nodeType":"554","messageId":"555","endLine":8,"endColumn":40},{"ruleId":"552","severity":1,"message":"606","line":8,"column":42,"nodeType":"554","messageId":"555","endLine":8,"endColumn":54},{"ruleId":"552","severity":1,"message":"607","line":9,"column":10,"nodeType":"554","messageId":"555","endLine":9,"endColumn":25},{"ruleId":"552","severity":1,"message":"608","line":10,"column":10,"nodeType":"554","messageId":"555","endLine":10,"endColumn":22},{"ruleId":"552","severity":1,"message":"609","line":7,"column":10,"nodeType":"554","messageId":"555","endLine":7,"endColumn":22},{"ruleId":"552","severity":1,"message":"610","line":7,"column":24,"nodeType":"554","messageId":"555","endLine":7,"endColumn":41},{"ruleId":"552","severity":1,"message":"608","line":8,"column":10,"nodeType":"554","messageId":"555","endLine":8,"endColumn":22},{"ruleId":"552","severity":1,"message":"611","line":11,"column":8,"nodeType":"554","messageId":"555","endLine":11,"endColumn":22},{"ruleId":"552","severity":1,"message":"612","line":4,"column":10,"nodeType":"554","messageId":"555","endLine":4,"endColumn":20},{"ruleId":"552","severity":1,"message":"608","line":5,"column":10,"nodeType":"554","messageId":"555","endLine":5,"endColumn":22},{"ruleId":"552","severity":1,"message":"613","line":14,"column":10,"nodeType":"554","messageId":"555","endLine":14,"endColumn":21},{"ruleId":"552","severity":1,"message":"567","line":15,"column":10,"nodeType":"554","messageId":"555","endLine":15,"endColumn":17},{"ruleId":"552","severity":1,"message":"568","line":15,"column":19,"nodeType":"554","messageId":"555","endLine":15,"endColumn":29},{"ruleId":"552","severity":1,"message":"595","line":1,"column":10,"nodeType":"554","messageId":"555","endLine":1,"endColumn":19},{"ruleId":"552","severity":1,"message":"596","line":6,"column":7,"nodeType":"554","messageId":"555","endLine":6,"endColumn":18},{"ruleId":"552","severity":1,"message":"597","line":57,"column":7,"nodeType":"554","messageId":"555","endLine":57,"endColumn":11},{"ruleId":"552","severity":1,"message":"598","line":179,"column":7,"nodeType":"554","messageId":"555","endLine":179,"endColumn":13},{"ruleId":"552","severity":1,"message":"599","line":213,"column":7,"nodeType":"554","messageId":"555","endLine":213,"endColumn":37},{"ruleId":"552","severity":1,"message":"593","line":2,"column":10,"nodeType":"554","messageId":"555","endLine":2,"endColumn":23},{"ruleId":"552","severity":1,"message":"594","line":51,"column":19,"nodeType":"554","messageId":"555","endLine":51,"endColumn":28},{"ruleId":"552","severity":1,"message":"577","line":51,"column":30,"nodeType":"554","messageId":"555","endLine":51,"endColumn":42},{"ruleId":"552","severity":1,"message":"612","line":4,"column":10,"nodeType":"554","messageId":"555","endLine":4,"endColumn":20},{"ruleId":"552","severity":1,"message":"608","line":5,"column":10,"nodeType":"554","messageId":"555","endLine":5,"endColumn":22},{"ruleId":"552","severity":1,"message":"613","line":14,"column":10,"nodeType":"554","messageId":"555","endLine":14,"endColumn":21},{"ruleId":"552","severity":1,"message":"567","line":15,"column":10,"nodeType":"554","messageId":"555","endLine":15,"endColumn":17},{"ruleId":"552","severity":1,"message":"568","line":15,"column":19,"nodeType":"554","messageId":"555","endLine":15,"endColumn":29},{"ruleId":"552","severity":1,"message":"609","line":7,"column":10,"nodeType":"554","messageId":"555","endLine":7,"endColumn":22},{"ruleId":"552","severity":1,"message":"610","line":7,"column":24,"nodeType":"554","messageId":"555","endLine":7,"endColumn":41},{"ruleId":"552","severity":1,"message":"608","line":8,"column":10,"nodeType":"554","messageId":"555","endLine":8,"endColumn":22},{"ruleId":"552","severity":1,"message":"590","line":1,"column":10,"nodeType":"554","messageId":"555","endLine":1,"endColumn":29},{"ruleId":"552","severity":1,"message":"614","line":3,"column":10,"nodeType":"554","messageId":"555","endLine":3,"endColumn":14},{"ruleId":"552","severity":1,"message":"556","line":4,"column":10,"nodeType":"554","messageId":"555","endLine":4,"endColumn":18},{"ruleId":"552","severity":1,"message":"553","line":4,"column":20,"nodeType":"554","messageId":"555","endLine":4,"endColumn":29},{"ruleId":"552","severity":1,"message":"615","line":4,"column":31,"nodeType":"554","messageId":"555","endLine":4,"endColumn":37},{"ruleId":"552","severity":1,"message":"616","line":47,"column":9,"nodeType":"554","messageId":"555","endLine":47,"endColumn":15},{"ruleId":"552","severity":1,"message":"590","line":1,"column":10,"nodeType":"554","messageId":"555","endLine":1,"endColumn":29},{"ruleId":"552","severity":1,"message":"614","line":3,"column":10,"nodeType":"554","messageId":"555","endLine":3,"endColumn":14},{"ruleId":"552","severity":1,"message":"556","line":4,"column":10,"nodeType":"554","messageId":"555","endLine":4,"endColumn":18},{"ruleId":"552","severity":1,"message":"553","line":4,"column":20,"nodeType":"554","messageId":"555","endLine":4,"endColumn":29},{"ruleId":"552","severity":1,"message":"615","line":4,"column":31,"nodeType":"554","messageId":"555","endLine":4,"endColumn":37},{"ruleId":"552","severity":1,"message":"616","line":47,"column":9,"nodeType":"554","messageId":"555","endLine":47,"endColumn":15},{"ruleId":"552","severity":1,"message":"617","line":1,"column":38,"nodeType":"554","messageId":"555","endLine":1,"endColumn":49},{"ruleId":"552","severity":1,"message":"618","line":7,"column":10,"nodeType":"554","messageId":"555","endLine":7,"endColumn":15},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'IconButton' is defined but never used.","'CloseIcon' is defined but never used.","'Tooltip' is defined but never used.","'RefreshOutlinedIcon' is defined but never used.","'getAddressStatus' is defined but never used.","'indexAddress' is defined but never used.","'Filter' is defined but never used.","'AddressStatus' is defined but never used.","'CustomIconButton' is assigned a value but never used.","'syncInterval' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'nfts' is assigned a value but never used.","'setNFTs' is assigned a value but never used.","'filter' is assigned a value but never used.","'setFilter' is assigned a value but never used.","'syncStatus' is assigned a value but never used.","'setSyncStatus' is assigned a value but never used.","'isSolana' is assigned a value but never used.","'setOwnedSolCollections' is assigned a value but never used.","'removeCookie' is assigned a value but never used.","'useHistory' is defined but never used.","'AddToHomeScreenTwoTone' is defined but never used.","'OpenInBrowserRounded' is defined but never used.","'SSL_OP_TLS_D5_BUG' is defined but never used.","'RadiusInput' is defined but never used.","'minimizeAddress' is defined but never used.","'CopyAddress' is defined but never used.","'handleClose' is assigned a value but never used.","'_floorPrice' is assigned a value but never used.","'Asset' is defined but never used.","'setArrowElement' is assigned a value but never used.","'getTokenInfo' is defined but never used.","'CircularProgressbar' is defined but never used.","'totalSupply' is defined but never used.","'_' is defined but never used.","'LazyLoadImage' is defined but never used.","'setCookie' is assigned a value but never used.","'Container' is defined but never used.","'ogFollowing' is assigned a value but never used.","'rows' is assigned a value but never used.","'charts' is assigned a value but never used.","'headCells' is assigned a value but never used.","'ethIcon' is defined but never used.","'bscIcon' is defined but never used.","'polygonIcon' is defined but never used.","'solanaIcon' is defined but never used.","'getAllEthAssets' is defined but never used.","'getFloorPrice' is defined but never used.","'getNFTsCount' is defined but never used.","'getSolNftsCount' is defined but never used.","'isSolAddress' is defined but never used.","'getEthAssets' is defined but never used.","'getEthCollections' is defined but never used.","'NftCollections' is defined but never used.","'getSolNfts' is defined but never used.","'collections' is assigned a value but never used.","'Card' is defined but never used.","'useRef' is defined but never used.","'styles' is assigned a value but never used.","'MapConsumer' is defined but never used.","'Theme' is defined but never used."]