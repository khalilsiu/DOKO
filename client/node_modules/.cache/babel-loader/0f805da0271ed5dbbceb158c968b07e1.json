{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport api from '../../libs/api';\nimport openseaApi from '../../libs/opensea-api';\nexport var getNFTs = function getNFTs(address, offset) {\n  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return api.get(\"/collections/\".concat(address, \"/nfts\"), {\n    params: _objectSpread({\n      offset: offset\n    }, params)\n  });\n};\nexport var getCollection = function getCollection(address) {\n  return api.get(\"/collections/\".concat(address));\n};\nexport var getEthNFTs = function getEthNFTs(asset_contract_address, offset) {\n  return openseaApi.get('/assets', {\n    params: {\n      offset: offset,\n      limit: 12,\n      asset_contract_address: asset_contract_address\n    }\n  });\n};\nexport var getCollectionDetail = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(asset_contract_address, token_id) {\n    var _yield$openseaApi$get, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return openseaApi.get(\"/asset/\".concat(asset_contract_address, \"/\").concat(token_id));\n\n          case 2:\n            _yield$openseaApi$get = _context.sent;\n            data = _yield$openseaApi$get.data;\n            return _context.abrupt(\"return\", data.collection);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getCollectionDetail(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/anthonysiu/doko/DOKO/client/src/modules/collection/api.ts"],"names":["api","openseaApi","getNFTs","address","offset","params","get","getCollection","getEthNFTs","asset_contract_address","limit","getCollectionDetail","token_id","data","collection"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,gBAAhB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,OAAD,EAAkBC,MAAlB;AAAA,MAAkCC,MAAlC,uEAAgD,EAAhD;AAAA,SACrBL,GAAG,CAACM,GAAJ,wBAAwBH,OAAxB,YAAwC;AACtCE,IAAAA,MAAM;AACJD,MAAAA,MAAM,EAANA;AADI,OAEDC,MAFC;AADgC,GAAxC,CADqB;AAAA,CAAhB;AAQP,OAAO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACJ,OAAD;AAAA,SAAqBH,GAAG,CAACM,GAAJ,wBAAwBH,OAAxB,EAArB;AAAA,CAAtB;AAEP,OAAO,IAAMK,UAAU,GAAG,SAAbA,UAAa,CAACC,sBAAD,EAAiCL,MAAjC;AAAA,SACxBH,UAAU,CAACK,GAAX,CAAe,SAAf,EAA0B;AACxBD,IAAAA,MAAM,EAAE;AACND,MAAAA,MAAM,EAANA,MADM;AAENM,MAAAA,KAAK,EAAE,EAFD;AAGND,MAAAA,sBAAsB,EAAtBA;AAHM;AADgB,GAA1B,CADwB;AAAA,CAAnB;AASP,OAAO,IAAME,mBAAmB;AAAA,sEAAG,iBAAOF,sBAAP,EAAuCG,QAAvC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACVX,UAAU,CAACK,GAAX,kBAAyBG,sBAAzB,cAAmDG,QAAnD,EADU;;AAAA;AAAA;AACzBC,YAAAA,IADyB,yBACzBA,IADyB;AAAA,6CAE1BA,IAAI,CAACC,UAFqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBH,mBAAmB;AAAA;AAAA;AAAA,GAAzB","sourcesContent":["import api from '../../libs/api';\nimport openseaApi from '../../libs/opensea-api';\n\nexport const getNFTs = (address: string, offset: number, params: any = {}) =>\n  api.get(`/collections/${address}/nfts`, {\n    params: {\n      offset,\n      ...params,\n    },\n  });\n\nexport const getCollection = (address: string) => api.get(`/collections/${address}`);\n\nexport const getEthNFTs = (asset_contract_address: string, offset: number) =>\n  openseaApi.get('/assets', {\n    params: {\n      offset,\n      limit: 12,\n      asset_contract_address,\n    },\n  });\n\nexport const getCollectionDetail = async (asset_contract_address: string, token_id: string) => {\n  const { data } = await openseaApi.get(`/asset/${asset_contract_address}/${token_id}`);\n  return data.collection;\n};\n"]},"metadata":{},"sourceType":"module"}