{"ast":null,"code":"import _createClass from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/*\n    Taken from: https://github.com/metaplex-foundation/metaplex/blob/master/js/packages/common/src/actions/metadata.ts\n*/\nimport { EDITION_MARKER_BIT_SIZE, MetadataKey, MetaplexKey } from \"./types\";\nexport var MasterEditionV1 = /// Can be used to mint tokens that give one-time permission to mint a single limited edition.\n/// If you don't know how many printing tokens you are going to need, but you do know\n/// you are going to need some amount in the future, you can use a token from this mint.\n/// Coming back to token metadata with one of these tokens allows you to mint (one time)\n/// any number of printing tokens you want. This is used for instance by Auction Manager\n/// with participation NFTs, where we dont know how many people will bid and need participation\n/// printing tokens to redeem, so we give it ONE of these tokens to use after the auction is over,\n/// because when the auction begins we just dont know how many printing tokens we will need,\n/// but at the end we will. At the end it then burns this token with token-metadata to\n/// get the printing tokens it needs to give to bidders. Each bidder then redeems a printing token\n/// to get their limited editions.\nfunction MasterEditionV1(args) {\n  _classCallCheck(this, MasterEditionV1);\n\n  this.key = void 0;\n  this.supply = void 0;\n  this.maxSupply = void 0;\n  this.printingMint = void 0;\n  this.oneTimePrintingAuthorizationMint = void 0;\n  this.key = MetadataKey.MasterEditionV1;\n  this.supply = args.supply;\n  this.maxSupply = args.maxSupply;\n  this.printingMint = args.printingMint;\n  this.oneTimePrintingAuthorizationMint = args.oneTimePrintingAuthorizationMint;\n};\nexport var MasterEditionV2 = function MasterEditionV2(args) {\n  _classCallCheck(this, MasterEditionV2);\n\n  this.key = void 0;\n  this.supply = void 0;\n  this.maxSupply = void 0;\n  this.key = MetadataKey.MasterEditionV2;\n  this.supply = args.supply;\n  this.maxSupply = args.maxSupply;\n};\nexport var EditionMarker = /*#__PURE__*/function () {\n  function EditionMarker(args) {\n    _classCallCheck(this, EditionMarker);\n\n    this.key = void 0;\n    this.ledger = void 0;\n    this.key = MetadataKey.EditionMarker;\n    this.ledger = args.ledger;\n  }\n\n  _createClass(EditionMarker, [{\n    key: \"editionTaken\",\n    value: function editionTaken(edition) {\n      var editionOffset = edition % EDITION_MARKER_BIT_SIZE;\n      var indexOffset = Math.floor(editionOffset / 8);\n\n      if (indexOffset > 30) {\n        throw Error(\"bad index for edition\");\n      }\n\n      var positionInBitsetFromRight = 7 - editionOffset % 8;\n      var mask = Math.pow(2, positionInBitsetFromRight);\n      var appliedMask = this.ledger[indexOffset] & mask;\n      return appliedMask !== 0;\n    }\n  }]);\n\n  return EditionMarker;\n}();\nexport var Edition = /// Points at MasterEdition struct\n/// Starting at 0 for master record, this is incremented for each edition minted.\nfunction Edition(args) {\n  _classCallCheck(this, Edition);\n\n  this.key = void 0;\n  this.parent = void 0;\n  this.edition = void 0;\n  this.key = MetadataKey.EditionV1;\n  this.parent = args.parent;\n  this.edition = args.edition;\n};\nexport var Creator = function Creator(args) {\n  _classCallCheck(this, Creator);\n\n  this.address = void 0;\n  this.verified = void 0;\n  this.share = void 0;\n  this.address = args.address;\n  this.verified = args.verified;\n  this.share = args.share;\n};\nexport var Data = function Data(args) {\n  _classCallCheck(this, Data);\n\n  this.name = void 0;\n  this.symbol = void 0;\n  this.uri = void 0;\n  this.sellerFeeBasisPoints = void 0;\n  this.creators = void 0;\n  this.name = args.name;\n  this.symbol = args.symbol;\n  this.uri = args.uri;\n  this.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n  this.creators = args.creators;\n};\nexport var Metadata = function Metadata(args) {\n  _classCallCheck(this, Metadata);\n\n  this.key = void 0;\n  this.updateAuthority = void 0;\n  this.mint = void 0;\n  this.data = void 0;\n  this.primarySaleHappened = void 0;\n  this.isMutable = void 0;\n  this.editionNonce = void 0;\n  this.key = MetadataKey.MetadataV1;\n  this.updateAuthority = args.updateAuthority;\n  this.mint = args.mint;\n  this.data = args.data;\n  this.primarySaleHappened = args.primarySaleHappened;\n  this.isMutable = args.isMutable;\n  this.editionNonce = args.editionNonce;\n};\nexport var METADATA_SCHEMA = new Map([[MasterEditionV1, {\n  kind: \"struct\",\n  fields: [[\"key\", \"u8\"], [\"supply\", \"u64\"], [\"maxSupply\", {\n    kind: \"option\",\n    type: \"u64\"\n  }], [\"printingMint\", \"pubkeyAsString\"], [\"oneTimePrintingAuthorizationMint\", \"pubkeyAsString\"]]\n}], [MasterEditionV2, {\n  kind: \"struct\",\n  fields: [[\"key\", \"u8\"], [\"supply\", \"u64\"], [\"maxSupply\", {\n    kind: \"option\",\n    type: \"u64\"\n  }]]\n}], [Edition, {\n  kind: \"struct\",\n  fields: [[\"key\", \"u8\"], [\"parent\", \"pubkeyAsString\"], [\"edition\", \"u64\"]]\n}], [Data, {\n  kind: \"struct\",\n  fields: [[\"name\", \"string\"], [\"symbol\", \"string\"], [\"uri\", \"string\"], [\"sellerFeeBasisPoints\", \"u16\"], [\"creators\", {\n    kind: \"option\",\n    type: [Creator]\n  }]]\n}], [Creator, {\n  kind: \"struct\",\n  fields: [[\"address\", \"pubkeyAsString\"], [\"verified\", \"u8\"], [\"share\", \"u8\"]]\n}], [Metadata, {\n  kind: \"struct\",\n  fields: [[\"key\", \"u8\"], [\"updateAuthority\", \"pubkeyAsString\"], [\"mint\", \"pubkeyAsString\"], [\"data\", Data], [\"primarySaleHappened\", \"u8\"], // bool\n  [\"isMutable\", \"u8\"] // bool\n  ]\n}], [EditionMarker, {\n  kind: \"struct\",\n  fields: [[\"key\", \"u8\"], [\"ledger\", [31]]]\n}]]);\nexport var WhitelistedCreator = // Populated from name service\nfunction WhitelistedCreator(args) {\n  _classCallCheck(this, WhitelistedCreator);\n\n  this.key = MetaplexKey.WhitelistedCreatorV1;\n  this.address = void 0;\n  this.activated = true;\n  this.twitter = void 0;\n  this.name = void 0;\n  this.image = void 0;\n  this.description = void 0;\n  this.address = args.address;\n  this.activated = args.activated;\n};","map":{"version":3,"sources":["/Users/anthonysiu/doko/DOKO/client/src/libs/metaplex/classes.ts"],"names":["EDITION_MARKER_BIT_SIZE","MetadataKey","MetaplexKey","MasterEditionV1","args","key","supply","maxSupply","printingMint","oneTimePrintingAuthorizationMint","MasterEditionV2","EditionMarker","ledger","edition","editionOffset","indexOffset","Math","floor","Error","positionInBitsetFromRight","mask","pow","appliedMask","Edition","parent","EditionV1","Creator","address","verified","share","Data","name","symbol","uri","sellerFeeBasisPoints","creators","Metadata","updateAuthority","mint","data","primarySaleHappened","isMutable","editionNonce","MetadataV1","METADATA_SCHEMA","Map","kind","fields","type","WhitelistedCreator","WhitelistedCreatorV1","activated","twitter","image","description"],"mappings":"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","sourcesContent":["/*\n    Taken from: https://github.com/metaplex-foundation/metaplex/blob/master/js/packages/common/src/actions/metadata.ts\n*/\n\nimport BN from \"bn.js\";\nimport {\n  StringPublicKey,\n  EDITION_MARKER_BIT_SIZE,\n  MetadataKey,\n  FileOrString,\n  MetadataCategory,\n  MetaplexKey,\n} from \"./types\";\n\nexport class MasterEditionV1 {\n  key: MetadataKey;\n  supply: BN;\n  maxSupply?: BN;\n  /// Can be used to mint tokens that give one-time permission to mint a single limited edition.\n  printingMint: StringPublicKey;\n  /// If you don't know how many printing tokens you are going to need, but you do know\n  /// you are going to need some amount in the future, you can use a token from this mint.\n  /// Coming back to token metadata with one of these tokens allows you to mint (one time)\n  /// any number of printing tokens you want. This is used for instance by Auction Manager\n  /// with participation NFTs, where we dont know how many people will bid and need participation\n  /// printing tokens to redeem, so we give it ONE of these tokens to use after the auction is over,\n  /// because when the auction begins we just dont know how many printing tokens we will need,\n  /// but at the end we will. At the end it then burns this token with token-metadata to\n  /// get the printing tokens it needs to give to bidders. Each bidder then redeems a printing token\n  /// to get their limited editions.\n  oneTimePrintingAuthorizationMint: StringPublicKey;\n\n  constructor(args: {\n    key: MetadataKey;\n    supply: BN;\n    maxSupply?: BN;\n    printingMint: StringPublicKey;\n    oneTimePrintingAuthorizationMint: StringPublicKey;\n  }) {\n    this.key = MetadataKey.MasterEditionV1;\n    this.supply = args.supply;\n    this.maxSupply = args.maxSupply;\n    this.printingMint = args.printingMint;\n    this.oneTimePrintingAuthorizationMint =\n      args.oneTimePrintingAuthorizationMint;\n  }\n}\n\nexport class MasterEditionV2 {\n  key: MetadataKey;\n  supply: BN;\n  maxSupply?: BN;\n\n  constructor(args: { key: MetadataKey; supply: BN; maxSupply?: BN }) {\n    this.key = MetadataKey.MasterEditionV2;\n    this.supply = args.supply;\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nexport class EditionMarker {\n  key: MetadataKey;\n  ledger: number[];\n\n  constructor(args: { key: MetadataKey; ledger: number[] }) {\n    this.key = MetadataKey.EditionMarker;\n    this.ledger = args.ledger;\n  }\n\n  editionTaken(edition: number) {\n    const editionOffset = edition % EDITION_MARKER_BIT_SIZE;\n    const indexOffset = Math.floor(editionOffset / 8);\n\n    if (indexOffset > 30) {\n      throw Error(\"bad index for edition\");\n    }\n\n    const positionInBitsetFromRight = 7 - (editionOffset % 8);\n\n    const mask = Math.pow(2, positionInBitsetFromRight);\n\n    const appliedMask = this.ledger[indexOffset] & mask;\n\n    return appliedMask !== 0;\n  }\n}\n\nexport class Edition {\n  key: MetadataKey;\n  /// Points at MasterEdition struct\n  parent: StringPublicKey;\n  /// Starting at 0 for master record, this is incremented for each edition minted.\n  edition: BN;\n\n  constructor(args: {\n    key: MetadataKey;\n    parent: StringPublicKey;\n    edition: BN;\n  }) {\n    this.key = MetadataKey.EditionV1;\n    this.parent = args.parent;\n    this.edition = args.edition;\n  }\n}\nexport class Creator {\n  address: StringPublicKey;\n  verified: boolean;\n  share: number;\n\n  constructor(args: {\n    address: StringPublicKey;\n    verified: boolean;\n    share: number;\n  }) {\n    this.address = args.address;\n    this.verified = args.verified;\n    this.share = args.share;\n  }\n}\n\nexport class Data {\n  name: string;\n  symbol: string;\n  uri: string;\n  sellerFeeBasisPoints: number;\n  creators: Creator[] | null;\n  constructor(args: {\n    name: string;\n    symbol: string;\n    uri: string;\n    sellerFeeBasisPoints: number;\n    creators: Creator[] | null;\n  }) {\n    this.name = args.name;\n    this.symbol = args.symbol;\n    this.uri = args.uri;\n    this.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n    this.creators = args.creators;\n  }\n}\n\nexport class Metadata {\n  key: MetadataKey;\n  updateAuthority: StringPublicKey;\n  mint: StringPublicKey;\n  data: Data;\n  primarySaleHappened: boolean;\n  isMutable: boolean;\n  editionNonce: number | null;\n\n  constructor(args: {\n    updateAuthority: StringPublicKey;\n    mint: StringPublicKey;\n    data: Data;\n    primarySaleHappened: boolean;\n    isMutable: boolean;\n    editionNonce: number | null;\n  }) {\n    this.key = MetadataKey.MetadataV1;\n    this.updateAuthority = args.updateAuthority;\n    this.mint = args.mint;\n    this.data = args.data;\n    this.primarySaleHappened = args.primarySaleHappened;\n    this.isMutable = args.isMutable;\n    this.editionNonce = args.editionNonce;\n  }\n}\n\nexport interface IMetadataExtension {\n  name: string;\n  symbol: string;\n\n  creators: Creator[] | null;\n  description: string;\n  // preview image absolute URI\n  image: string;\n  animation_url?: string;\n\n  // stores link to item on meta\n  external_url: string;\n\n  seller_fee_basis_points: number;\n\n  properties: {\n    files?: FileOrString[];\n    category: MetadataCategory;\n    maxSupply?: number;\n    creators?: {\n      address: string;\n      shares: number;\n    }[];\n  };\n}\n\nexport const METADATA_SCHEMA = new Map<any, any>([\n  [\n    MasterEditionV1,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"supply\", \"u64\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n        [\"printingMint\", \"pubkeyAsString\"],\n        [\"oneTimePrintingAuthorizationMint\", \"pubkeyAsString\"],\n      ],\n    },\n  ],\n  [\n    MasterEditionV2,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"supply\", \"u64\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n      ],\n    },\n  ],\n  [\n    Edition,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"parent\", \"pubkeyAsString\"],\n        [\"edition\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    Data,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"name\", \"string\"],\n        [\"symbol\", \"string\"],\n        [\"uri\", \"string\"],\n        [\"sellerFeeBasisPoints\", \"u16\"],\n        [\"creators\", { kind: \"option\", type: [Creator] }],\n      ],\n    },\n  ],\n  [\n    Creator,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"address\", \"pubkeyAsString\"],\n        [\"verified\", \"u8\"],\n        [\"share\", \"u8\"],\n      ],\n    },\n  ],\n  [\n    Metadata,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"updateAuthority\", \"pubkeyAsString\"],\n        [\"mint\", \"pubkeyAsString\"],\n        [\"data\", Data],\n        [\"primarySaleHappened\", \"u8\"], // bool\n        [\"isMutable\", \"u8\"], // bool\n      ],\n    },\n  ],\n  [\n    EditionMarker,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"ledger\", [31]],\n      ],\n    },\n  ],\n]);\n\nexport class WhitelistedCreator {\n  key: MetaplexKey = MetaplexKey.WhitelistedCreatorV1;\n  address: StringPublicKey;\n  activated: boolean = true;\n\n  // Populated from name service\n  twitter?: string;\n  name?: string;\n  image?: string;\n  description?: string;\n\n  constructor(args: { address: string; activated: boolean }) {\n    this.address = args.address;\n    this.activated = args.activated;\n  }\n}"]},"metadata":{},"sourceType":"module"}