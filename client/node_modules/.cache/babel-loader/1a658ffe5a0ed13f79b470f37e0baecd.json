{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/anthonysiu/doko/DOKO/client/src/modules/collection/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { CircularProgress, makeStyles } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getEthNFTs, getCollectionDetail } from './api';\nimport { getSolNfts } from '../../libs/solana';\nimport { isSolAddress } from '../../libs/utils';\nimport CollectionHeader from './components/CollectionHeader'; // import TweetField from './components/TweetField';\n\nimport { Meta } from '../../components';\nimport NftData from './components/NftData';\nimport CollectionTab from './components/CollectionTab';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(function (theme) {\n  var _collectionContainer;\n\n  return {\n    collectionContainer: (_collectionContainer = {\n      padding: '24px 96px'\n    }, _defineProperty(_collectionContainer, theme.breakpoints.down('sm'), {\n      padding: 24,\n      flexDirection: 'column'\n    }), _defineProperty(_collectionContainer, \"minHeight\", 'calc(100vh)'), _collectionContainer),\n    itemsContainer: _defineProperty({\n      paddingLeft: 36\n    }, theme.breakpoints.down('sm'), {\n      paddingLeft: 0\n    }),\n    searchInput: _defineProperty({\n      width: 300\n    }, theme.breakpoints.down('xs'), {\n      width: '100%'\n    })\n  };\n});\nexport default function Collection() {\n  _s();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      collection = _useState2[0],\n      setCollection = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      nfts = _useState6[0],\n      setNFTs = _useState6[1];\n\n  var _useParams = useParams(),\n      address = _useParams.address;\n\n  var styles = useStyles();\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      tab = _useState8[0],\n      setTab = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      page = _useState10[0],\n      setPage = _useState10[1];\n\n  var fetchNfts = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield, assets, c, res;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setNFTs([]);\n\n              if (address) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              setLoading(true);\n              _context.prev = 4;\n              _context.next = 7;\n              return isSolAddress(address) ? getSolNfts(address, (page - 1) * 12) : getEthNFTs(address, (page - 1) * 12);\n\n            case 7:\n              _yield = _context.sent;\n              assets = _yield.data.assets;\n              c = collection;\n\n              if (!(page === 1 && !isSolAddress(address))) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 13;\n              return getCollectionDetail(address, assets[0].token_id);\n\n            case 13:\n              res = _context.sent;\n              setCollection(_objectSpread(_objectSpread({}, res), {}, {\n                contractAddress: address\n              }));\n              c = res;\n\n            case 16:\n              setNFTs(assets.map(function (asset) {\n                return _objectSpread(_objectSpread({}, asset), {}, {\n                  floor_price: parseFloat(c.stats.floor_price || 0).toFixed(2)\n                });\n              }));\n              _context.next = 23;\n              break;\n\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](4);\n              console.error(_context.t0);\n              setNFTs([]);\n\n            case 23:\n              setLoading(false);\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4, 19]]);\n    }));\n\n    return function fetchNfts() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (page === 1) {\n      fetchNfts();\n    } else {\n      setPage(1);\n    }\n  }, [address]);\n  useEffect(function () {\n    page && fetchNfts();\n  }, [page]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [collection && /*#__PURE__*/_jsxDEV(Meta, {\n      title: \"\".concat(collection.name, \" | DOKO\"),\n      description: collection.description,\n      image: collection.large_image_url,\n      url: \"https://doko.one\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), collection ? /*#__PURE__*/_jsxDEV(CollectionHeader, {\n      tab: tab,\n      setTab: setTab,\n      collection: collection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.collectionContainer,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.collectionContainer,\n      children: [tab === 0 && /*#__PURE__*/_jsxDEV(CollectionTab, {\n        setPage: setPage,\n        nfts: nfts,\n        loading: loading,\n        page: page,\n        collection: collection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), tab === 1 && /*#__PURE__*/_jsxDEV(NftData, {\n        collection: collection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Collection, \"xFxNdxVpVJ+ZY2pDi1/L9TJLc4k=\", false, function () {\n  return [useParams, useStyles];\n});\n\n_c = Collection;\n\nvar _c;\n\n$RefreshReg$(_c, \"Collection\");","map":{"version":3,"sources":["/Users/anthonysiu/doko/DOKO/client/src/modules/collection/index.tsx"],"names":["CircularProgress","makeStyles","useEffect","useState","useParams","getEthNFTs","getCollectionDetail","getSolNfts","isSolAddress","CollectionHeader","Meta","NftData","CollectionTab","useStyles","theme","collectionContainer","padding","breakpoints","down","flexDirection","itemsContainer","paddingLeft","searchInput","width","Collection","collection","setCollection","loading","setLoading","nfts","setNFTs","address","styles","tab","setTab","page","setPage","fetchNfts","assets","data","c","token_id","res","contractAddress","map","asset","floor_price","parseFloat","stats","toFixed","console","error","name","description","large_image_url"],"mappings":"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","sourcesContent":["import { CircularProgress, makeStyles } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getEthNFTs, getCollectionDetail } from './api';\nimport { getSolNfts } from '../../libs/solana';\n\nimport { isSolAddress } from '../../libs/utils';\nimport CollectionHeader from './components/CollectionHeader';\n// import TweetField from './components/TweetField';\nimport { Meta } from '../../components';\nimport NftData from './components/NftData';\nimport CollectionTab from './components/CollectionTab';\n\nconst useStyles = makeStyles((theme) => ({\n  collectionContainer: {\n    padding: '24px 96px',\n    [theme.breakpoints.down('sm')]: {\n      padding: 24,\n      flexDirection: 'column',\n    },\n    minHeight: 'calc(100vh)',\n  },\n  itemsContainer: {\n    paddingLeft: 36,\n    [theme.breakpoints.down('sm')]: {\n      paddingLeft: 0,\n    },\n  },\n  searchInput: {\n    width: 300,\n    [theme.breakpoints.down('xs')]: {\n      width: '100%',\n    },\n  },\n}));\n\nexport default function Collection() {\n  const [collection, setCollection] = useState<any>();\n  const [loading, setLoading] = useState(false);\n  const [nfts, setNFTs] = useState<any[]>([]);\n  const { address } = useParams<{ address: string }>();\n  const styles = useStyles();\n  const [tab, setTab] = useState(0);\n  const [page, setPage] = useState(0);\n\n  const fetchNfts = async () => {\n    setNFTs([]);\n\n    if (!address) {\n      return;\n    }\n    setLoading(true);\n\n    try {\n      const {\n        data: { assets },\n      } = await (isSolAddress(address)\n        ? getSolNfts(address, (page - 1) * 12)\n        : getEthNFTs(address, (page - 1) * 12));\n\n      let c = collection;\n\n      if (page === 1 && !isSolAddress(address)) {\n        const res = await getCollectionDetail(address, assets[0].token_id);\n        setCollection({ ...res, contractAddress: address });\n        c = res;\n      }\n      setNFTs(\n        assets.map((asset) => ({\n          ...asset,\n          floor_price: parseFloat(c.stats.floor_price || 0).toFixed(2),\n        })),\n      );\n    } catch (err) {\n      console.error(err);\n      setNFTs([]);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (page === 1) {\n      fetchNfts();\n    } else {\n      setPage(1);\n    }\n  }, [address]);\n\n  useEffect(() => {\n    page && fetchNfts();\n  }, [page]);\n\n  return (\n    <div>\n      {collection && (\n        <Meta\n          title={`${collection.name} | DOKO`}\n          description={collection.description}\n          image={collection.large_image_url}\n          url=\"https://doko.one\"\n        />\n      )}\n      {collection ? (\n        <CollectionHeader tab={tab} setTab={setTab} collection={collection} />\n      ) : (\n        <div className={styles.collectionContainer}>\n          <CircularProgress />\n        </div>\n      )}\n      <div className={styles.collectionContainer}>\n        {tab === 0 && (\n          <CollectionTab\n            setPage={setPage}\n            nfts={nfts}\n            loading={loading}\n            page={page}\n            collection={collection}\n          />\n        )}\n        {tab === 1 && <NftData collection={collection} />}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}