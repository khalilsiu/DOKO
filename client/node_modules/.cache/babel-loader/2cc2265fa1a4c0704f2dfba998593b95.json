{"ast":null,"code":"var _jsxFileName = \"/Users/anthonysiu/doko/DOKO/client/src/modules/nft-individual/traits.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport { Card, Grid, makeStyles, Typography } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(function () {\n  return {\n    traitFooter: {\n      marginTop: '1em',\n      textAlign: 'center'\n    },\n    traitCard: {\n      padding: '1em',\n      background: 'inherit',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-between',\n      height: '250px',\n      maxHeight: '250px',\n      width: '100%',\n      borderRadius: '20px',\n      border: '1px solid white',\n      alignItems: 'center',\n      color: 'inherit'\n    }\n  };\n});\nexport var GradientSVG = function GradientSVG() {\n  var color0 = '#ff06d7';\n  var color30 = '#ff06d7';\n  var color50 = '#505cb0';\n  var color80 = '#00ffef';\n  var color100 = '#00ffef';\n  var gradientTransform = 'rotate(-45)';\n  var idCSS = 'lingrad';\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    style: {\n      height: 0,\n      width: 0\n    },\n    children: /*#__PURE__*/_jsxDEV(\"defs\", {\n      children: /*#__PURE__*/_jsxDEV(\"linearGradient\", {\n        id: idCSS,\n        gradientTransform: gradientTransform,\n        children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n          offset: \"0%\",\n          stopColor: color0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"stop\", {\n          offset: \"30%\",\n          stopColor: color30\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"stop\", {\n          offset: \"50%\",\n          stopColor: color50\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"stop\", {\n          offset: \"80%\",\n          stopColor: color80\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"stop\", {\n          offset: \"100%\",\n          stopColor: color100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, _this);\n};\n_c = GradientSVG;\nexport var NftTraits = function NftTraits(_ref) {\n  _s();\n\n  var traits = _ref.traits,\n      totalSupply = _ref.totalSupply;\n  var styles = useStyles();\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    container: true,\n    justifyContent: \"flex-start\",\n    spacing: 3,\n    children: [/*#__PURE__*/_jsxDEV(GradientSVG, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, _this), traits.map(function (trait, i) {\n      var traitPercentage = trait.trait_count && totalSupply ? Math.round(trait.trait_count / totalSupply * 100) : 0;\n      var traitPercentageAvailable = !!traitPercentage;\n      var traitPercentageText = traitPercentageAvailable ? \"\".concat(traitPercentage, \" %\") : '';\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        container: true,\n        lg: 2,\n        xl: 2,\n        md: 3,\n        sm: 4,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          className: styles.traitCard,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: '1em'\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              style: {\n                fontWeight: 'bolder'\n              },\n              children: trait.trait_type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(CircularProgressbar, {\n            value: traitPercentage,\n            text: \"\".concat(traitPercentageText),\n            styles: {\n              path: {\n                stroke: 'url(#lingrad)'\n              },\n              trail: {\n                stroke: '#333333'\n              },\n              text: {\n                fill: 'white',\n                fontSize: '16px'\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.traitFooter,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              style: {\n                fontWeight: 'bolder'\n              },\n              children: trait.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, _this), traitPercentage !== 0 && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              style: {\n                fontStyle: 'italic'\n              },\n              children: [traitPercentage !== 0 ? \"\".concat(traitPercentage, \" %\") : 'N/A', \" have this trait\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 19\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, _this)\n      }, trait.trait_type + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, _this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(NftTraits, \"3bjLmUB54uhXRX+frDMowQzU8P8=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = NftTraits;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GradientSVG\");\n$RefreshReg$(_c2, \"NftTraits\");","map":{"version":3,"sources":["/Users/anthonysiu/doko/DOKO/client/src/modules/nft-individual/traits.tsx"],"names":["CircularProgressbar","Card","Grid","makeStyles","Typography","useStyles","traitFooter","marginTop","textAlign","traitCard","padding","background","display","flexDirection","justifyContent","height","maxHeight","width","borderRadius","border","alignItems","color","GradientSVG","color0","color30","color50","color80","color100","gradientTransform","idCSS","NftTraits","traits","totalSupply","styles","map","trait","i","traitPercentage","trait_count","Math","round","traitPercentageAvailable","traitPercentageText","marginBottom","fontWeight","trait_type","path","stroke","trail","text","fill","fontSize","value","fontStyle"],"mappings":";;;;AAAA,SAASA,mBAAT,QAAoC,4BAApC;AACA,OAAO,4CAAP;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,UAArB,EAAiCC,UAAjC,QAAmD,mBAAnD;;AAOA,IAAMC,SAAS,GAAGF,UAAU,CAAC;AAAA,SAAO;AAClCG,IAAAA,WAAW,EAAE;AACXC,MAAAA,SAAS,EAAE,KADA;AAEXC,MAAAA,SAAS,EAAE;AAFA,KADqB;AAKlCC,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,EAAE,KADA;AAETC,MAAAA,UAAU,EAAE,SAFH;AAGTC,MAAAA,OAAO,EAAE,MAHA;AAITC,MAAAA,aAAa,EAAE,QAJN;AAKTC,MAAAA,cAAc,EAAE,eALP;AAMTC,MAAAA,MAAM,EAAE,OANC;AAOTC,MAAAA,SAAS,EAAE,OAPF;AAQTC,MAAAA,KAAK,EAAE,MARE;AASTC,MAAAA,YAAY,EAAE,MATL;AAUTC,MAAAA,MAAM,EAAE,iBAVC;AAWTC,MAAAA,UAAU,EAAE,QAXH;AAYTC,MAAAA,KAAK,EAAE;AAZE;AALuB,GAAP;AAAA,CAAD,CAA5B;AAqBA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC/B,MAAMC,MAAM,GAAG,SAAf;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,QAAQ,GAAG,SAAjB;AACA,MAAMC,iBAAiB,GAAG,aAA1B;AACA,MAAMC,KAAK,GAAG,SAAd;AAEA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEd,MAAAA,MAAM,EAAE,CAAV;AAAaE,MAAAA,KAAK,EAAE;AAApB,KAAZ;AAAA,2BACE;AAAA,6BACE;AAAgB,QAAA,EAAE,EAAEY,KAApB;AAA2B,QAAA,iBAAiB,EAAED,iBAA9C;AAAA,gCACE;AAAM,UAAA,MAAM,EAAC,IAAb;AAAkB,UAAA,SAAS,EAAEL;AAA7B;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE;AAAM,UAAA,MAAM,EAAC,KAAb;AAAmB,UAAA,SAAS,EAAEC;AAA9B;AAAA;AAAA;AAAA;AAAA,iBAFF,eAGE;AAAM,UAAA,MAAM,EAAC,KAAb;AAAmB,UAAA,SAAS,EAAEC;AAA9B;AAAA;AAAA;AAAA;AAAA,iBAHF,eAIE;AAAM,UAAA,MAAM,EAAC,KAAb;AAAmB,UAAA,SAAS,EAAEC;AAA9B;AAAA;AAAA;AAAA;AAAA,iBAJF,eAKE;AAAM,UAAA,MAAM,EAAC,MAAb;AAAoB,UAAA,SAAS,EAAEC;AAA/B;AAAA;AAAA;AAAA;AAAA,iBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAaD,CAtBM;KAAML,W;AAuBb,OAAO,IAAMQ,SAAS,GAAG,SAAZA,SAAY,OAA6C;AAAA;;AAAA,MAA1CC,MAA0C,QAA1CA,MAA0C;AAAA,MAAlCC,WAAkC,QAAlCA,WAAkC;AACpE,MAAMC,MAAM,GAAG5B,SAAS,EAAxB;AACA,sBACE,QAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,SAAS,MAApB;AAAqB,IAAA,cAAc,EAAC,YAApC;AAAiD,IAAA,OAAO,EAAE,CAA1D;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,aADF,EAEG0B,MAAM,CAACG,GAAP,CAAW,UAACC,KAAD,EAAaC,CAAb,EAAwB;AAClC,UAAMC,eAAe,GACnBF,KAAK,CAACG,WAAN,IAAqBN,WAArB,GACIO,IAAI,CAACC,KAAL,CAAYL,KAAK,CAACG,WAAN,GAAoBN,WAArB,GAAoC,GAA/C,CADJ,GAEI,CAHN;AAIA,UAAMS,wBAAwB,GAAG,CAAC,CAACJ,eAAnC;AACA,UAAMK,mBAAmB,GAAGD,wBAAwB,aAAMJ,eAAN,UAA4B,EAAhF;AACA,0BACE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,SAAS,MAApB;AAAqB,QAAA,EAAE,EAAE,CAAzB;AAA4B,QAAA,EAAE,EAAE,CAAhC;AAAmC,QAAA,EAAE,EAAE,CAAvC;AAA0C,QAAA,EAAE,EAAE,CAA9C;AAAiD,QAAA,EAAE,EAAE,CAArD;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,SAAS,EAAEJ,MAAM,CAACxB,SAAxB;AAAA,kCACE;AAAK,YAAA,KAAK,EAAE;AAAEkC,cAAAA,YAAY,EAAE;AAAhB,aAAZ;AAAA,mCACE,QAAC,UAAD;AAAY,cAAA,OAAO,EAAC,OAApB;AAA4B,cAAA,KAAK,EAAE;AAAEC,gBAAAA,UAAU,EAAE;AAAd,eAAnC;AAAA,wBACGT,KAAK,CAACU;AADT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,mBADF,eAME,QAAC,mBAAD;AACE,YAAA,KAAK,EAAER,eADT;AAEE,YAAA,IAAI,YAAKK,mBAAL,CAFN;AAGE,YAAA,MAAM,EAAE;AACNI,cAAAA,IAAI,EAAE;AACJC,gBAAAA,MAAM,EAAE;AADJ,eADA;AAINC,cAAAA,KAAK,EAAE;AACLD,gBAAAA,MAAM,EAAE;AADH,eAJD;AAONE,cAAAA,IAAI,EAAE;AACJC,gBAAAA,IAAI,EAAE,OADF;AAEJC,gBAAAA,QAAQ,EAAE;AAFN;AAPA;AAHV;AAAA;AAAA;AAAA;AAAA,mBANF,eAsBE;AAAK,YAAA,SAAS,EAAElB,MAAM,CAAC3B,WAAvB;AAAA,oCACE,QAAC,UAAD;AAAY,cAAA,OAAO,EAAC,OAApB;AAA4B,cAAA,KAAK,EAAE;AAAEsC,gBAAAA,UAAU,EAAE;AAAd,eAAnC;AAAA,wBACGT,KAAK,CAACiB;AADT;AAAA;AAAA;AAAA;AAAA,qBADF,EAIGf,eAAe,KAAK,CAApB,iBACC,QAAC,UAAD;AAAY,cAAA,OAAO,EAAC,OAApB;AAA4B,cAAA,KAAK,EAAE;AAAEgB,gBAAAA,SAAS,EAAE;AAAb,eAAnC;AAAA,yBACGhB,eAAe,KAAK,CAApB,aAA2BA,eAA3B,UAAiD,KADpD;AAAA;AAAA;AAAA;AAAA;AAAA,qBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,mBAtBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,SAA6DF,KAAK,CAACU,UAAN,GAAmBT,CAAhF;AAAA;AAAA;AAAA;AAAA,eADF;AAqCD,KA5CA,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAkDD,CApDM;;GAAMN,S;UACIzB,S;;;MADJyB,S","sourcesContent":["import { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport { Card, Grid, makeStyles, Typography } from '@material-ui/core';\n\ninterface NFtTraitsProps {\n  traits: any;\n  totalSupply: any;\n}\n\nconst useStyles = makeStyles(() => ({\n  traitFooter: {\n    marginTop: '1em',\n    textAlign: 'center',\n  },\n  traitCard: {\n    padding: '1em',\n    background: 'inherit',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    height: '250px',\n    maxHeight: '250px',\n    width: '100%',\n    borderRadius: '20px',\n    border: '1px solid white',\n    alignItems: 'center',\n    color: 'inherit',\n  },\n}));\n\nexport const GradientSVG = () => {\n  const color0 = '#ff06d7';\n  const color30 = '#ff06d7';\n  const color50 = '#505cb0';\n  const color80 = '#00ffef';\n  const color100 = '#00ffef';\n  const gradientTransform = 'rotate(-45)';\n  const idCSS = 'lingrad';\n\n  return (\n    <svg style={{ height: 0, width: 0 }}>\n      <defs>\n        <linearGradient id={idCSS} gradientTransform={gradientTransform}>\n          <stop offset=\"0%\" stopColor={color0} />\n          <stop offset=\"30%\" stopColor={color30} />\n          <stop offset=\"50%\" stopColor={color50} />\n          <stop offset=\"80%\" stopColor={color80} />\n          <stop offset=\"100%\" stopColor={color100} />\n        </linearGradient>\n      </defs>\n    </svg>\n  );\n};\nexport const NftTraits = ({ traits, totalSupply }: NFtTraitsProps) => {\n  const styles = useStyles();\n  return (\n    <Grid item container justifyContent=\"flex-start\" spacing={3}>\n      <GradientSVG />\n      {traits.map((trait: any, i: any) => {\n        const traitPercentage =\n          trait.trait_count && totalSupply\n            ? Math.round((trait.trait_count / totalSupply) * 100)\n            : 0;\n        const traitPercentageAvailable = !!traitPercentage;\n        const traitPercentageText = traitPercentageAvailable ? `${traitPercentage} %` : '';\n        return (\n          <Grid item container lg={2} xl={2} md={3} sm={4} xs={6} key={trait.trait_type + i}>\n            <Card className={styles.traitCard}>\n              <div style={{ marginBottom: '1em' }}>\n                <Typography variant=\"body1\" style={{ fontWeight: 'bolder' }}>\n                  {trait.trait_type}\n                </Typography>\n              </div>\n              <CircularProgressbar\n                value={traitPercentage}\n                text={`${traitPercentageText}`}\n                styles={{\n                  path: {\n                    stroke: 'url(#lingrad)',\n                  },\n                  trail: {\n                    stroke: '#333333',\n                  },\n                  text: {\n                    fill: 'white',\n                    fontSize: '16px',\n                  },\n                }}\n              />\n              <div className={styles.traitFooter}>\n                <Typography variant=\"body1\" style={{ fontWeight: 'bolder' }}>\n                  {trait.value}\n                </Typography>\n                {traitPercentage !== 0 && (\n                  <Typography variant=\"body1\" style={{ fontStyle: 'italic' }}>\n                    {traitPercentage !== 0 ? `${traitPercentage} %` : 'N/A'} have this trait\n                  </Typography>\n                )}\n              </div>\n            </Card>\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}