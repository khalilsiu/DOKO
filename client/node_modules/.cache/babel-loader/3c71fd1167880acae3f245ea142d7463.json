{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport ContractServiceAPI from '../../libs/contract-service-api';\nvar initialState = [];\nexport var getDclStats = createAsyncThunk('DclStats/getDclStats', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return ContractServiceAPI.getStats('decentraland');\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n})));\nvar dclStatsSlice = createSlice({\n  name: 'DclStats',\n  initialState: initialState,\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(getDclStats.fulfilled, function (_state, action) {\n      return action.payload;\n    });\n  }\n});\nexport var dclStats = dclStatsSlice.reducer;","map":{"version":3,"sources":["/Users/anthonysiu/doko/DOKO/client/src/store/stats/dclStatsSlice.ts"],"names":["createSlice","createAsyncThunk","ContractServiceAPI","initialState","getDclStats","getStats","dclStatsSlice","name","reducers","extraReducers","builder","addCase","fulfilled","_state","action","payload","dclStats","reducer"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AAmBA,IAAMC,YAAwB,GAAG,EAAjC;AAEA,OAAO,IAAMC,WAAW,GAAGH,gBAAgB,CAAC,sBAAD,wEAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACrDC,kBAAkB,CAACG,QAAnB,CAA4B,cAA5B,CADqD;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB,GAApC;AAIP,IAAMC,aAAa,GAAGN,WAAW,CAAC;AAChCO,EAAAA,IAAI,EAAE,UAD0B;AAEhCJ,EAAAA,YAAY,EAAZA,YAFgC;AAGhCK,EAAAA,QAAQ,EAAE,EAHsB;AAIhCC,EAAAA,aAAa,EAAE,uBAACC,OAAD,EAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBP,WAAW,CAACQ,SAA5B,EAAuC,UAACC,MAAD,EAASC,MAAT;AAAA,aAAoBA,MAAM,CAACC,OAA3B;AAAA,KAAvC;AACD;AAN+B,CAAD,CAAjC;AASA,OAAO,IAAMC,QAAQ,GAAGV,aAAa,CAACW,OAA/B","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport ContractServiceAPI from '../../libs/contract-service-api';\n\nexport interface DclStats {\n  id: number;\n  coordinates: string;\n  ytdUsers: number;\n  ytdSessions: number;\n  ytdMedianSessionTime: number;\n  ytdMaxConcurrentUsers: number;\n  weeklyUsers: number;\n  weeklySessions: number;\n  weeklyMedianSessionTime: number;\n  weeklyMaxConcurrentUsers: number;\n  monthlyUsers: number;\n  monthlySessions: number;\n  monthlyMedianSessionTime: number;\n  monthlyMaxConcurrentUsers: number;\n}\n\nconst initialState: DclStats[] = [];\n\nexport const getDclStats = createAsyncThunk('DclStats/getDclStats', async () => {\n  return await ContractServiceAPI.getStats('decentraland');\n});\n\nconst dclStatsSlice = createSlice({\n  name: 'DclStats',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(getDclStats.fulfilled, (_state, action) => action.payload);\n  },\n});\n\nexport const dclStats = dclStatsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}