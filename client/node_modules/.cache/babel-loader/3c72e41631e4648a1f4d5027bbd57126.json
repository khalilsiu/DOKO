{"ast":null,"code":"import _toConsumableArray from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport metaverses from '../constants/metaverses';\n\nfunction match(filters, trait) {\n  if (!filters.length) {\n    return false;\n  }\n\n  return filters.every(function (filter) {\n    if (filter.traitType !== trait.traitType) {\n      return false;\n    }\n\n    if (filter.operator === '=' && filter.value !== trait.value) {\n      return false;\n    }\n\n    if (filter.operator === '>=' && !(filter.value >= trait.value)) {\n      return false;\n    }\n\n    if (filter.operator === '<=' && !(filter.value <= trait.value)) {\n      return false;\n    }\n\n    return true;\n  });\n}\n\nexport function getAggregatedSummary(collectionSummaries, ownerships, isLoading) {\n  return metaverses.map(function (metaverse, metaverseIndex) {\n    // get traits with floor price from collection summaries\n    var traitsWithFloorPrice = metaverse.traits.map(function (filters, traitIndex) {\n      return {\n        filters: filters,\n        floorPrice: collectionSummaries[metaverseIndex].traits[traitIndex]\n      };\n    });\n    var assetsWithFloorPrice = ownerships[metaverseIndex].map(function (asset) {\n      // floor price be collection floor price then match price with filter\n      var floorPrice = traitsWithFloorPrice[0].floorPrice;\n      asset.traits.forEach(function (trait) {\n        traitsWithFloorPrice.forEach(function (traitFilter) {\n          if (!match(traitFilter.filters, trait)) {\n            return;\n          }\n\n          floorPrice = traitFilter.floorPrice;\n        });\n      }); // special case for decentraland estate\n\n      if (asset.assetContract.address === '0x959e104e1a4db6317fa58f8295f586e1a978c297') {\n        var sizeTrait = asset.traits.find(function (trait) {\n          return trait.traitType === 'Size';\n        });\n        var size = parseInt(sizeTrait && sizeTrait.value || '1', 10);\n        floorPrice *= size;\n      }\n\n      return _objectSpread(_objectSpread({}, asset), {}, {\n        floorPrice: floorPrice\n      });\n    });\n    return {\n      name: metaverse.label,\n      icon: metaverse.icon,\n      count: assetsWithFloorPrice.length,\n      price: assetsWithFloorPrice.reduce(function (floorPrice, asset) {\n        return asset.floorPrice + floorPrice;\n      }, 0),\n      available: true,\n      loading: isLoading,\n      ownership: assetsWithFloorPrice\n    };\n  });\n}\n\nvar useProfileSummaries = function useProfileSummaries() {\n  _s();\n\n  var profileOwnership = useSelector(function (state) {\n    return state.profileOwnership;\n  });\n  var collectionSummaries = useSelector(function (state) {\n    return state.collectionSummary;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.appState;\n  }),\n      isLoading = _useSelector.isLoading;\n\n  var profileSummaries = useMemo(function () {\n    var aggregatedOwnerships = metaverses.map(function (_, metaverseIndex) {\n      var metaverseOwnership = [];\n      profileOwnership.forEach(function (profile) {\n        metaverseOwnership.push.apply(metaverseOwnership, _toConsumableArray(profile.assets[metaverseIndex]));\n      });\n      return metaverseOwnership;\n    });\n    return getAggregatedSummary(collectionSummaries, aggregatedOwnerships, isLoading);\n  }, [collectionSummaries, profileOwnership, isLoading]);\n  return profileSummaries;\n};\n\n_s(useProfileSummaries, \"7Ef8DMcz8muR8X3W73jzfxVQ7ZU=\", false, function () {\n  return [useSelector, useSelector, useSelector];\n});\n\nexport default useProfileSummaries;","map":{"version":3,"sources":["/Users/anthonysiu/doko/DOKO/client/src/hooks/useProfileSummaries.ts"],"names":["useMemo","useSelector","metaverses","match","filters","trait","length","every","filter","traitType","operator","value","getAggregatedSummary","collectionSummaries","ownerships","isLoading","map","metaverse","metaverseIndex","traitsWithFloorPrice","traits","traitIndex","floorPrice","assetsWithFloorPrice","asset","forEach","traitFilter","assetContract","address","sizeTrait","find","size","parseInt","name","label","icon","count","price","reduce","available","loading","ownership","useProfileSummaries","profileOwnership","state","collectionSummary","appState","profileSummaries","aggregatedOwnerships","_","metaverseOwnership","profile","push","assets"],"mappings":"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","sourcesContent":["import { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport metaverses from '../constants/metaverses';\nimport { MetaverseSummary } from '../store/meta-nft-collections/collectionSummarySlice';\nimport { Asset, Trait } from '../store/meta-nft-collections/profileOwnershipSlice';\n\nimport { RootState } from '../store/store';\n\nexport interface Filter {\n  traitType: string;\n  value: any;\n  operator: string;\n}\n\nfunction match(filters: Filter[], trait: Trait) {\n  if (!filters.length) {\n    return false;\n  }\n  return filters.every((filter) => {\n    if (filter.traitType !== trait.traitType) {\n      return false;\n    }\n    if (filter.operator === '=' && filter.value !== trait.value) {\n      return false;\n    }\n    if (filter.operator === '>=' && !(filter.value >= trait.value)) {\n      return false;\n    }\n    if (filter.operator === '<=' && !(filter.value <= trait.value)) {\n      return false;\n    }\n    return true;\n  });\n}\n\nexport interface AggregatedSummary {\n  name: string;\n  icon: string;\n  count: number;\n  price: number;\n  available: boolean;\n  loading: boolean;\n  ownership: Asset[];\n}\n\nexport function getAggregatedSummary(\n  collectionSummaries: MetaverseSummary[],\n  ownerships: Asset[][],\n  isLoading: boolean,\n) {\n  return metaverses.map((metaverse, metaverseIndex) => {\n    // get traits with floor price from collection summaries\n    const traitsWithFloorPrice = metaverse.traits.map((filters, traitIndex) => ({\n      filters,\n      floorPrice: collectionSummaries[metaverseIndex].traits[traitIndex],\n    }));\n\n    const assetsWithFloorPrice = ownerships[metaverseIndex].map((asset) => {\n      // floor price be collection floor price then match price with filter\n      let { floorPrice } = traitsWithFloorPrice[0];\n\n      asset.traits.forEach((trait) => {\n        traitsWithFloorPrice.forEach((traitFilter) => {\n          if (!match(traitFilter.filters, trait)) {\n            return;\n          }\n          floorPrice = traitFilter.floorPrice;\n        });\n      });\n      // special case for decentraland estate\n      if (asset.assetContract.address === '0x959e104e1a4db6317fa58f8295f586e1a978c297') {\n        const sizeTrait = asset.traits.find((trait) => trait.traitType === 'Size');\n        const size = parseInt((sizeTrait && sizeTrait.value) || '1', 10);\n        floorPrice *= size;\n      }\n\n      return {\n        ...asset,\n        floorPrice,\n      };\n    });\n\n    return {\n      name: metaverse.label,\n      icon: metaverse.icon,\n      count: assetsWithFloorPrice.length,\n\n      price: assetsWithFloorPrice.reduce((floorPrice, asset) => asset.floorPrice + floorPrice, 0),\n      available: true,\n      loading: isLoading,\n      ownership: assetsWithFloorPrice,\n    };\n  });\n}\n\nconst useProfileSummaries = () => {\n  const profileOwnership = useSelector((state: RootState) => state.profileOwnership);\n\n  const collectionSummaries = useSelector((state: RootState) => state.collectionSummary);\n\n  const { isLoading } = useSelector((state: RootState) => state.appState);\n\n  const profileSummaries = useMemo(() => {\n    const aggregatedOwnerships: Asset[][] = metaverses.map((_, metaverseIndex) => {\n      const metaverseOwnership: Asset[] = [];\n      profileOwnership.forEach((profile) => {\n        metaverseOwnership.push(...profile.assets[metaverseIndex]);\n      });\n      return metaverseOwnership;\n    });\n\n    return getAggregatedSummary(collectionSummaries, aggregatedOwnerships, isLoading);\n  }, [collectionSummaries, profileOwnership, isLoading]);\n\n  return profileSummaries;\n};\n\nexport default useProfileSummaries;\n"]},"metadata":{},"sourceType":"module"}