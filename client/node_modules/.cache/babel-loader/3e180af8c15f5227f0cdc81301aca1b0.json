{"ast":null,"code":"var _jsxFileName = \"/Users/anthonysiu/doko/DOKO/client/src/modules/meta-nft-individual/solanaTraits.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport 'react-circular-progressbar/dist/styles.css';\nimport { Card, Grid, makeStyles, Typography } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(function () {\n  return {\n    traitFooter: {\n      marginTop: '1em',\n      textAlign: 'center'\n    },\n    traitCard: {\n      padding: '1em',\n      background: 'inherit',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-between',\n      height: '120px',\n      maxHeight: '250px',\n      width: '100%',\n      borderRadius: '20px',\n      border: '1px solid white',\n      alignItems: 'center',\n      color: 'inherit'\n    }\n  };\n});\nexport var GradientSVG = function GradientSVG() {\n  var color0 = '#ff06d7';\n  var color30 = '#ff06d7';\n  var color50 = '#505cb0';\n  var color80 = '#00ffef';\n  var color100 = '#00ffef';\n  var gradientTransform = 'rotate(-45)';\n  var idCSS = 'lingrad';\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    style: {\n      height: 0,\n      width: 0\n    },\n    children: /*#__PURE__*/_jsxDEV(\"defs\", {\n      children: /*#__PURE__*/_jsxDEV(\"linearGradient\", {\n        id: idCSS,\n        gradientTransform: gradientTransform,\n        children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n          offset: \"0%\",\n          stopColor: color0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"stop\", {\n          offset: \"30%\",\n          stopColor: color30\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"stop\", {\n          offset: \"50%\",\n          stopColor: color50\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"stop\", {\n          offset: \"80%\",\n          stopColor: color80\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"stop\", {\n          offset: \"100%\",\n          stopColor: color100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, _this);\n};\n_c = GradientSVG;\nexport var SolanaNftTraits = function SolanaNftTraits(_ref) {\n  _s();\n\n  var traits = _ref.traits;\n  var styles = useStyles();\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    container: true,\n    justifyContent: \"flex-start\",\n    spacing: 3,\n    children: [/*#__PURE__*/_jsxDEV(GradientSVG, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, _this), traits.map(function (trait, i) {\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        container: true,\n        lg: 2,\n        xl: 2,\n        md: 3,\n        sm: 4,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          className: styles.traitCard,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: '1em'\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              style: {\n                fontWeight: 'bolder'\n              },\n              children: trait.trait_type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.traitFooter,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              style: {\n                fontWeight: 'bolder'\n              },\n              children: trait.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, _this)\n      }, trait.trait_type + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, _this);\n    }), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(SolanaNftTraits, \"3bjLmUB54uhXRX+frDMowQzU8P8=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = SolanaNftTraits;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GradientSVG\");\n$RefreshReg$(_c2, \"SolanaNftTraits\");","map":{"version":3,"sources":["/Users/anthonysiu/doko/DOKO/client/src/modules/meta-nft-individual/solanaTraits.tsx"],"names":["Card","Grid","makeStyles","Typography","useStyles","traitFooter","marginTop","textAlign","traitCard","padding","background","display","flexDirection","justifyContent","height","maxHeight","width","borderRadius","border","alignItems","color","GradientSVG","color0","color30","color50","color80","color100","gradientTransform","idCSS","SolanaNftTraits","traits","styles","map","trait","i","marginBottom","fontWeight","trait_type","value"],"mappings":";;;;AAAA,OAAO,4CAAP;AACA,SAASA,IAAT,EAAeC,IAAf,EAAqBC,UAArB,EAAiCC,UAAjC,QAAmD,mBAAnD;;AAMA,IAAMC,SAAS,GAAGF,UAAU,CAAC;AAAA,SAAO;AAClCG,IAAAA,WAAW,EAAE;AACXC,MAAAA,SAAS,EAAE,KADA;AAEXC,MAAAA,SAAS,EAAE;AAFA,KADqB;AAKlCC,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,EAAE,KADA;AAETC,MAAAA,UAAU,EAAE,SAFH;AAGTC,MAAAA,OAAO,EAAE,MAHA;AAITC,MAAAA,aAAa,EAAE,QAJN;AAKTC,MAAAA,cAAc,EAAE,eALP;AAMTC,MAAAA,MAAM,EAAE,OANC;AAOTC,MAAAA,SAAS,EAAE,OAPF;AAQTC,MAAAA,KAAK,EAAE,MARE;AASTC,MAAAA,YAAY,EAAE,MATL;AAUTC,MAAAA,MAAM,EAAE,iBAVC;AAWTC,MAAAA,UAAU,EAAE,QAXH;AAYTC,MAAAA,KAAK,EAAE;AAZE;AALuB,GAAP;AAAA,CAAD,CAA5B;AAqBA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC/B,MAAMC,MAAM,GAAG,SAAf;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,QAAQ,GAAG,SAAjB;AACA,MAAMC,iBAAiB,GAAG,aAA1B;AACA,MAAMC,KAAK,GAAG,SAAd;AAEA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEd,MAAAA,MAAM,EAAE,CAAV;AAAaE,MAAAA,KAAK,EAAE;AAApB,KAAZ;AAAA,2BACE;AAAA,6BACE;AAAgB,QAAA,EAAE,EAAEY,KAApB;AAA2B,QAAA,iBAAiB,EAAED,iBAA9C;AAAA,gCACE;AAAM,UAAA,MAAM,EAAC,IAAb;AAAkB,UAAA,SAAS,EAAEL;AAA7B;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE;AAAM,UAAA,MAAM,EAAC,KAAb;AAAmB,UAAA,SAAS,EAAEC;AAA9B;AAAA;AAAA;AAAA;AAAA,iBAFF,eAGE;AAAM,UAAA,MAAM,EAAC,KAAb;AAAmB,UAAA,SAAS,EAAEC;AAA9B;AAAA;AAAA;AAAA;AAAA,iBAHF,eAIE;AAAM,UAAA,MAAM,EAAC,KAAb;AAAmB,UAAA,SAAS,EAAEC;AAA9B;AAAA;AAAA;AAAA;AAAA,iBAJF,eAKE;AAAM,UAAA,MAAM,EAAC,MAAb;AAAoB,UAAA,SAAS,EAAEC;AAA/B;AAAA;AAAA;AAAA;AAAA,iBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAaD,CAtBM;KAAML,W;AAuBb,OAAO,IAAMQ,eAAe,GAAG,SAAlBA,eAAkB,OAAgC;AAAA;;AAAA,MAA7BC,MAA6B,QAA7BA,MAA6B;AAC7D,MAAMC,MAAM,GAAG3B,SAAS,EAAxB;AACA,sBACE,QAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,SAAS,MAApB;AAAqB,IAAA,cAAc,EAAC,YAApC;AAAiD,IAAA,OAAO,EAAE,CAA1D;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,aADF,EAEG0B,MAAM,CAACE,GAAP,CAAW,UAACC,KAAD,EAAaC,CAAb;AAAA,0BACV,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,SAAS,MAApB;AAAqB,QAAA,EAAE,EAAE,CAAzB;AAA4B,QAAA,EAAE,EAAE,CAAhC;AAAmC,QAAA,EAAE,EAAE,CAAvC;AAA0C,QAAA,EAAE,EAAE,CAA9C;AAAiD,QAAA,EAAE,EAAE,CAArD;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,SAAS,EAAEH,MAAM,CAACvB,SAAxB;AAAA,kCACE;AAAK,YAAA,KAAK,EAAE;AAAE2B,cAAAA,YAAY,EAAE;AAAhB,aAAZ;AAAA,mCACE,QAAC,UAAD;AAAY,cAAA,OAAO,EAAC,OAApB;AAA4B,cAAA,KAAK,EAAE;AAAEC,gBAAAA,UAAU,EAAE;AAAd,eAAnC;AAAA,wBACGH,KAAK,CAACI;AADT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,mBADF,eAME;AAAK,YAAA,SAAS,EAAEN,MAAM,CAAC1B,WAAvB;AAAA,mCACE,QAAC,UAAD;AAAY,cAAA,OAAO,EAAC,OAApB;AAA4B,cAAA,KAAK,EAAE;AAAE+B,gBAAAA,UAAU,EAAE;AAAd,eAAnC;AAAA,wBACGH,KAAK,CAACK;AADT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,mBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,SAA6DL,KAAK,CAACI,UAAN,GAAmBH,CAAhF;AAAA;AAAA;AAAA;AAAA,eADU;AAAA,KAAX,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAsBD,CAxBM;;GAAML,e;UACIzB,S;;;MADJyB,e","sourcesContent":["import 'react-circular-progressbar/dist/styles.css';\nimport { Card, Grid, makeStyles, Typography } from '@material-ui/core';\n\ninterface NFtTraitsProps {\n  traits: any;\n}\n\nconst useStyles = makeStyles(() => ({\n  traitFooter: {\n    marginTop: '1em',\n    textAlign: 'center',\n  },\n  traitCard: {\n    padding: '1em',\n    background: 'inherit',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    height: '120px',\n    maxHeight: '250px',\n    width: '100%',\n    borderRadius: '20px',\n    border: '1px solid white',\n    alignItems: 'center',\n    color: 'inherit',\n  },\n}));\n\nexport const GradientSVG = () => {\n  const color0 = '#ff06d7';\n  const color30 = '#ff06d7';\n  const color50 = '#505cb0';\n  const color80 = '#00ffef';\n  const color100 = '#00ffef';\n  const gradientTransform = 'rotate(-45)';\n  const idCSS = 'lingrad';\n\n  return (\n    <svg style={{ height: 0, width: 0 }}>\n      <defs>\n        <linearGradient id={idCSS} gradientTransform={gradientTransform}>\n          <stop offset=\"0%\" stopColor={color0} />\n          <stop offset=\"30%\" stopColor={color30} />\n          <stop offset=\"50%\" stopColor={color50} />\n          <stop offset=\"80%\" stopColor={color80} />\n          <stop offset=\"100%\" stopColor={color100} />\n        </linearGradient>\n      </defs>\n    </svg>\n  );\n};\nexport const SolanaNftTraits = ({ traits }: NFtTraitsProps) => {\n  const styles = useStyles();\n  return (\n    <Grid item container justifyContent=\"flex-start\" spacing={3}>\n      <GradientSVG />\n      {traits.map((trait: any, i: any) => (\n        <Grid item container lg={2} xl={2} md={3} sm={4} xs={6} key={trait.trait_type + i}>\n          <Card className={styles.traitCard}>\n            <div style={{ marginBottom: '1em' }}>\n              <Typography variant=\"body1\" style={{ fontWeight: 'bolder' }}>\n                {trait.trait_type}\n              </Typography>\n            </div>\n            <div className={styles.traitFooter}>\n              <Typography variant=\"body1\" style={{ fontWeight: 'bolder' }}>\n                {trait.value}\n              </Typography>\n            </div>\n          </Card>\n        </Grid>\n      ))}\n      ;\n    </Grid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}