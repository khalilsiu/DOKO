{"ast":null,"code":"import { fetchProfileOwnership } from '../meta-nft-collections';\nimport { fetchAddressOwnership } from '../meta-nft-collections/addressOwnershipSlice';\nimport { createSlice } from '@reduxjs/toolkit';\nimport { getDclStats } from '../stats/dclStatsSlice';\nvar initialState = {\n  isLoading: false\n};\nvar appStateSlice = createSlice({\n  name: 'AppState',\n  initialState: initialState,\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchAddressOwnership.pending, function (state) {\n      state.isLoading = true;\n    }).addCase(fetchProfileOwnership.pending, function (state) {\n      state.isLoading = true;\n    }).addCase(getDclStats.pending, function (state) {\n      state.isLoading = true;\n    }).addCase(getDclStats.fulfilled, function (state) {\n      state.isLoading = false;\n    }) // fulfilled\n    .addCase(fetchProfileOwnership.fulfilled, function (state) {\n      state.isLoading = false;\n    });\n  }\n}); // export const { getUserOwnership } = appStateSlice.actions;\n\nexport var appState = appStateSlice.reducer;","map":{"version":3,"sources":["/Users/anthonysiu/doko/DOKO/client/src/store/app/appStateSlice.ts"],"names":["fetchProfileOwnership","fetchAddressOwnership","createSlice","getDclStats","initialState","isLoading","appStateSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","appState","reducer"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,yBAAtC;AACA,SAASC,qBAAT,QAAsC,+CAAtC;AACA,SAASC,WAAT,QAA2C,kBAA3C;AACA,SAASC,WAAT,QAA4B,wBAA5B;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE;AADQ,CAArB;AAIA,IAAMC,aAAa,GAAGJ,WAAW,CAAC;AAChCK,EAAAA,IAAI,EAAE,UAD0B;AAEhCH,EAAAA,YAAY,EAAZA,YAFgC;AAGhCI,EAAAA,QAAQ,EAAE,EAHsB;AAIhCC,EAAAA,aAAa,EAAE,uBAACC,OAAD,EAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWV,qBAAqB,CAACW,OADjC,EAC0C,UAACC,KAAD,EAAW;AACjDA,MAAAA,KAAK,CAACR,SAAN,GAAkB,IAAlB;AACD,KAHH,EAIGM,OAJH,CAIWX,qBAAqB,CAACY,OAJjC,EAI0C,UAACC,KAAD,EAAW;AACjDA,MAAAA,KAAK,CAACR,SAAN,GAAkB,IAAlB;AACD,KANH,EAOGM,OAPH,CAOWR,WAAW,CAACS,OAPvB,EAOgC,UAACC,KAAD,EAAW;AACvCA,MAAAA,KAAK,CAACR,SAAN,GAAkB,IAAlB;AACD,KATH,EAUGM,OAVH,CAUWR,WAAW,CAACW,SAVvB,EAUkC,UAACD,KAAD,EAAW;AACzCA,MAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;AACD,KAZH,EAaE;AAbF,KAcGM,OAdH,CAcWX,qBAAqB,CAACc,SAdjC,EAc4C,UAACD,KAAD,EAAW;AACnDA,MAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;AACD,KAhBH;AAiBD;AAtB+B,CAAD,CAAjC,C,CAyBA;;AAEA,OAAO,IAAMU,QAAQ,GAAGT,aAAa,CAACU,OAA/B","sourcesContent":["import { fetchProfileOwnership } from '../meta-nft-collections';\nimport { fetchAddressOwnership } from '../meta-nft-collections/addressOwnershipSlice';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { getDclStats } from '../stats/dclStatsSlice';\n\nconst initialState = {\n  isLoading: false,\n};\n\nconst appStateSlice = createSlice({\n  name: 'AppState',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchAddressOwnership.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(fetchProfileOwnership.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(getDclStats.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(getDclStats.fulfilled, (state) => {\n        state.isLoading = false;\n      })\n      // fulfilled\n      .addCase(fetchProfileOwnership.fulfilled, (state) => {\n        state.isLoading = false;\n      });\n  },\n});\n\n// export const { getUserOwnership } = appStateSlice.actions;\n\nexport const appState = appStateSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}