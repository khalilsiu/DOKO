{"ast":null,"code":"import _slicedToArray from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport L from 'leaflet';\nimport { useEffect, useRef } from 'react';\nimport { useState } from 'react';\n\nvar useRenderMaps = function useRenderMaps(_ref) {\n  _s();\n\n  var bounds = _ref.bounds,\n      items = _ref.items,\n      selected = _ref.selected,\n      center = _ref.center;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      map = _useState2[0],\n      setMap = _useState2[1];\n\n  var markerRefs = useRef([]);\n\n  var _useState3 = useState(center),\n      _useState4 = _slicedToArray(_useState3, 2),\n      position = _useState4[0],\n      setPosition = _useState4[1];\n\n  var _useState5 = useState(new L.LatLngBounds([[0, 0], [0, 0]])),\n      _useState6 = _slicedToArray(_useState5, 2),\n      latLangBounds = _useState6[0],\n      setLatLangBounds = _useState6[1]; // for tilelayers to load tiles\n\n\n  var ResizeMap = function ResizeMap() {\n    setTimeout(function () {\n      map === null || map === void 0 ? void 0 : map.invalidateSize();\n    }, 250);\n    return null;\n  }; // for tilelayers to load tiles\n\n\n  var ChangeMapView = function ChangeMapView(_ref2) {\n    var coords = _ref2.coords;\n    map === null || map === void 0 ? void 0 : map.setView(coords);\n    return null;\n  };\n\n  useEffect(function () {\n    markerRefs.current = markerRefs.current.slice(0, items.length);\n  }, [items]);\n  useEffect(function () {\n    if (!map) return;\n    map.closePopup();\n\n    if (markerRefs && selected !== null && markerRefs.current[selected].ref) {\n      var _markerRefs$current$s, _markerRefs$current$s2;\n\n      var coords = markerRefs.current[selected].position;\n      var popup = (_markerRefs$current$s = markerRefs.current[selected].ref) === null || _markerRefs$current$s === void 0 ? void 0 : _markerRefs$current$s.getPopup();\n      if (!popup) return;\n      map.setView(new L.LatLng(coords[0], coords[1]));\n      (_markerRefs$current$s2 = markerRefs.current[selected].ref) === null || _markerRefs$current$s2 === void 0 ? void 0 : _markerRefs$current$s2.openPopup();\n      setPosition(coords);\n      return;\n    }\n  }, [selected, map, markerRefs, markerRefs.current]);\n  useEffect(function () {\n    if (map && bounds) {\n      var newBounds = new L.LatLngBounds(map.unproject(bounds.southwest, 0), map.unproject(bounds.northeast, 0));\n      setLatLangBounds(newBounds);\n      map.setMaxBounds(newBounds);\n    }\n  }, [map]); // position is map center\n  // set map to initialize other properties e.g. bounds\n\n  return {\n    position: position,\n    markerRefs: markerRefs,\n    latLangBounds: latLangBounds,\n    setMap: setMap,\n    ResizeMap: ResizeMap,\n    ChangeMapView: ChangeMapView\n  };\n};\n\n_s(useRenderMaps, \"mSKC6QMZlHPUu8CR9Ou61C+H8LY=\");\n\nexport default useRenderMaps;","map":{"version":3,"sources":["/Users/anthonysiu/doko/DOKO/client/src/hooks/useRenderMaps.ts"],"names":["L","useEffect","useRef","useState","useRenderMaps","bounds","items","selected","center","map","setMap","markerRefs","position","setPosition","LatLngBounds","latLangBounds","setLatLangBounds","ResizeMap","setTimeout","invalidateSize","ChangeMapView","coords","setView","current","slice","length","closePopup","ref","popup","getPopup","LatLng","openPopup","newBounds","unproject","southwest","northeast","setMaxBounds"],"mappings":"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","sourcesContent":["import L, { Map } from 'leaflet';\nimport { useEffect, useRef } from 'react';\nimport { useState } from 'react';\nimport { Pair } from '../types/interfaces';\n\ninterface IProps {\n  bounds?: {\n    southwest: Pair<number, number>;\n    northeast: Pair<number, number>;\n  };\n  items: any[];\n  selected: number | null;\n  center: L.LatLngExpression;\n}\n\nconst useRenderMaps = ({ bounds, items, selected, center }: IProps) => {\n  const [map, setMap] = useState<Map | null>(null);\n  const markerRefs = useRef<{ ref: L.Marker | null; position: L.LatLngExpression }[]>([]);\n  const [position, setPosition] = useState<L.LatLngExpression>(center);\n  const [latLangBounds, setLatLangBounds] = useState<L.LatLngBounds>(\n    new L.LatLngBounds([\n      [0, 0],\n      [0, 0],\n    ]),\n  );\n\n  // for tilelayers to load tiles\n  const ResizeMap = () => {\n    setTimeout(() => {\n      map?.invalidateSize();\n    }, 250);\n    return null;\n  };\n\n  // for tilelayers to load tiles\n  const ChangeMapView = ({ coords }) => {\n    map?.setView(coords);\n    return null;\n  };\n\n  useEffect(() => {\n    markerRefs.current = markerRefs.current.slice(0, items.length);\n  }, [items]);\n\n  useEffect(() => {\n    if (!map) return;\n    map.closePopup();\n    if (markerRefs && selected !== null && markerRefs.current[selected].ref) {\n      const coords = markerRefs.current[selected].position;\n      const popup = markerRefs.current[selected].ref?.getPopup();\n      if (!popup) return;\n      map.setView(new L.LatLng(coords[0], coords[1]));\n      markerRefs.current[selected].ref?.openPopup();\n      setPosition(coords);\n      return;\n    }\n  }, [selected, map, markerRefs, markerRefs.current]);\n\n  useEffect(() => {\n    if (map && bounds) {\n      const newBounds = new L.LatLngBounds(\n        map.unproject(bounds.southwest, 0),\n        map.unproject(bounds.northeast, 0),\n      );\n      setLatLangBounds(newBounds);\n      map.setMaxBounds(newBounds);\n    }\n  }, [map]);\n\n  // position is map center\n  // set map to initialize other properties e.g. bounds\n  return { position, markerRefs, latLangBounds, setMap, ResizeMap, ChangeMapView };\n};\n\nexport default useRenderMaps;\n"]},"metadata":{},"sourceType":"module"}