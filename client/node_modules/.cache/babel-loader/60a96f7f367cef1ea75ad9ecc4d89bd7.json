{"ast":null,"code":"var _jsxFileName = \"/Users/anthonysiu/doko/DOKO/client/src/components/maps/RenderMaps.tsx\",\n    _this = this;\n\nimport DecentralandMap from './DecentralandMap';\nimport CryptovoxelsMap from './CryptovoxelsMap';\nimport SomniumSpaceMap from './SomniumSpaceMap';\nimport SandboxMap from './SandboxMap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar RenderMaps = function RenderMaps(_ref) {\n  var metaverseName = _ref.metaverseName,\n      assetsSelected = _ref.assetsSelected,\n      assets = _ref.assets;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: metaverseName === 'Decentraland' ? /*#__PURE__*/_jsxDEV(DecentralandMap, {\n      assets: assets,\n      selected: assetsSelected[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, _this) : metaverseName === 'The Sandbox' ? /*#__PURE__*/_jsxDEV(SandboxMap, {\n      assets: assets,\n      selected: assetsSelected[1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, _this) : metaverseName === 'Cryptovoxels' ? /*#__PURE__*/_jsxDEV(CryptovoxelsMap, {\n      assets: assets,\n      selected: assetsSelected[2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, _this) : /*#__PURE__*/_jsxDEV(SomniumSpaceMap, {\n      assets: assets,\n      selected: assetsSelected[3]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = RenderMaps;\nexport default RenderMaps;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderMaps\");","map":{"version":3,"sources":["/Users/anthonysiu/doko/DOKO/client/src/components/maps/RenderMaps.tsx"],"names":["DecentralandMap","CryptovoxelsMap","SomniumSpaceMap","SandboxMap","RenderMaps","metaverseName","assetsSelected","assets"],"mappings":";;;AAAA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AASA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAgE;AAAA,MAA7DC,aAA6D,QAA7DA,aAA6D;AAAA,MAA9CC,cAA8C,QAA9CA,cAA8C;AAAA,MAA9BC,MAA8B,QAA9BA,MAA8B;AACjF,sBACE;AAAA,cACGF,aAAa,KAAK,cAAlB,gBACC,QAAC,eAAD;AAAiB,MAAA,MAAM,EAAEE,MAAzB;AAAiC,MAAA,QAAQ,EAAED,cAAc,CAAC,CAAD;AAAzD;AAAA;AAAA;AAAA;AAAA,aADD,GAEGD,aAAa,KAAK,aAAlB,gBACF,QAAC,UAAD;AAAY,MAAA,MAAM,EAAEE,MAApB;AAA4B,MAAA,QAAQ,EAAED,cAAc,CAAC,CAAD;AAApD;AAAA;AAAA;AAAA;AAAA,aADE,GAEAD,aAAa,KAAK,cAAlB,gBACF,QAAC,eAAD;AAAiB,MAAA,MAAM,EAAEE,MAAzB;AAAiC,MAAA,QAAQ,EAAED,cAAc,CAAC,CAAD;AAAzD;AAAA;AAAA;AAAA;AAAA,aADE,gBAGF,QAAC,eAAD;AAAiB,MAAA,MAAM,EAAEC,MAAzB;AAAiC,MAAA,QAAQ,EAAED,cAAc,CAAC,CAAD;AAAzD;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,WADF;AAaD,CAdD;;KAAMF,U;AAgBN,eAAeA,UAAf","sourcesContent":["import DecentralandMap from './DecentralandMap';\nimport CryptovoxelsMap from './CryptovoxelsMap';\nimport SomniumSpaceMap from './SomniumSpaceMap';\nimport SandboxMap from './SandboxMap';\nimport { Asset } from '../../store/meta-nft-collections/profileOwnershipSlice';\n\ninterface RenderMapsProps {\n  metaverseName: string;\n  assetsSelected: Array<number | null>;\n  assets: Asset[];\n}\n\nconst RenderMaps = ({ metaverseName, assetsSelected, assets }: RenderMapsProps) => {\n  return (\n    <div>\n      {metaverseName === 'Decentraland' ? (\n        <DecentralandMap assets={assets} selected={assetsSelected[0]} />\n      ) : metaverseName === 'The Sandbox' ? (\n        <SandboxMap assets={assets} selected={assetsSelected[1]} />\n      ) : metaverseName === 'Cryptovoxels' ? (\n        <CryptovoxelsMap assets={assets} selected={assetsSelected[2]} />\n      ) : (\n        <SomniumSpaceMap assets={assets} selected={assetsSelected[3]} />\n      )}\n    </div>\n  );\n};\n\nexport default RenderMaps;\n"]},"metadata":{},"sourceType":"module"}