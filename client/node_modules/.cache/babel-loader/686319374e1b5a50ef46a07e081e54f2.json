{"ast":null,"code":"import _objectSpread from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport metaverses from '../../constants/metaverses';\nimport { fetchAssets } from './profileOwnershipSlice';\nvar initialState = {\n  assets: Array(metaverses.length).fill(null).map(function () {\n    return [];\n  }),\n  address: ''\n};\nexport var fetchAddressOwnership = createAsyncThunk('AddressOwnership/fetchAddressOwnership', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = address;\n            _context.next = 3;\n            return fetchAssets(address);\n\n          case 3:\n            _context.t1 = _context.sent;\n            return _context.abrupt(\"return\", {\n              address: _context.t0,\n              assets: _context.t1\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\nvar addressOwnershipSlice = createSlice({\n  name: 'AddressOwnership',\n  initialState: initialState,\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    builder // .addCase(fetchAddressOwnership.pending, (state) => {\n    //   state.isLoading = true;\n    // })\n    .addCase(fetchAddressOwnership.fulfilled, function (state, action) {\n      return _objectSpread(_objectSpread({}, state), action.payload);\n    });\n  }\n}); // export const { getUserOwnership } = addressOwnershipSlice.actions;\n\nexport var addressOwnership = addressOwnershipSlice.reducer;","map":{"version":3,"sources":["/Users/anthonysiu/doko/DOKO/client/src/store/meta-nft-collections/addressOwnershipSlice.ts"],"names":["createSlice","createAsyncThunk","metaverses","fetchAssets","initialState","assets","Array","length","fill","map","address","fetchAddressOwnership","addressOwnershipSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","addressOwnership","reducer"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,SAA2BC,WAA3B,QAA8C,yBAA9C;AAEA,IAAMC,YAA8B,GAAG;AACrCC,EAAAA,MAAM,EAAEC,KAAK,CAACJ,UAAU,CAACK,MAAZ,CAAL,CACLC,IADK,CACA,IADA,EAELC,GAFK,CAED;AAAA,WAAM,EAAN;AAAA,GAFC,CAD6B;AAIrCC,EAAAA,OAAO,EAAE;AAJ4B,CAAvC;AAOA,OAAO,IAAMC,qBAAqB,GAAGV,gBAAgB,CACnD,wCADmD;AAAA,sEAEnD,iBAAOS,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BACEA,OADF;AAAA;AAAA,mBAEgBP,WAAW,CAACO,OAAD,CAF3B;;AAAA;AAAA;AAAA;AACEA,cAAAA,OADF;AAEEL,cAAAA,MAFF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFmD;;AAAA;AAAA;AAAA;AAAA,IAA9C;AAQP,IAAMO,qBAAqB,GAAGZ,WAAW,CAAC;AACxCa,EAAAA,IAAI,EAAE,kBADkC;AAExCT,EAAAA,YAAY,EAAZA,YAFwC;AAGxCU,EAAAA,QAAQ,EAAE,EAH8B;AAIxCC,EAAAA,aAAa,EAAE,uBAACC,OAAD,EAAa;AAC1BA,IAAAA,OAAO,CACL;AACA;AACA;AAHK,KAIJC,OAJH,CAIWN,qBAAqB,CAACO,SAJjC,EAI4C,UAACC,KAAD,EAAQC,MAAR;AAAA,6CACrCD,KADqC,GAErCC,MAAM,CAACC,OAF8B;AAAA,KAJ5C;AAQD;AAbuC,CAAD,CAAzC,C,CAgBA;;AAEA,OAAO,IAAMC,gBAAgB,GAAGV,qBAAqB,CAACW,OAA/C","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport metaverses from '../../constants/metaverses';\nimport { AddressOwnership, fetchAssets } from './profileOwnershipSlice';\n\nconst initialState: AddressOwnership = {\n  assets: Array(metaverses.length)\n    .fill(null)\n    .map(() => []),\n  address: '',\n};\n\nexport const fetchAddressOwnership = createAsyncThunk(\n  'AddressOwnership/fetchAddressOwnership',\n  async (address: string) => ({\n    address,\n    assets: await fetchAssets(address),\n  }),\n);\n\nconst addressOwnershipSlice = createSlice({\n  name: 'AddressOwnership',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      // .addCase(fetchAddressOwnership.pending, (state) => {\n      //   state.isLoading = true;\n      // })\n      .addCase(fetchAddressOwnership.fulfilled, (state, action) => ({\n        ...state,\n        ...action.payload,\n      }));\n  },\n});\n\n// export const { getUserOwnership } = addressOwnershipSlice.actions;\n\nexport const addressOwnership = addressOwnershipSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}