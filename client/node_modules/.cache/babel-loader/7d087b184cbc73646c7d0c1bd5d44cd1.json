{"ast":null,"code":"import { transform, isArray, camelCase, isDate, isObject, snakeCase } from 'lodash';\nexport var camelize = function camelize(obj) {\n  return transform(obj, function (acc, value, key, target) {\n    var camelKey = isArray(target) ? key : camelCase(key);\n\n    if (isDate(value)) {\n      acc[camelKey] = value;\n    } else if (isObject(value)) {\n      acc[camelKey] = camelize(value);\n    } else {\n      acc[camelKey] = value;\n    }\n  });\n};\nexport var snakeize = function snakeize(obj) {\n  return transform(obj, function (acc, value, key, target) {\n    var snakeKey = isArray(target) ? key : snakeCase(key);\n\n    if (isDate(value)) {\n      acc[snakeKey] = value;\n    } else if (isObject(value)) {\n      acc[snakeKey] = snakeize(value);\n    } else {\n      acc[snakeKey] = value;\n    }\n  });\n};\nexport var getCoordinates = function getCoordinates(metaverseName, asset) {\n  switch (metaverseName) {\n    case 'Cryptovoxels':\n      {\n        var matchX = asset.image_original_url.match(/x=([+-]?([0-9]*[.])?[0-9]+)/);\n        var matchY = asset.image_original_url.match(/&y=([+-]?([0-9]*[.])?[0-9]+)/);\n\n        if (!matchX || !matchY) {\n          // to add error handler\n          return [0, 0];\n        }\n\n        return [parseFloat(matchY[1]), parseFloat(matchX[1])];\n      }\n\n    case 'Decentraland':\n      {\n        var match = asset.image_original_url.match(/parcels\\/([+-]?([0-9]*[.])?[0-9]+)\\/([+-]?([0-9]*[.])?[0-9]+)/);\n\n        if (!match) {\n          // to add error handler\n          return [0, 0];\n        }\n\n        return [parseFloat(match[3]) * 5, parseFloat(match[1]) * 5];\n      }\n\n    case 'The Sandbox':\n      {\n        var _matchX = asset.name.match(/\\(([+-]?([0-9]*[.])?[0-9]+)/);\n\n        var _matchY = asset.name.match(/, ([+-]?([0-9]*[.])?[0-9]+)/);\n\n        if (!_matchX || !_matchY) {\n          // to add error handler\n          return [0, 0];\n        }\n\n        return [parseFloat(_matchY[1]), parseFloat(_matchX[1])];\n      }\n\n    case 'Somnium Space VR':\n      {\n        var _matchX2 = asset.description.match(/X = ([+-]?([0-9]*[.])?[0-9]+)/);\n\n        var _matchY2 = asset.description.match(/Z = ([+-]?([0-9]*[.])?[0-9]+)/);\n\n        if (!_matchX2 || !_matchY2) {\n          // to add error handler\n          return [0, 0];\n        }\n\n        return [(parseFloat(_matchY2[1]) + 202.167) / 23, (parseFloat(_matchX2[1]) - 576.433) / 22.7356];\n      }\n\n    default:\n      {\n        return [NaN, NaN];\n      }\n  }\n};","map":{"version":3,"sources":["/Users/anthonysiu/doko/DOKO/client/src/utils/utils.ts"],"names":["transform","isArray","camelCase","isDate","isObject","snakeCase","camelize","obj","acc","value","key","target","camelKey","snakeize","snakeKey","getCoordinates","metaverseName","asset","matchX","image_original_url","match","matchY","parseFloat","name","description","NaN"],"mappings":"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","sourcesContent":["import { transform, isArray, camelCase, isDate, isObject, snakeCase } from 'lodash';\nimport { Asset } from '../store/meta-nft-collections/profileOwnershipSlice';\n\nexport const camelize = (obj: any) =>\n  transform(obj, (acc: any, value, key, target) => {\n    const camelKey = isArray(target) ? key : camelCase(key as string);\n    if (isDate(value)) {\n      acc[camelKey] = value;\n    } else if (isObject(value)) {\n      acc[camelKey] = camelize(value);\n    } else {\n      acc[camelKey] = value;\n    }\n  });\n\nexport const snakeize = (obj: any) =>\n  transform(obj, (acc: any, value, key, target) => {\n    const snakeKey = isArray(target) ? key : snakeCase(key as string);\n    if (isDate(value)) {\n      acc[snakeKey] = value;\n    } else if (isObject(value)) {\n      acc[snakeKey] = snakeize(value);\n    } else {\n      acc[snakeKey] = value;\n    }\n  });\n\nexport const getCoordinates = (metaverseName: string, asset: any): L.LatLngExpression => {\n  switch (metaverseName) {\n    case 'Cryptovoxels': {\n      const matchX = asset.image_original_url.match(/x=([+-]?([0-9]*[.])?[0-9]+)/);\n      const matchY = asset.image_original_url.match(/&y=([+-]?([0-9]*[.])?[0-9]+)/);\n      if (!matchX || !matchY) {\n        // to add error handler\n        return [0, 0];\n      }\n      return [parseFloat(matchY[1]), parseFloat(matchX[1])];\n    }\n    case 'Decentraland': {\n      const match = asset.image_original_url.match(\n        /parcels\\/([+-]?([0-9]*[.])?[0-9]+)\\/([+-]?([0-9]*[.])?[0-9]+)/,\n      );\n      if (!match) {\n        // to add error handler\n        return [0, 0];\n      }\n      return [parseFloat(match[3]) * 5, parseFloat(match[1]) * 5];\n    }\n    case 'The Sandbox': {\n      const matchX = asset.name.match(/\\(([+-]?([0-9]*[.])?[0-9]+)/);\n      const matchY = asset.name.match(/, ([+-]?([0-9]*[.])?[0-9]+)/);\n      if (!matchX || !matchY) {\n        // to add error handler\n        return [0, 0];\n      }\n      return [parseFloat(matchY[1]), parseFloat(matchX[1])];\n    }\n    case 'Somnium Space VR': {\n      const matchX = asset.description.match(/X = ([+-]?([0-9]*[.])?[0-9]+)/);\n      const matchY = asset.description.match(/Z = ([+-]?([0-9]*[.])?[0-9]+)/);\n      if (!matchX || !matchY) {\n        // to add error handler\n        return [0, 0];\n      }\n      return [(parseFloat(matchY[1]) + 202.167) / 23, (parseFloat(matchX[1]) - 576.433) / 22.7356];\n    }\n    default: {\n      return [NaN, NaN];\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}