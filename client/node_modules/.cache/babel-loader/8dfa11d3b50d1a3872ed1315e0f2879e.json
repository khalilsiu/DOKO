{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from 'axios';\nvar instance = axios.create({\n  baseURL: process.env.REACT_APP_CONTRACT_SERVICE_API\n});\n\nvar ContractServiceAPI = /*#__PURE__*/function () {\n  function ContractServiceAPI() {\n    _classCallCheck(this, ContractServiceAPI);\n  }\n\n  _createClass(ContractServiceAPI, null, [{\n    key: \"getAssetFloorPrice\",\n    value: function () {\n      var _getAssetFloorPrice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address, traits) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return instance.post('asset/floor-price', {\n                  address: address,\n                  traits: traits\n                }).then(function (res) {\n                  return res.data;\n                }).catch(function (err) {\n                  if (err.response.status === 404) {\n                    return {\n                      price: 0,\n                      payment_token: {\n                        address: '0x0000000000000000000000000000000000000000',\n                        decimals: 18,\n                        eth_price: '1.000000000000000',\n                        symbol: 'ETH'\n                      }\n                    };\n                  }\n\n                  throw err;\n                });\n\n              case 2:\n                res = _context.sent;\n                return _context.abrupt(\"return\", res);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getAssetFloorPrice(_x, _x2) {\n        return _getAssetFloorPrice.apply(this, arguments);\n      }\n\n      return getAssetFloorPrice;\n    }()\n  }, {\n    key: \"getStats\",\n    value: function () {\n      var _getStats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(metaverse) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return instance.get('/stats', {\n                  params: {\n                    metaverse: metaverse\n                  }\n                }).then(function (res) {\n                  return res.data;\n                });\n\n              case 2:\n                res = _context2.sent;\n                return _context2.abrupt(\"return\", res);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getStats(_x3) {\n        return _getStats.apply(this, arguments);\n      }\n\n      return getStats;\n    }()\n  }]);\n\n  return ContractServiceAPI;\n}();\n\nexport { ContractServiceAPI as default };","map":{"version":3,"sources":["/Users/anthonysiu/doko/DOKO/client/src/libs/contract-service-api.ts"],"names":["axios","instance","create","baseURL","process","env","REACT_APP_CONTRACT_SERVICE_API","ContractServiceAPI","address","traits","post","then","res","data","catch","err","response","status","price","payment_token","decimals","eth_price","symbol","metaverse","get","params"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,IAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADO,CAAb,CAAjB;;IAGqBC,kB;;;;;;;;yFACnB,iBAAgCC,OAAhC,EAAiDC,MAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACoBR,QAAQ,CACvBS,IADe,CACV,mBADU,EACW;AACzBF,kBAAAA,OAAO,EAAPA,OADyB;AAEzBC,kBAAAA,MAAM,EAANA;AAFyB,iBADX,EAKfE,IALe,CAKV,UAACC,GAAD;AAAA,yBAASA,GAAG,CAACC,IAAb;AAAA,iBALU,EAMfC,KANe,CAMT,UAACC,GAAD,EAAS;AACd,sBAAIA,GAAG,CAACC,QAAJ,CAAaC,MAAb,KAAwB,GAA5B,EAAiC;AAC/B,2BAAO;AACLC,sBAAAA,KAAK,EAAE,CADF;AAELC,sBAAAA,aAAa,EAAE;AACbX,wBAAAA,OAAO,EAAE,4CADI;AAEbY,wBAAAA,QAAQ,EAAE,EAFG;AAGbC,wBAAAA,SAAS,EAAE,mBAHE;AAIbC,wBAAAA,MAAM,EAAE;AAJK;AAFV,qBAAP;AASD;;AACD,wBAAMP,GAAN;AACD,iBAnBe,CADpB;;AAAA;AACQH,gBAAAA,GADR;AAAA,iDAqBSA,GArBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;+EAwBA,kBAAsBW,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACoBtB,QAAQ,CACvBuB,GADe,CACX,QADW,EACD;AACbC,kBAAAA,MAAM,EAAE;AACNF,oBAAAA,SAAS,EAATA;AADM;AADK,iBADC,EAMfZ,IANe,CAMV,UAACC,GAAD;AAAA,yBAASA,GAAG,CAACC,IAAb;AAAA,iBANU,CADpB;;AAAA;AACQD,gBAAAA,GADR;AAAA,kDAQSA,GART;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;SAzBmBL,kB","sourcesContent":["import axios from 'axios';\nimport { Metaverse } from '../constants/metaverses';\nimport { Filter } from '../hooks/useProfileSummaries';\n\nconst instance = axios.create({\n  baseURL: process.env.REACT_APP_CONTRACT_SERVICE_API,\n});\nexport default class ContractServiceAPI {\n  static async getAssetFloorPrice(address: string, traits: Filter[]) {\n    const res = await instance\n      .post('asset/floor-price', {\n        address,\n        traits,\n      })\n      .then((res) => res.data)\n      .catch((err) => {\n        if (err.response.status === 404) {\n          return {\n            price: 0,\n            payment_token: {\n              address: '0x0000000000000000000000000000000000000000',\n              decimals: 18,\n              eth_price: '1.000000000000000',\n              symbol: 'ETH',\n            },\n          };\n        }\n        throw err;\n      });\n    return res;\n  }\n\n  static async getStats(metaverse: Metaverse) {\n    const res = await instance\n      .get('/stats', {\n        params: {\n          metaverse,\n        },\n      })\n      .then((res) => res.data);\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}