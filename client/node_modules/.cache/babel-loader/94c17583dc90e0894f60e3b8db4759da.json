{"ast":null,"code":"var _jsxFileName = \"/Users/anthonysiu/doko/DOKO/client/src/components/maps/RenderMarkers.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { makeStyles, useMediaQuery, useTheme } from '@material-ui/core';\nimport { memo } from 'react';\nimport { Marker } from 'react-leaflet';\nimport { marker, MapStyles, StyledPopup } from './constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(function () {\n  return MapStyles;\n});\nvar RenderMarkers = /*#__PURE__*/memo(_c = _s(function (_ref) {\n  _s();\n\n  var assets = _ref.assets,\n      markerRefs = _ref.markerRefs;\n  var smOrAbove = useMediaQuery(function (theme) {\n    return theme.breakpoints.up('sm');\n  });\n  var theme = useTheme();\n  var styles = useStyles({\n    smOrAbove: smOrAbove\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: assets.map(function (asset, i) {\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        icon: marker,\n        position: asset.coordinates,\n        ref: function ref(r) {\n          return markerRefs.current[i] = {\n            ref: r,\n            position: asset.coordinates\n          };\n        },\n        children: /*#__PURE__*/_jsxDEV(StyledPopup, {\n          color: theme.palette.secondary.main,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.popupTitleContainer,\n            children: asset.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.popupContentContainer,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"/nft/eth/\".concat(asset.assetContract.address, \"/\").concat(asset.tokenId),\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.popupContent,\n                style: {\n                  backgroundImage: \"url('\".concat(asset.imageUrl, \"')\")\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 19\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, _this)\n      }, asset.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, _this);\n    })\n  }, void 0, false);\n}, \"lfbG/QpAuyOzTROb48oRv2y0X1I=\", false, function () {\n  return [useMediaQuery, useTheme, useStyles];\n}));\n_c2 = RenderMarkers;\nexport default RenderMarkers;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RenderMarkers$memo\");\n$RefreshReg$(_c2, \"RenderMarkers\");","map":{"version":3,"sources":["/Users/anthonysiu/doko/DOKO/client/src/components/maps/RenderMarkers.tsx"],"names":["makeStyles","useMediaQuery","useTheme","memo","Marker","marker","MapStyles","StyledPopup","useStyles","RenderMarkers","assets","markerRefs","smOrAbove","theme","breakpoints","up","styles","map","asset","i","coordinates","r","current","ref","position","palette","secondary","main","popupTitleContainer","name","popupContentContainer","assetContract","address","tokenId","popupContent","backgroundImage","imageUrl","id"],"mappings":";;;;AAAA,SAASA,UAAT,EAA4BC,aAA5B,EAA2CC,QAA3C,QAA2D,mBAA3D;AAEA,SAASC,IAAT,QAAqB,OAArB;AACA,SAASC,MAAT,QAAuB,eAAvB;AAEA,SAAqBC,MAArB,EAA6BC,SAA7B,EAAwCC,WAAxC,QAA2D,aAA3D;;;AACA,IAAMC,SAAS,GAAGR,UAAU,CAAoB;AAAA,SAAMM,SAAN;AAAA,CAApB,CAA5B;AAWA,IAAMG,aAAa,gBAAGN,IAAI,SAAC,gBAAoC;AAAA;;AAAA,MAAjCO,MAAiC,QAAjCA,MAAiC;AAAA,MAAzBC,UAAyB,QAAzBA,UAAyB;AAC7D,MAAMC,SAAS,GAAGX,aAAa,CAAC,UAACY,KAAD;AAAA,WAAkBA,KAAK,CAACC,WAAN,CAAkBC,EAAlB,CAAqB,IAArB,CAAlB;AAAA,GAAD,CAA/B;AACA,MAAMF,KAAK,GAAGX,QAAQ,EAAtB;AACA,MAAMc,MAAM,GAAGR,SAAS,CAAC;AAAEI,IAAAA,SAAS,EAATA;AAAF,GAAD,CAAxB;AACA,sBACE;AAAA,cACGF,MAAM,CAACO,GAAP,CAAW,UAACC,KAAD,EAAQC,CAAR,EAAc;AACxB,0BACE,QAAC,MAAD;AAEE,QAAA,IAAI,EAAEd,MAFR;AAGE,QAAA,QAAQ,EAAEa,KAAK,CAACE,WAHlB;AAIE,QAAA,GAAG,EAAE,aAACC,CAAD;AAAA,iBAAQV,UAAU,CAACW,OAAX,CAAmBH,CAAnB,IAAwB;AAAEI,YAAAA,GAAG,EAAEF,CAAP;AAAUG,YAAAA,QAAQ,EAAEN,KAAK,CAACE;AAA1B,WAAhC;AAAA,SAJP;AAAA,+BAME,QAAC,WAAD;AAAa,UAAA,KAAK,EAAEP,KAAK,CAACY,OAAN,CAAcC,SAAd,CAAwBC,IAA5C;AAAA,kCACE;AAAK,YAAA,SAAS,EAAEX,MAAM,CAACY,mBAAvB;AAAA,sBAA6CV,KAAK,CAACW;AAAnD;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AAAK,YAAA,SAAS,EAAEb,MAAM,CAACc,qBAAvB;AAAA,mCACE;AAAG,cAAA,IAAI,qBAAcZ,KAAK,CAACa,aAAN,CAAoBC,OAAlC,cAA6Cd,KAAK,CAACe,OAAnD,CAAP;AAAA,qCACE;AACE,gBAAA,SAAS,EAAEjB,MAAM,CAACkB,YADpB;AAEE,gBAAA,KAAK,EAAE;AACLC,kBAAAA,eAAe,iBAAUjB,KAAK,CAACkB,QAAhB;AADV;AAFT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,mBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AANF,SACOlB,KAAK,CAACmB,EADb;AAAA;AAAA;AAAA;AAAA,eADF;AAsBD,KAvBA;AADH,mBADF;AA4BD,CAhCyB;AAAA,UACNpC,aADM,EAEVC,QAFU,EAGTM,SAHS;AAAA,GAA1B;MAAMC,a;AAkCN,eAAeA,aAAf","sourcesContent":["import { makeStyles, Theme, useMediaQuery, useTheme } from '@material-ui/core';\n\nimport { memo } from 'react';\nimport { Marker } from 'react-leaflet';\nimport { Asset } from '../../store/meta-nft-collections/profileOwnershipSlice';\nimport { StyleProps, marker, MapStyles, StyledPopup } from './constants';\nconst useStyles = makeStyles<Theme, StyleProps>(() => MapStyles);\n\ninterface IProps {\n  assets: Asset[];\n  markerRefs: React.MutableRefObject<\n    {\n      ref: L.Marker<any> | null;\n      position: L.LatLngExpression;\n    }[]\n  >;\n}\nconst RenderMarkers = memo(({ assets, markerRefs }: IProps) => {\n  const smOrAbove = useMediaQuery((theme: Theme) => theme.breakpoints.up('sm'));\n  const theme = useTheme<Theme>();\n  const styles = useStyles({ smOrAbove });\n  return (\n    <>\n      {assets.map((asset, i) => {\n        return (\n          <Marker\n            key={asset.id}\n            icon={marker}\n            position={asset.coordinates}\n            ref={(r) => (markerRefs.current[i] = { ref: r, position: asset.coordinates })}\n          >\n            <StyledPopup color={theme.palette.secondary.main}>\n              <div className={styles.popupTitleContainer}>{asset.name}</div>\n              <div className={styles.popupContentContainer}>\n                <a href={`/nft/eth/${asset.assetContract.address}/${asset.tokenId}`}>\n                  <div\n                    className={styles.popupContent}\n                    style={{\n                      backgroundImage: `url('${asset.imageUrl}')`,\n                    }}\n                  ></div>\n                </a>\n              </div>\n            </StyledPopup>\n          </Marker>\n        );\n      })}\n    </>\n  );\n});\n\nexport default RenderMarkers;\n"]},"metadata":{},"sourceType":"module"}