{"ast":null,"code":"import _objectSpread from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport api from '../libs/api';\nexport var getNFTs = function getNFTs(address, offset) {\n  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return api.get('/nfts', {\n    params: _objectSpread({\n      address: address,\n      offset: offset\n    }, params)\n  });\n};\nexport var indexAddress = function indexAddress(address) {\n  var reindex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return api.post('/nfts/index', {\n    address: address,\n    reindex: reindex\n  });\n};\nexport var getAddressStatus = function getAddressStatus(address) {\n  return api.get(\"/address/\".concat(address));\n};\nexport var getNFT = function getNFT(address, id) {\n  return api.get(\"/nft/\".concat(address, \"/\").concat(id));\n};\nexport var fetchOpenseaEvents = function fetchOpenseaEvents(address, id, offset, limit) {\n  return api.get(\"/nft/eth/events/\".concat(address, \"/\").concat(id, \"/\").concat(offset, \"/\").concat(limit));\n};\nexport var fetchOpenseaLastSale = function fetchOpenseaLastSale(address, id) {\n  return api.get(\"/nft/eth/lastsale/\".concat(address, \"/\").concat(id));\n};","map":{"version":3,"sources":["/Users/anthonysiu/doko/DOKO/client/src/modules/api.ts"],"names":["api","getNFTs","address","offset","params","get","indexAddress","reindex","post","getAddressStatus","getNFT","id","fetchOpenseaEvents","limit","fetchOpenseaLastSale"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAGA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,OAAD,EAAkBC,MAAlB;AAAA,MAAkCC,MAAlC,uEAAgD,EAAhD;AAAA,SACrBJ,GAAG,CAACK,GAAJ,CAAQ,OAAR,EAAiB;AACfD,IAAAA,MAAM;AACJF,MAAAA,OAAO,EAAPA,OADI;AAEJC,MAAAA,MAAM,EAANA;AAFI,OAGDC,MAHC;AADS,GAAjB,CADqB;AAAA,CAAhB;AASP,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe,CAACJ,OAAD;AAAA,MAAkBK,OAAlB,uEAA4B,KAA5B;AAAA,SAC1BP,GAAG,CAACQ,IAAJ,CAAS,aAAT,EAAwB;AACtBN,IAAAA,OAAO,EAAPA,OADsB;AAEtBK,IAAAA,OAAO,EAAPA;AAFsB,GAAxB,CAD0B;AAAA,CAArB;AAMP,OAAO,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACP,OAAD;AAAA,SAAqBF,GAAG,CAACK,GAAJ,oBAAoBH,OAApB,EAArB;AAAA,CAAzB;AAEP,OAAO,IAAMQ,MAAM,GAAG,SAATA,MAAS,CAACR,OAAD,EAAkBS,EAAlB;AAAA,SAAiCX,GAAG,CAACK,GAAJ,gBAAgBH,OAAhB,cAA2BS,EAA3B,EAAjC;AAAA,CAAf;AAEP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACV,OAAD,EAAkBS,EAAlB,EAA8BR,MAA9B,EAA8CU,KAA9C;AAAA,SAChCb,GAAG,CAACK,GAAJ,2BAA2BH,OAA3B,cAAsCS,EAAtC,cAA4CR,MAA5C,cAAsDU,KAAtD,EADgC;AAAA,CAA3B;AAGP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACZ,OAAD,EAAkBS,EAAlB;AAAA,SAClCX,GAAG,CAACK,GAAJ,6BAA6BH,OAA7B,cAAwCS,EAAxC,EADkC;AAAA,CAA7B","sourcesContent":["import api from '../libs/api';\nimport { getTokenInfo } from '../libs/metaplex/utils';\n\nexport const getNFTs = (address: string, offset: number, params: any = {}) =>\n  api.get('/nfts', {\n    params: {\n      address,\n      offset,\n      ...params,\n    },\n  });\n\nexport const indexAddress = (address: string, reindex = false) =>\n  api.post('/nfts/index', {\n    address,\n    reindex,\n  });\n\nexport const getAddressStatus = (address: string) => api.get(`/address/${address}`);\n\nexport const getNFT = (address: string, id: string) => api.get(`/nft/${address}/${id}`);\n\nexport const fetchOpenseaEvents = (address: string, id: string, offset: number, limit: number) =>\n  api.get(`/nft/eth/events/${address}/${id}/${offset}/${limit}`);\n\nexport const fetchOpenseaLastSale = (address: string, id: string) =>\n  api.get(`/nft/eth/lastsale/${address}/${id}`);\n"]},"metadata":{},"sourceType":"module"}