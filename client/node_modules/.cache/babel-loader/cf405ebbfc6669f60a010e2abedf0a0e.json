{"ast":null,"code":"import _slicedToArray from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useMemo, useState } from 'react';\nimport debounce from './lib/debounce';\nimport flattenOptions from './lib/flattenOptions';\nexport default function useFetch(q, defaultOptions, _ref) {\n  var debounceTime = _ref.debounceTime,\n      filterOptions = _ref.filterOptions,\n      getOptions = _ref.getOptions;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      fetching = _useState2[0],\n      setFetching = _useState2[1];\n\n  var _useState3 = useState(function () {\n    return flattenOptions(defaultOptions);\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      options = _useState4[0],\n      setOptions = _useState4[1];\n\n  var fetch = useMemo(function () {\n    var filter = filterOptions || function (op) {\n      return function () {\n        return op;\n      };\n    };\n\n    if (!getOptions) {\n      return function (s) {\n        return setOptions(flattenOptions(filter(defaultOptions)(s)));\n      };\n    }\n\n    return debounce(function (s) {\n      var optionsReq = getOptions(s, defaultOptions);\n      setFetching(true);\n      Promise.resolve(optionsReq).then(function (newOptions) {\n        setOptions(flattenOptions(filter(newOptions)(s)));\n      }).finally(function () {\n        return setFetching(false);\n      });\n    }, debounceTime);\n  }, [filterOptions, defaultOptions, getOptions, debounceTime]);\n  useEffect(function () {\n    return setOptions(defaultOptions);\n  }, [defaultOptions]);\n  useEffect(function () {\n    return fetch(q);\n  }, [fetch, q]);\n  return {\n    options: options,\n    setOptions: setOptions,\n    fetching: fetching\n  };\n}","map":{"version":3,"sources":["/Users/anthonysiu/doko/DOKO/client/node_modules/react-select-search/dist/esm/useFetch.js"],"names":["useEffect","useMemo","useState","debounce","flattenOptions","useFetch","q","defaultOptions","debounceTime","filterOptions","getOptions","fetching","setFetching","options","setOptions","fetch","filter","op","s","optionsReq","Promise","resolve","then","newOptions","finally"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,eAAe,SAASC,QAAT,CAAkBC,CAAlB,EAAqBC,cAArB,QAIZ;AAAA,MAHDC,YAGC,QAHDA,YAGC;AAAA,MAFDC,aAEC,QAFDA,aAEC;AAAA,MADDC,UACC,QADDA,UACC;;AACD,kBAAgCR,QAAQ,CAAC,KAAD,CAAxC;AAAA;AAAA,MAAOS,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAA8BV,QAAQ,CAAC;AAAA,WAAME,cAAc,CAACG,cAAD,CAApB;AAAA,GAAD,CAAtC;AAAA;AAAA,MAAOM,OAAP;AAAA,MAAgBC,UAAhB;;AACA,MAAMC,KAAK,GAAGd,OAAO,CAAC,YAAM;AAC1B,QAAMe,MAAM,GAAGP,aAAa,IAAK,UAAAQ,EAAE;AAAA,aAAI;AAAA,eAAMA,EAAN;AAAA,OAAJ;AAAA,KAAnC;;AAEA,QAAI,CAACP,UAAL,EAAiB;AACf,aAAO,UAAAQ,CAAC;AAAA,eAAIJ,UAAU,CAACV,cAAc,CAACY,MAAM,CAACT,cAAD,CAAN,CAAuBW,CAAvB,CAAD,CAAf,CAAd;AAAA,OAAR;AACD;;AAED,WAAOf,QAAQ,CAAC,UAAAe,CAAC,EAAI;AACnB,UAAMC,UAAU,GAAGT,UAAU,CAACQ,CAAD,EAAIX,cAAJ,CAA7B;AACAK,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAQ,MAAAA,OAAO,CAACC,OAAR,CAAgBF,UAAhB,EAA4BG,IAA5B,CAAiC,UAAAC,UAAU,EAAI;AAC7CT,QAAAA,UAAU,CAACV,cAAc,CAACY,MAAM,CAACO,UAAD,CAAN,CAAmBL,CAAnB,CAAD,CAAf,CAAV;AACD,OAFD,EAEGM,OAFH,CAEW;AAAA,eAAMZ,WAAW,CAAC,KAAD,CAAjB;AAAA,OAFX;AAGD,KANc,EAMZJ,YANY,CAAf;AAOD,GAdoB,EAclB,CAACC,aAAD,EAAgBF,cAAhB,EAAgCG,UAAhC,EAA4CF,YAA5C,CAdkB,CAArB;AAeAR,EAAAA,SAAS,CAAC;AAAA,WAAMc,UAAU,CAACP,cAAD,CAAhB;AAAA,GAAD,EAAmC,CAACA,cAAD,CAAnC,CAAT;AACAP,EAAAA,SAAS,CAAC;AAAA,WAAMe,KAAK,CAACT,CAAD,CAAX;AAAA,GAAD,EAAiB,CAACS,KAAD,EAAQT,CAAR,CAAjB,CAAT;AACA,SAAO;AACLO,IAAAA,OAAO,EAAPA,OADK;AAELC,IAAAA,UAAU,EAAVA,UAFK;AAGLH,IAAAA,QAAQ,EAARA;AAHK,GAAP;AAKD","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport debounce from './lib/debounce';\nimport flattenOptions from './lib/flattenOptions';\nexport default function useFetch(q, defaultOptions, {\n  debounceTime,\n  filterOptions,\n  getOptions\n}) {\n  const [fetching, setFetching] = useState(false);\n  const [options, setOptions] = useState(() => flattenOptions(defaultOptions));\n  const fetch = useMemo(() => {\n    const filter = filterOptions || (op => () => op);\n\n    if (!getOptions) {\n      return s => setOptions(flattenOptions(filter(defaultOptions)(s)));\n    }\n\n    return debounce(s => {\n      const optionsReq = getOptions(s, defaultOptions);\n      setFetching(true);\n      Promise.resolve(optionsReq).then(newOptions => {\n        setOptions(flattenOptions(filter(newOptions)(s)));\n      }).finally(() => setFetching(false));\n    }, debounceTime);\n  }, [filterOptions, defaultOptions, getOptions, debounceTime]);\n  useEffect(() => setOptions(defaultOptions), [defaultOptions]);\n  useEffect(() => fetch(q), [fetch, q]);\n  return {\n    options,\n    setOptions,\n    fetching\n  };\n}"]},"metadata":{},"sourceType":"module"}