{"ast":null,"code":"import _objectSpread from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport metaverses from '../../constants/metaverses';\nimport ContractServiceAPI from '../../libs/contract-service-api';\nvar initialState = metaverses.map(function (metaverse) {\n  return {\n    traits: metaverse.traits.map(function () {\n      return 0;\n    })\n  };\n});\nexport var parsePrice = function parsePrice(price, payment_token) {\n  var priceInToken = parseFloat(price);\n  var ethPrice = parseFloat(payment_token.eth_price);\n  return priceInToken * ethPrice / Math.pow(10, payment_token.decimals);\n};\nexport var fetchCollectionSummary = createAsyncThunk('CollectionSummary/fetchCollectionSummary', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var metaverseRequests, metaverseResponses, floorPrices;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          metaverseRequests = metaverses.map(function (metaverse) {\n            return metaverse.traits.map(function (traits) {\n              return ContractServiceAPI.getAssetFloorPrice(metaverse.primaryAddress, traits);\n            });\n          });\n          _context.next = 3;\n          return Promise.all(metaverseRequests.map(function (requests) {\n            return Promise.all(requests);\n          }));\n\n        case 3:\n          metaverseResponses = _context.sent;\n          floorPrices = metaverseResponses.map(function (responses) {\n            return responses.map(function (response) {\n              var price = response.price,\n                  payment_token = response.payment_token;\n              return parsePrice(price, payment_token);\n            });\n          });\n          return _context.abrupt(\"return\", floorPrices);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n})));\nvar collectionSummarySlice = createSlice({\n  name: 'CollectionSummary',\n  initialState: initialState,\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    builder // .addCase(fetchCollectionSummary.pending, (state) => {\n    //   state.isLoading = true;\n    // })\n    .addCase(fetchCollectionSummary.fulfilled, function (state, action) {\n      return state.map(function (metaversesummary, index) {\n        return _objectSpread(_objectSpread({}, metaversesummary), {}, {\n          // fetchCollectionSummary takes care of all metaversesummary related calls\n          // to be extended\n          traits: action.payload[index]\n        });\n      });\n    });\n  }\n}); // export const { } = collectionSummarySlice.actions;\n\nexport var collectionSummary = collectionSummarySlice.reducer;","map":{"version":3,"sources":["/Users/anthonysiu/doko/DOKO/client/src/store/meta-nft-collections/collectionSummarySlice.ts"],"names":["createSlice","createAsyncThunk","metaverses","ContractServiceAPI","initialState","map","metaverse","traits","parsePrice","price","payment_token","priceInToken","parseFloat","ethPrice","eth_price","decimals","fetchCollectionSummary","metaverseRequests","getAssetFloorPrice","primaryAddress","Promise","all","requests","metaverseResponses","floorPrices","responses","response","collectionSummarySlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","metaversesummary","index","payload","collectionSummary","reducer"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AAMA,IAAMC,YAAgC,GAAGF,UAAU,CAACG,GAAX,CAAe,UAACC,SAAD;AAAA,SAAgB;AACtEC,IAAAA,MAAM,EAAED,SAAS,CAACC,MAAV,CAAiBF,GAAjB,CAAqB;AAAA,aAAM,CAAN;AAAA,KAArB;AAD8D,GAAhB;AAAA,CAAf,CAAzC;AAIA,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAgBC,aAAhB,EAAuC;AAC/D,MAAMC,YAAY,GAAGC,UAAU,CAACH,KAAD,CAA/B;AACA,MAAMI,QAAQ,GAAGD,UAAU,CAACF,aAAa,CAACI,SAAf,CAA3B;AACA,SAAQH,YAAY,GAAGE,QAAhB,YAA4B,EAA5B,EAAkCH,aAAa,CAACK,QAAhD,CAAP;AACD,CAJM;AAMP,OAAO,IAAMC,sBAAsB,GAAGf,gBAAgB,CACpD,0CADoD,wEAEpD;AAAA;AAAA;AAAA;AAAA;AAAA;AACQgB,UAAAA,iBADR,GAC4Bf,UAAU,CAACG,GAAX,CAAe,UAACC,SAAD;AAAA,mBACvCA,SAAS,CAACC,MAAV,CAAiBF,GAAjB,CAAqB,UAACE,MAAD;AAAA,qBACnBJ,kBAAkB,CAACe,kBAAnB,CAAsCZ,SAAS,CAACa,cAAhD,EAAgEZ,MAAhE,CADmB;AAAA,aAArB,CADuC;AAAA,WAAf,CAD5B;AAAA;AAAA,iBAOmCa,OAAO,CAACC,GAAR,CAC/BJ,iBAAiB,CAACZ,GAAlB,CAAsB,UAACiB,QAAD;AAAA,mBAAcF,OAAO,CAACC,GAAR,CAAYC,QAAZ,CAAd;AAAA,WAAtB,CAD+B,CAPnC;;AAAA;AAOQC,UAAAA,kBAPR;AAWQC,UAAAA,WAXR,GAWsBD,kBAAkB,CAAClB,GAAnB,CAAuB,UAACoB,SAAD;AAAA,mBACzCA,SAAS,CAACpB,GAAV,CAAc,UAACqB,QAAD,EAAc;AAC1B,kBAAQjB,KAAR,GAAiCiB,QAAjC,CAAQjB,KAAR;AAAA,kBAAeC,aAAf,GAAiCgB,QAAjC,CAAehB,aAAf;AACA,qBAAOF,UAAU,CAACC,KAAD,EAAQC,aAAR,CAAjB;AACD,aAHD,CADyC;AAAA,WAAvB,CAXtB;AAAA,2CAiBSc,WAjBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAFoD,GAA/C;AAuBP,IAAMG,sBAAsB,GAAG3B,WAAW,CAAC;AACzC4B,EAAAA,IAAI,EAAE,mBADmC;AAEzCxB,EAAAA,YAAY,EAAZA,YAFyC;AAGzCyB,EAAAA,QAAQ,EAAE,EAH+B;AAIzCC,EAAAA,aAAa,EAAE,uBAACC,OAAD,EAAa;AAC1BA,IAAAA,OAAO,CACL;AACA;AACA;AAHK,KAIJC,OAJH,CAIWhB,sBAAsB,CAACiB,SAJlC,EAI6C,UAACC,KAAD,EAAQC,MAAR;AAAA,aACzCD,KAAK,CAAC7B,GAAN,CAAU,UAAC+B,gBAAD,EAAmBC,KAAnB;AAAA,+CACLD,gBADK;AAER;AACA;AACA7B,UAAAA,MAAM,EAAE4B,MAAM,CAACG,OAAP,CAAeD,KAAf;AAJA;AAAA,OAAV,CADyC;AAAA,KAJ7C;AAYD;AAjBwC,CAAD,CAA1C,C,CAoBA;;AAEA,OAAO,IAAME,iBAAiB,GAAGZ,sBAAsB,CAACa,OAAjD","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport metaverses from '../../constants/metaverses';\nimport ContractServiceAPI from '../../libs/contract-service-api';\n\nexport interface MetaverseSummary {\n  traits: number[];\n}\n\nconst initialState: MetaverseSummary[] = metaverses.map((metaverse) => ({\n  traits: metaverse.traits.map(() => 0),\n}));\n\nexport const parsePrice = (price: string, payment_token: any) => {\n  const priceInToken = parseFloat(price);\n  const ethPrice = parseFloat(payment_token.eth_price);\n  return (priceInToken * ethPrice) / 10 ** payment_token.decimals;\n};\n\nexport const fetchCollectionSummary = createAsyncThunk(\n  'CollectionSummary/fetchCollectionSummary',\n  async () => {\n    const metaverseRequests = metaverses.map((metaverse) =>\n      metaverse.traits.map((traits) =>\n        ContractServiceAPI.getAssetFloorPrice(metaverse.primaryAddress, traits),\n      ),\n    );\n\n    const metaverseResponses = await Promise.all(\n      metaverseRequests.map((requests) => Promise.all(requests)),\n    );\n\n    const floorPrices = metaverseResponses.map((responses) =>\n      responses.map((response) => {\n        const { price, payment_token } = response;\n        return parsePrice(price, payment_token);\n      }),\n    );\n    return floorPrices;\n  },\n);\n\nconst collectionSummarySlice = createSlice({\n  name: 'CollectionSummary',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      // .addCase(fetchCollectionSummary.pending, (state) => {\n      //   state.isLoading = true;\n      // })\n      .addCase(fetchCollectionSummary.fulfilled, (state, action) =>\n        state.map((metaversesummary, index) => ({\n          ...metaversesummary,\n          // fetchCollectionSummary takes care of all metaversesummary related calls\n          // to be extended\n          traits: action.payload[index],\n        })),\n      );\n  },\n});\n\n// export const { } = collectionSummarySlice.actions;\n\nexport const collectionSummary = collectionSummarySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}