{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/anthonysiu/doko/DOKO/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { deserializeUnchecked, BinaryReader, BinaryWriter } from 'borsh';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { METADATA_SCHEMA, Metadata } from './classes';\nimport { MetadataKey } from './types';\n\nvar base58 = require('bs58');\n\nvar solanaRpcUrl = 'https://black-fragrant-tree.solana-mainnet.quiknode.pro/580c20b14f5a8fb782624bdce35ee63037ee3d3c/';\nexport var solanaConnection = new Connection(solanaRpcUrl);\nvar TOKEN_PROGRAM_ID = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';\nvar METADATA_PROGRAM_ID = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s';\n\nvar isMetadataAccount = function isMetadataAccount(account) {\n  return account.owner.toBase58() === METADATA_PROGRAM_ID;\n};\n\nvar isMetadataV1Account = function isMetadataV1Account(account) {\n  return account.data[0] === MetadataKey.MetadataV1;\n};\n\nvar decodeMetadata = function decodeMetadata(buffer) {\n  var metadata = deserializeUnchecked(METADATA_SCHEMA, Metadata, buffer);\n  metadata.data.name = metadata.data.name.replace(/\\0/g, '');\n  metadata.data.symbol = metadata.data.symbol.replace(/\\0/g, '');\n  metadata.data.uri = metadata.data.uri.replace(/\\0/g, '');\n  return metadata;\n};\n\nexport var getTokenInfo = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(mintAddress) {\n    var seed, tokenProgramAddressRes, tokenAddress, accountInfo, metadata;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            seed = [Buffer.from('metadata'), new PublicKey(METADATA_PROGRAM_ID).toBuffer(), new PublicKey(mintAddress).toBuffer()];\n            _context.next = 4;\n            return PublicKey.findProgramAddress(seed, new PublicKey(METADATA_PROGRAM_ID));\n\n          case 4:\n            tokenProgramAddressRes = _context.sent;\n            tokenAddress = tokenProgramAddressRes[0].toBase58();\n            _context.next = 8;\n            return solanaConnection.getAccountInfo(new PublicKey(tokenAddress));\n\n          case 8:\n            accountInfo = _context.sent;\n\n            if (!(accountInfo && accountInfo.data.length > 0)) {\n              _context.next = 15;\n              break;\n            }\n\n            if (isMetadataAccount(accountInfo)) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {});\n\n          case 12:\n            if (!isMetadataV1Account(accountInfo)) {\n              _context.next = 15;\n              break;\n            }\n\n            metadata = decodeMetadata(accountInfo.data);\n            return _context.abrupt(\"return\", metadata);\n\n          case 15:\n            _context.next = 20;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 20:\n            return _context.abrupt(\"return\", {});\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 17]]);\n  }));\n\n  return function getTokenInfo(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getTokenAccountsByOwner = function getTokenAccountsByOwner(address) {\n  return axios.post(solanaRpcUrl, {\n    jsonrpc: '2.0',\n    id: 1,\n    method: 'getTokenAccountsByOwner',\n    params: [address, {\n      programId: TOKEN_PROGRAM_ID\n    }, {\n      encoding: 'jsonParsed'\n    }]\n  });\n};\nexport var getTokenOwner = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address) {\n    var res, add, accountInfo;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return axios.post(solanaRpcUrl, {\n              jsonrpc: '2.0',\n              id: 1,\n              method: 'getTokenLargestAccounts',\n              params: [address]\n            });\n\n          case 2:\n            res = _context2.sent;\n            add = '';\n            res.data.result.value.forEach(function (data) {\n              if (data.uiAmount > 0) {\n                add = data.address;\n              }\n            });\n            _context2.next = 7;\n            return axios.post(solanaRpcUrl, {\n              jsonrpc: '2.0',\n              id: 1,\n              method: 'getAccountInfo',\n              params: [add, {\n                encoding: 'jsonParsed'\n              }]\n            });\n\n          case 7:\n            accountInfo = _context2.sent;\n            return _context2.abrupt(\"return\", accountInfo.data.result.value.data.parsed.info.owner);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getTokenOwner(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getSolanaNFTMetadata = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(NFTMetadata) {\n    var metadata;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return axios.get(NFTMetadata.data.uri);\n\n          case 3:\n            metadata = _context3.sent;\n            return _context3.abrupt(\"return\", {\n              mint: NFTMetadata.mint,\n              metadata: metadata\n            });\n\n          case 7:\n            _context3.prev = 7;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.error(_context3.t0);\n\n          case 10:\n            return _context3.abrupt(\"return\", {});\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 7]]);\n  }));\n\n  return function getSolanaNFTMetadata(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar extendBorsh = function extendBorsh() {\n  BinaryReader.prototype.readPubkey = function () {\n    var reader = this;\n    var array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  BinaryWriter.prototype.writePubkey = function (value) {\n    var writer = this;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  BinaryReader.prototype.readPubkeyAsString = function () {\n    var reader = this;\n    var array = reader.readFixedArray(32);\n    return base58.encode(array);\n  };\n\n  BinaryWriter.prototype.writePubkeyAsString = function (value) {\n    var writer = this;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\n\nextendBorsh();","map":{"version":3,"sources":["/Users/anthonysiu/doko/DOKO/client/src/libs/metaplex/utils.ts"],"names":["axios","deserializeUnchecked","BinaryReader","BinaryWriter","Connection","PublicKey","METADATA_SCHEMA","Metadata","MetadataKey","base58","require","solanaRpcUrl","solanaConnection","TOKEN_PROGRAM_ID","METADATA_PROGRAM_ID","isMetadataAccount","account","owner","toBase58","isMetadataV1Account","data","MetadataV1","decodeMetadata","buffer","metadata","name","replace","symbol","uri","getTokenInfo","mintAddress","seed","Buffer","from","toBuffer","findProgramAddress","tokenProgramAddressRes","tokenAddress","getAccountInfo","accountInfo","length","console","error","getTokenAccountsByOwner","address","post","jsonrpc","id","method","params","programId","encoding","getTokenOwner","res","add","result","value","forEach","uiAmount","parsed","info","getSolanaNFTMetadata","NFTMetadata","get","mint","extendBorsh","prototype","readPubkey","reader","array","readFixedArray","writePubkey","writer","writeFixedArray","readPubkeyAsString","encode","writePubkeyAsString","decode"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { deserializeUnchecked, BinaryReader, BinaryWriter } from 'borsh';\nimport { Connection, PublicKey, AccountInfo } from '@solana/web3.js';\nimport { METADATA_SCHEMA, Metadata } from './classes';\nimport { MetadataKey, StringPublicKey } from './types';\n\nconst base58 = require('bs58');\n\nconst solanaRpcUrl = 'https://black-fragrant-tree.solana-mainnet.quiknode.pro/580c20b14f5a8fb782624bdce35ee63037ee3d3c/';\nexport const solanaConnection = new Connection(solanaRpcUrl);\nconst TOKEN_PROGRAM_ID = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';\nconst METADATA_PROGRAM_ID = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s';\n\nconst isMetadataAccount = (account: AccountInfo<Buffer>) =>\n  \n  account.owner.toBase58() === METADATA_PROGRAM_ID;\n\nconst isMetadataV1Account = (account: AccountInfo<Buffer>) =>\n  \n  account.data[0] === MetadataKey.MetadataV1;\n\nconst decodeMetadata = (buffer: Buffer): Metadata => {\n  const metadata = deserializeUnchecked(METADATA_SCHEMA,\n    Metadata,\n    buffer) as Metadata;\n\n  metadata.data.name = metadata.data.name.replace(/\\0/g, '');\n  metadata.data.symbol = metadata.data.symbol.replace(/\\0/g, '');\n  metadata.data.uri = metadata.data.uri.replace(/\\0/g, '');\n  return metadata;\n};\n\nexport const getTokenInfo = async (mintAddress: string) => {\n  try {\n    const seed = [Buffer.from('metadata'), (new PublicKey(METADATA_PROGRAM_ID)).toBuffer(), new PublicKey(mintAddress).toBuffer()];\n    const tokenProgramAddressRes = await PublicKey\n      .findProgramAddress(seed, new PublicKey(METADATA_PROGRAM_ID));\n    const tokenAddress = tokenProgramAddressRes[0].toBase58();\n    const accountInfo = await solanaConnection.getAccountInfo(new PublicKey(tokenAddress));\n    if (accountInfo && accountInfo.data.length > 0) {\n      if (!isMetadataAccount(accountInfo)) return {};\n      if (isMetadataV1Account(accountInfo)) {\n        const metadata = decodeMetadata(accountInfo.data);\n        return metadata;\n      }\n    }\n  } catch (err) {\n    \n    console.error(err);\n  }\n  return {};\n};\n\nexport const getTokenAccountsByOwner = (address: string) =>\n  \n  axios.post(solanaRpcUrl, {\n    jsonrpc: '2.0',\n    id: 1,\n    method: 'getTokenAccountsByOwner',\n    params: [\n      address,\n      {\n        programId: TOKEN_PROGRAM_ID,\n      },\n      {\n        encoding: 'jsonParsed',\n      },\n    ],\n  });\n\nexport const getTokenOwner = async (address: string) => {\n  const res = await axios.post(solanaRpcUrl, {\n    jsonrpc: '2.0',\n    id: 1,\n    method: 'getTokenLargestAccounts',\n    params: [\n      address,\n    ],\n  });\n  let add = '';\n  res.data.result.value.forEach((data: any) => {\n    if (data.uiAmount > 0) {\n      add = data.address;\n    }\n  });\n  const accountInfo = await axios.post(solanaRpcUrl, {\n    jsonrpc: '2.0',\n    id: 1,\n    method: 'getAccountInfo',\n    params: [\n      add,\n      {\n        encoding: 'jsonParsed',\n      },\n    ],\n  });\n  return accountInfo.data.result.value.data.parsed.info.owner;\n};\n\nexport const getSolanaNFTMetadata = async (NFTMetadata: Metadata) => {\n  try {\n    const metadata: any = await axios.get(NFTMetadata.data.uri);\n    return {\n      mint: NFTMetadata.mint,\n      metadata,\n    };\n  } catch (err) {\n    \n    console.error(err);\n  }\n  return {};\n};\n\nconst extendBorsh = () => {\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  (BinaryWriter.prototype as any).writePubkey = function (value: any) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array) as StringPublicKey;\n  };\n\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (value: StringPublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\nextendBorsh();\n"]},"metadata":{},"sourceType":"module"}